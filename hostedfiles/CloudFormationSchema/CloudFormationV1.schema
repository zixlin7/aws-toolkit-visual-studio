{
  "intrinsic-functions": {
    "Fn::Base64": {
      "parameter": "Object",
      "return-type": "String",
      "description": "The intrinsic function Fn::Base64 returns the Base64 representation of the input string. This function is typically used to pass encoded data to Amazon EC2 instances by way of the UserData property.",
      "skeleton": "{\"Fn::Base64\" : {}}"
    },
    "Fn::FindInMap": {
      "parameter": "Array",
      "return-type": "String",
      "description": "The intrinsic function Fn::FindInMap returns the value of a key from a mapping declared in the Mappings section.",
      "skeleton": "{\"Fn::FindInMap\" : [ \"\" , \"\", \"\"] }"
    },
    "Fn::GetAtt": {
      "parameter": "Array",
      "return-type": "String",
      "description": "The intrinsic function Fn::GetAtt returns the value of an attribute from a resource in the template.",
      "skeleton": "{\"Fn::GetAtt\" : [ \"\", \"\"]}"
    },
    "Fn::GetAZs": {
      "parameter": "String",
      "return-type": "Array",
      "description": "The intrinsic function Fn::GetAZs returns an array that lists all Availability Zones for the specified region.",
      "skeleton": "{ \"Fn::GetAZs\" : \"\" }"
    },
    "Fn::ImportValue": {
      "parameter": "Object",
      "return-type": "String",
      "description": "The intrinsic function Fn::ImportValue returns the value of an output exported by another stack.",
      "skeleton": "{ \"Fn::ImportValue\" : {} }"
    },
    "Fn::Join": {
      "parameter": "Array",
      "return-type": "String",
      "description": "The intrinsic function Fn::Join appends a set of values into a single value, separated by the specified delimiter. If a delimiter is the empty string, the set of values are concatenated with no delimiter.",
      "skeleton": "{\"Fn::Join\" : [ \"\", [ ] ]}"
    },
    "Fn::Select": {
      "parameter": "Array",
      "return-type": "String",
      "description": "The intrinsic function Fn::Select returns a single object from a list of objects by index.",
      "skeleton": "{ \"Fn::Select\" : [ 0, [] ] }"
    },
    "Fn::If": {
      "parameter": "Array",
      "return-type": "String",
      "description": "Returns one value if the specified condition evaluates to true and another value if the specified condition evaluates to false. You can use the AWS::NoValue pseudo parameter as a return value to remove the corresponding property.",
      "skeleton": "{ \"Fn::If\" : [ ] }"
    },
    "Fn::Split": {
      "parameter": "Array",
      "return-type": "String",
      "description": "To split a string into a list of string values so that you can select an element from the resulting string list, use the Fn::Split intrinsic function.",
      "skeleton": "{ \"Fn::Split\" : [ ] }"
    },
    "Fn::Sub": {
      "parameter": "Array",
      "return-type": "String",
      "description": "The intrinsic function Fn::Sub substitutes variables in an input string with values that you specify. ",
      "skeleton": "{ \"Fn::Sub\" : [ ] }"
    },
    "Ref": {
      "parameter": "String",
      "return-type": "String",
      "description": "The intrinsic function Ref returns the value of the specified parameter or resource."
    }
  }
,
  "pseudo-parameters": {
    "AWS::NotificationARNs": {
      "type": "Array",
      "array-type": "String",
      "description": "Returns the list of notification Amazon Resource Names (ARNs) for the current stack."
    },
    "AWS::Region": {
      "type": "String",
      "description": "Returns a string representing the AWS Region in which the encompassing resource is being created."
    },
    "AWS::StackId": {
      "type": "String",
      "description": "Returns the ID of the stack."
    },
    "AWS::StackName": {
      "type": "String",
      "description": "Returns the name of the stack."
    },
    "AWS::AccountId": {
      "type": "String",
      "description": "Returns the AWS account ID of the account in which the stack is being created."
    },
    "AWS::NoValue": {
      "type": "String",
      "description": "Used to unset a property for conditional properties."
    }
  }
,"root-schema-object" :{"type": "Object","required": true,"properties": {
  "AWSTemplateFormatVersion": {
    "type": "String",
    "required": false,
    "allowed-values": [
      "2010-09-09"
    ],
    "disable-refs": true,
    "description": "The template format version is an optional declaration that identifies the capabilities of the template format. Because the AWS CloudFormation template format has not changed, there is currently only one value supported."
  }
,
  "Transform": {
    "type": "String",
    "required": false,
    "disable-refs": true,
    "disable-functions": true,
    "allowed-values": [
      "*",
      "AWS::Serverless-2016-10-31"
    ],
    "description": "The optional Transform section specifies a transform that AWS CloudFormation uses to process your template. A transform is a specific version of the AWS Serverless Application Model (AWS SAM). This model defines the AWS SAM syntax that you can use and how AWS CloudFormation processes it."
  }
,
  "Description": {
    "type": "String",
    "required": false,
    "disable-refs": true,
    "disable-functions": true,
    "description": "The template Description section is optional. When it is present, it must follow the AWSTemplateFormatVersion section."
  }
,
  "Parameters": {
    "type": "Named-Array",
    "required": false,
    "description": "The optional Parameters section enables you to pass values into your template at stack creation time. Parameters allow you to create templates that can be customized for each stack deployment. When a user creates a stack from a template containing parameters, the user can specify values for those parameters. Within the template, you can use the \"Ref\" intrinsic function to specify those parameter values in properties values for resources.",
    "default-child-schema": {
      "type": "Object",
      "required": false,
      "properties": {
        "Type": {
          "type": "String",
          "required": true,
          "description": "The type of parameter to create.",
          "allowed-values": [
            "*",
            "String",
            "Number",
            "List<Number>",
            "CommaDelimitedList",
            "AWS::EC2::AvailabilityZone::Name",
            "List<AWS::EC2::AvailabilityZone::Name>",
            "AWS::EC2::Image::Id",
            "List<AWS::EC2::Image::Id>",
            "AWS::EC2::Instance::Id",
            "List<AWS::EC2::Instance::Id>",
            "AWS::EC2::KeyPair::KeyName",
            "AWS::EC2::SecurityGroup::GroupName",
            "List<AWS::EC2::SecurityGroup::GroupName>",
            "AWS::EC2::SecurityGroup::Id",
            "List<AWS::EC2::SecurityGroup::Id>",
            "AWS::EC2::Subnet::Id",
            "List<AWS::EC2::Subnet::Id>",
            "AWS::EC2::Volume::Id",
            "List<AWS::EC2::Volume::Id>",
            "AWS::EC2::VPC::Id",
            "List<AWS::EC2::VPC::Id>",
            "AWS::Route53::HostedZone::Id",
            "List<AWS::Route53::HostedZone::Id>",
            "AWS::SSM::Parameter::Name",
            "AWS::SSM::Parameter::Value<String>",
            "AWS::SSM::Parameter::Value<List<String>>",
            "AWS::SSM::Parameter::Value<CommaDelimitedList>"
          ]
        },
        "Default": {
          "type": "String",
          "required": false,
          "description": "A value of the appropriate type for the template to use if no value is specified at stack creation."
        },
        "NoEcho": {
          "type": "String",
          "required": false,
          "description": "If TRUE, the value of the parameter is masked with asterisks (*****) with cfn-describe-stacks."
        },
        "AllowedValues": {
          "type": "Array",
          "array-type": "String",
          "required": false,
          "description": "An array containing the list of values allowed for the parameter."
        },
        "AllowedPattern": {
          "type": "String",
          "required": false,
          "description": " A regular expression that represents the patterns allowed in the parameter's string value."
        },
        "MaxLength": {
          "type": "String",
          "required": false,
          "description": "A integer value that determines the maximum number of characters in the parameter's string value."
        },
        "MinLength": {
          "type": "String",
          "required": false,
          "description": "A integer value that determines the minimum number of characters in the parameter's string value."
        },
        "MaxValue": {
          "type": "Number",
          "required": false,
          "description": "A numeric value that determines the largest numeric value allowed for the parameter."
        },
        "MinValue": {
          "type": "Number",
          "required": false,
          "description": "A numeric value that determines the smallest numeric value allowed for the parameter."
        },
        "Description": {
          "type": "String",
          "required": false,
          "description": "A String type up to 4000 characters describing the parameter."
        },
        "ConstraintDescription": {
          "type": "String",
          "required": false,
          "description": "A String type that describes the constraint requirements when the user specifies a parameter value that does not match the constraints defined for the parameter."
        }
      }
    }
  }
,
  "Mappings": {
    "type": "Named-Array",
    "required": false,
    "description": "Mappings match a key to a corresponding set of named values. For example, if you want to set values based on a region, you can create a mapping that uses the region name as a key and contains the values you want to specify for each specific region.",
    "default-child-schema": {
      "type": "Json",
      "required": true
    }
  }
,
  "Metadata": {
    "type": "Json",
    "required": false,
    "disable-refs": true,
    "description": "You can use the optional Metadata section to include arbitrary JSON objects that provide details about the template."
  }
,
  "Conditions": {
    "type": "Named-Array",
    "required": false,
    "description": "You define all conditions in the Conditions section of a template by using intrinsic functions. With these intrinsic functions, you can, for example, compare whether a value is equal to another value. Based on the result of a condition, you can conditionally create resources.",
    "default-child-schema": {
      "type": "ConditionDefinitions",
      "required": true,
      "properties": {
        "Fn::And": {
          "type": "Array",
          "array-type": "Json",
          "required": false,
          "description": "Returns true if all the specified conditions evaluate to true, or returns false if any one of the conditions evaluates to false. Fn::And acts as an AND operator."
        },
        "Fn::Equals": {
          "type": "Array",
          "array-type": "Json",
          "required": false,
          "description": "Compares if two values are equal. Returns true if the two values are equal or false if they aren't."
        },
        "Fn::Not": {
          "type": "Array",
          "array-type": "Json",
          "required": false,
          "description": "Returns true for a condition that evaluates to false or returns false for a condition that evaluates to true. Fn::Not acts as a NOT operator."
        },
        "Fn::Or": {
          "type": "Array",
          "array-type": "Json",
          "required": false,
          "description": "Returns true if any one of the specified conditions evaluate to true, or returns false if all of the conditions evaluates to false. Fn::Or acts as an OR operator."
        }
      }
    }
  }
,
  "Globals": {
    "type": "Object",
    "required": false,
    "description": "Globals is a section in your SAM template to define properties common to all your Serverless Function and APIs.",
    "properties": {
      "Function": {
        "type": "Object",
        "required": false,
        "description": "Properties of AWS::Serverless::Function",
        "properties": {
          "Handler": {
            "type": "String",
            "required": true,
            "description": "Function within your code that is called to begin execution."
          },
          "Runtime": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "*",
              "dotnetcore1.0",
              "dotnetcore2.0",
              "dotnetcore2.1",
              "go1.x",
              "java8",
              "nodejs",
              "nodejs4.3",
              "nodejs4.3-edge",
              "nodejs6.10",
              "nodejs8.10",
              "python2.7",
              "python3.6"
            ],
            "description": "The runtime environment for the Lambda function that you are uploading."
          },
          "CodeUri": {
            "type": "String",
            "required": true,
            "description": "S3 Uri to the function code. The S3 object this Uri references MUST be a Lambda deployment package."
          },
          "DeadLetterQueue": {
            "type": "Json",
            "required": false,
            "description": "Configures SNS topic or SQS queue where Lambda sends events that it can't process.",
            "resource-ref-type": [
              "*",
              "AWS::SNS::Topic",
              "AWS::SQS::Queue"
            ]
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "Description of the function."
          },
          "MemorySize": {
            "type": "Number",
            "required": false,
            "description": "The amount of memory, in MB, that is allocated to your Lambda function. Lambda uses this value to infer the amount of CPU and memory that is allocated to your function."
          },
          "Timeout": {
            "type": "Number",
            "required": false,
            "description": "The function execution time (in seconds) after which Lambda terminates the function. By default, Timeout is set to 3 seconds."
          },
          "VpcConfig": {
            "type": "Object",
            "required": false,
            "description": "If the Lambda function requires access to resources in a VPC, specify a VPC configuration that Lambda uses to set up an elastic network interface (ENI).",
            "properties": {
              "SecurityGroupIds": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "description": "A list of one or more security groups IDs in the VPC that includes the resources to which your Lambda function requires access."
              },
              "SubnetIds": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "resource-ref-type": "AWS::EC2::Subnet",
                "description": "A list of one or more subnet IDs in the VPC that includes the resources to which your Lambda function requires access."
              }
            }
          },
          "Environment": {
            "type": "Object",
            "required": false,
            "description": "Key-value pairs that Lambda caches and makes available for your Lambda functions.",
            "properties": {
              "Variables": {
                "type": "Json",
                "required": false,
                "description": "A map of key-value pairs that the Lambda function can access."
              }
            }
          },
          "Tags": {
            "type": "Json",
            "required": false,
            "description": "A map (string to string) that specifies the tags to be added to this function."
          },
          "Tracing": {
            "type": "String",
            "required": false,
            "description": "String that specifies the function's X-Ray tracing mode.",
            "allowed-values": [
              "*",
              "Active",
              "PassThrough"
            ]
          },
          "KmsKeyArn": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::KMS::Key",
            "description": "The Amazon Resource Name (ARN) of an AWS Key Management Service (AWS KMS) key that Lambda uses to encrypt and decrypt your function's environment variables."
          },
          "Layers": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "List of LayerVersion ARNs that should be used by this function."
          },
          "AutoPublishAlias": {
            "type": "String",
            "required": false,
            "description": "Name of the Alias."
          },
          "DeploymentPreference": {
            "type": "Json",
            "required": false,
            "description": "Settings to enable Safe Lambda Deployments."
          }
        }
      },
      "Api": {
        "type": "Object",
        "required": false,
        "description": "Properties of AWS::Serverless::Api",
        "properties": {
          "Name": {
            "type": "String",
            "required": true,
            "description": "A name for the API Gateway RestApi resource."
          },
          "DefinitionUri": {
            "type": "String",
            "required": false,
            "description": "S3 URI to the Swagger document describing the API."
          },
          "CacheClusterEnabled": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether cache clustering is enabled for the stage."
          },
          "CacheClusterSize": {
            "type": "String",
            "required": false,
            "description": "The stage's cache cluster size."
          },
          "Variables": {
            "type": "Json",
            "required": false,
            "description": "A map (string to string map) that defines the stage variables, where the variable name is the key and the variable value is the value."
          },
          "MethodSettings": {
            "type": "Object",
            "required": false,
            "description": "Configures settings for all of the stage's methods.",
            "properties": {
              "CacheDataEncrypted": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether the cached responses are encrypted."
              },
              "CacheTtlInSeconds": {
                "type": "Number",
                "required": false,
                "description": "The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses."
              },
              "CachingEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether responses are cached and returned for requests."
              },
              "DataTraceEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether data trace logging is enabled for methods in the stage."
              },
              "HttpMethod": {
                "type": "String",
                "required": false,
                "description": "The HTTP method."
              },
              "LoggingLevel": {
                "type": "String",
                "required": false,
                "description": "The logging level for this method."
              },
              "MetricsEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether Amazon CloudWatch metrics are enabled for methods in the stage."
              },
              "ResourcePath": {
                "type": "String",
                "required": false,
                "description": "The resource path for this method. Forward slashes (/) are encoded as ~1 and the initial slash must include a forward slash. For example, the path value /resource/subresource must be encoded as /~1resource~1subresource. To specify the root path, use only a slash (/)."
              },
              "ThrottlingBurstLimit": {
                "type": "Number",
                "required": false,
                "description": "The number of burst requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account."
              },
              "ThrottlingRateLimit": {
                "type": "Number",
                "required": false,
                "description": "The number of steady-state requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account."
              }
            }
          },
          "EndpointConfiguration": {
            "type": "String",
            "required": false,
            "description": "Specify the type of endpoint for API endpoint.",
            "allowed-values": [
              "*",
              "REGIONAL",
              "EDGE"
            ]
          },
          "BinaryMediaTypes": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "List of MIME types that your API could return."
          },
          "Cors": {
            "type": "Json",
            "required": false,
            "description": "Enable CORS for all your APIs."
          }
        }
      },
      "SimpleTable": {
        "type": "Object",
        "required": false,
        "description": "Properties of AWS::Serverless::SimpleTable",
        "properties": {
          "SSESpecification": {
            "type": "Object",
            "required": false,
            "description": "Specifies the settings to enable server-side encryption.",
            "properties": {
              "SSEEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Whether server-side encryption is enabled or not."
              }
            }
          }
        }
      }
    }
  }
,"Resources": {"type": "Named-Array","schema-lookup-property": "Type","required": true,"description": "The required Resources section describes the member resources in your AWS CloudFormation template.","child-schemas": {
  "Alexa::ASK::Skill": {
    "type": "Object",
    "required": false,
    "description": "The Alexa::ASK::Skill resource creates an Alexa skill that enables customers to access new abilities.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The Alexa::ASK::Skill resource creates an Alexa skill that enables customers to access new abilities."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AuthenticationConfiguration": {
            "type": "Object",
            "required": true,
            "description": "Login with Amazon (LWA) configuration used to authenticate with the Alexa service.",
            "properties": {
              "RefreshToken": {
                "type": "String",
                "required": true,
                "description": "Refresh Token from Login with Amazon (LWA)."
              },
              "ClientSecret": {
                "type": "String",
                "required": true,
                "description": "Client Secret from Login with Amazon (LWA)."
              },
              "ClientId": {
                "type": "String",
                "required": true,
                "description": "Client ID from Login with Amazon (LWA)."
              }
            }
          },
          "VendorId": {
            "type": "String",
            "required": true,
            "description": "The vendor ID associated with the Amazon developer account that will host the skill."
          },
          "SkillPackage": {
            "type": "Object",
            "required": true,
            "description": "Configuration for the skill package that contains the components of the Alexa Skill.",
            "properties": {
              "S3BucketRole": {
                "type": "String",
                "required": false,
                "description": "ARN of the role that grants the Alexa service permission to access the bucket and retrieve the skill package.",
                "resource-ref-type": "AWS::IAM::ROLE"
              },
              "S3ObjectVersion": {
                "type": "String",
                "required": false,
                "description": "If you have S3 versioning enabled, the version ID of the skill package.zip file."
              },
              "S3Bucket": {
                "type": "String",
                "required": true,
                "description": "ARN of the role that grants the Alexa service permission to access the bucket and retrieve the skill package.",
                "resource-ref-type": "AWS::S3::Bucket"
              },
              "S3Key": {
                "type": "String",
                "required": true,
                "description": "The location and name of the skill package .zip file."
              },
              "Overrides": {
                "type": "Object",
                "required": false,
                "description": "Overrides to the skill package to apply when creating or updating the skill.",
                "properties": {
                  "Manifest": {
                    "type": "Json",
                    "required": false,
                    "description": "Overrides to apply to the skill manifest inside of the skill package."
                  }
                }
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AmazonMQ::Broker": {
    "type": "Object",
    "required": false,
    "description": "A broker is a message broker environment running on Amazon MQ. It is the basic building block of Amazon MQ.",
    "return-values": [
      {
        "name": "BrokerId",
        "description": "The unique ID that Amazon MQ generates for the broker."
      },
      {
        "name": "IpAddresses",
        "description": "The IP addresses of each broker instance as a list of strings."
      },
      {
        "name": "OpenWireEndpoints",
        "description": "The OpenWire endpoints of each broker instance as a list of strings."
      },
      {
        "name": "ConfigurationRevision",
        "description": "The revision number of the configuration."
      },
      {
        "name": "StompEndpoints",
        "description": "The STOMP endpoints of each broker instance as a list of strings."
      },
      {
        "name": "MqttEndpoints",
        "description": "The MQTT endpoints of each broker instance as a list of strings."
      },
      {
        "name": "AmqpEndpoints",
        "description": "The AMQP endpoints of each broker instance as a list of strings."
      },
      {
        "name": "Arn",
        "description": "The Amazon Resource Name (ARN) of the Amazon MQ broker."
      },
      {
        "name": "ConfigurationId",
        "description": "The unique ID that Amazon MQ generates for the configuration."
      },
      {
        "name": "WssEndpoints",
        "description": "The WSS endpoints of each broker instance as a list of strings."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "A broker is a message broker environment running on Amazon MQ. It is the basic building block of Amazon MQ."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "SecurityGroups": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.",
            "resource-ref-type": [
              "AWS::EC2::SecurityGroup"
            ]
          },
          "EngineVersion": {
            "type": "String",
            "required": true,
            "description": "The version of the broker engine.",
            "allowed-values": [
              "*",
              "5.15.0"
            ]
          },
          "Configuration": {
            "type": "Object",
            "required": false,
            "description": "The broker configuration. If no configuration exists for a broker, Amazon MQ creates a default configuration.",
            "properties": {
              "Revision": {
                "type": "Number",
                "required": true,
                "description": "The revision number of the configuration."
              },
              "Id": {
                "type": "String",
                "required": true,
                "description": "The unique ID that Amazon MQ generates for the configuration."
              }
            }
          },
          "MaintenanceWindowStartTime": {
            "type": "Object",
            "required": false,
            "description": "The parameters that determine the WeeklyStartTime.",
            "properties": {
              "DayOfWeek": {
                "type": "String",
                "required": true,
                "description": "The day of the week, for example MONDAY, TUESDAY.",
                "allowed-values": [
                  "*",
                  "MONDAY",
                  "TUESDAY",
                  "WEDNESDAY",
                  "THURSDAY",
                  "FRIDAY",
                  "SATURDAY",
                  "SUNDAY"
                ]
              },
              "TimeOfDay": {
                "type": "String",
                "required": true,
                "description": "The time, in 24-hour format."
              },
              "TimeZone": {
                "type": "String",
                "required": true,
                "description": "The time zone, UTC by default, in either the Country/City format, or the UTC offset format."
              }
            }
          },
          "DeploymentMode": {
            "type": "String",
            "required": true,
            "description": "The deployment mode of the broker.",
            "allowed-values": [
              "*",
              "SINGLE_INSTANCE",
              "ACTIVE_STANDBY_MULTI_AZ"
            ]
          },
          "HostInstanceType": {
            "type": "String",
            "required": true,
            "description": "The broker's instance type."
          },
          "EngineType": {
            "type": "String",
            "required": true,
            "description": "The type of broker engine.",
            "allowed-values": [
              "*",
              "ACTIVEMQ"
            ]
          },
          "AutoMinorVersionUpgrade": {
            "type": "Boolean",
            "required": true,
            "description": "Enables automatic upgrades to new minor versions for brokers, as Apache releases the versions. "
          },
          "Users": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "The list of all ActiveMQ usernames for the specified broker.",
            "properties": {
              "Username": {
                "type": "String",
                "required": true,
                "description": "The username of the ActiveMQ user."
              },
              "Groups": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The list of groups (20 maximum) to which the ActiveMQ user belongs."
              },
              "ConsoleAccess": {
                "type": "Boolean",
                "required": false,
                "description": "Enables access to the ActiveMQ Web Console for the ActiveMQ user."
              },
              "Password": {
                "type": "String",
                "required": true,
                "description": "The password of the user"
              }
            }
          },
          "PubliclyAccessible": {
            "type": "Boolean",
            "required": true,
            "description": "Enables connections from applications outside of the VPC that hosts the broker's subnets."
          },
          "SubnetIds": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The list of groups (2 maximum) that define which subnets and IP ranges the broker can use from different Availability Zones.",
            "resource-ref-type": [
              "AWS::EC2::Subnet"
            ]
          },
          "BrokerName": {
            "type": "String",
            "required": true,
            "description": "The name of the broker. This value must be unique in your AWS account, 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain whitespaces, brackets, wildcard characters, or special characters."
          },
          "Logs": {
            "type": "Object",
            "required": false,
            "description": "The Amazon CloudWatch Logs configuration for the broker.",
            "properties": {
              "Audit": {
                "type": "Boolean",
                "required": false,
                "description": "Enables audit logging."
              },
              "General": {
                "type": "Boolean",
                "required": false,
                "description": "Enables general logging."
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "An array of key-value pairs",
            "properties": {
              "Value": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Key": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AmazonMQ::Configuration": {
    "type": "Object",
    "required": false,
    "description": "A configuration contains all of the settings for your ActiveMQ broker, in XML format.",
    "return-values": [
      {
        "name": "Revision",
        "description": "The revision number of the configuration."
      },
      {
        "name": "Id",
        "description": "The id of the Amazon MQ configuration."
      },
      {
        "name": "Arn",
        "description": "The Amazon Resource Name (ARN) of the Amazon MQ configuration."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "A configuration contains all of the settings for your ActiveMQ broker, in XML format."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "EngineVersion": {
            "type": "String",
            "required": true,
            "description": "The version of the broker engine.",
            "allowed-values": [
              "*",
              "5.15.0"
            ]
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "The description of the configuration."
          },
          "EngineType": {
            "type": "String",
            "required": true,
            "description": "The type of broker engine.",
            "allowed-values": [
              "*",
              "ACTIVEMQ"
            ]
          },
          "Data": {
            "type": "String",
            "required": true,
            "description": "The base64-encoded XML configuration."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "An array of key-value pairs.",
            "properties": {
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value name of the tag."
              },
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key for the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AmazonMQ::ConfigurationAssociation": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS CloudFormation AWS::AmazonMQ::ConfigurationAssociation resource to associate a Configuration with a Broker, or return information about the specified configurationassociation.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS CloudFormation AWS::AmazonMQ::ConfigurationAssociation resource to associate a Configuration with a Broker, or return information about the specified configurationassociation."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Broker": {
            "type": "String",
            "required": true,
            "description": "The broker to associate with a configuration."
          },
          "Configuration": {
            "type": "Object",
            "required": true,
            "description": "The configuration to associate with a broker.",
            "properties": {
              "Revision": {
                "type": "Number",
                "required": true,
                "description": "The revision number of the configuration."
              },
              "Id": {
                "type": "String",
                "required": true,
                "description": "The Id of the configuration."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::Account": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::Account resource specifies the AWS Identity and Access Management (IAM) role that Amazon API Gateway (API Gateway) uses to write API logs to Amazon CloudWatch Logs (CloudWatch Logs).",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::Account resource specifies the AWS Identity and Access Management (IAM) role that Amazon API Gateway (API Gateway) uses to write API logs to Amazon CloudWatch Logs (CloudWatch Logs)."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CloudWatchRoleArn": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The Amazon Resource Name (ARN) of an IAM role that has write access to CloudWatch Logs in your account."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::ApiKey": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::ApiKey resource creates a unique key that you can distribute to clients who are executing Amazon API Gateway (API Gateway) Method resources that require an API key.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::ApiKey resource creates a unique key that you can distribute to clients who are executing Amazon API Gateway (API Gateway) Method resources that require an API key."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the purpose of the API key."
          },
          "Enabled": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the API key can be used by clients."
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "A name for the API key. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the API key name."
          },
          "StageKeys": {
            "type": "Object",
            "required": false,
            "description": "A list of stages to associated with this API key.",
            "properties": {
              "RestApiId": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::ApiGateway::RestApi",
                "description": "The ID of a RestApi resource that includes the stage with which you want to associate the API key."
              },
              "StageName": {
                "type": "String",
                "required": false,
                "description": "The name of the stage with which to associate the API key. The stage must be included in the RestApi resource that you specified in the RestApiId property."
              }
            }
          },
          "CustomerId": {
            "type": "String",
            "required": false,
            "description": "An AWS Marketplace customer identifier to use when integrating with the AWS SaaS Marketplace."
          },
          "GenerateDistinctId": {
            "type": "Boolean",
            "required": false,
            "description": "Specifies whether the key identifier is distinct from the created API key value."
          },
          "Value": {
            "type": "String",
            "required": false,
            "description": "The value of the API Key."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::Authorizer": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::Authorizer resource creates an authorization layer that Amazon API Gateway (API Gateway) activates for methods that have authorization enabled. API Gateway activates the authorizer when a client calls those methods.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::Authorizer resource creates an authorization layer that Amazon API Gateway (API Gateway) activates for methods that have authorization enabled. API Gateway activates the authorizer when a client calls those methods."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AuthorizerCredentials": {
            "type": "String",
            "required": false,
            "description": "The credentials required for the authorizer. To specify an AWS Identity and Access Management (IAM) role that API Gateway assumes, specify the role's Amazon Resource Name (ARN). To use resource-based permissions on the AWS Lambda (Lambda) function, specify null."
          },
          "AuthorizerResultTtlInSeconds": {
            "type": "Number",
            "required": false,
            "description": "The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches authorizer results."
          },
          "AuthorizerUri": {
            "type": "String",
            "required": true,
            "description": "The authorizer's Uniform Resource Identifier (URI)."
          },
          "IdentitySource": {
            "type": "String",
            "required": true,
            "description": "The source of the identity in an incoming request."
          },
          "IdentityValidationExpression": {
            "type": "String",
            "required": false,
            "description": "A validation expression for the incoming identity."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "The name of the authorizer."
          },
          "ProviderARNs": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "A list of the Amazon Cognito user pool Amazon Resource Names (ARNs) to associate with this authorizer."
          },
          "RestApiId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::ApiGateway::RestApi",
            "description": "The ID of the RestApi resource in which API Gateway creates the authorizer."
          },
          "Type": {
            "type": "String",
            "required": true,
            "description": "The type of the authorizer, such as TOKEN."
          },
          "AuthType": {
            "type": "String",
            "required": false,
            "description": "An optional customer-defined field that's used in Swagger imports and exports without functional impact."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::BasePathMapping": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::BasePathMapping resource creates a base path that clients who call your Amazon API Gateway API must use in the invocation URL.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::BasePathMapping resource creates a base path that clients who call your Amazon API Gateway API must use in the invocation URL."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "BasePath": {
            "type": "String",
            "required": false,
            "description": "The base path name that callers of the API must provide in the URL after the domain name."
          },
          "DomainName": {
            "type": "String",
            "required": true,
            "description": "The name of a DomainName resource."
          },
          "RestApiId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ApiGateway::RestApi",
            "description": "The name of the API."
          },
          "Stage": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::ApiGateway::Stage",
            "description": "The name of the API's stage."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::ClientCertificate": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::ClientCertificate resource creates a client certificate that Amazon API Gateway (API Gateway) uses to configure client-side SSL authentication for sending requests to the integration endpoint.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::ClientCertificate resource creates a client certificate that Amazon API Gateway (API Gateway) uses to configure client-side SSL authentication for sending requests to the integration endpoint."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the client certificate."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::Deployment": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::Deployment resource deploys an Amazon API Gateway (API Gateway) RestApi resource to a stage so that clients can call the API over the Internet.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::Deployment resource deploys an Amazon API Gateway (API Gateway) RestApi resource to a stage so that clients can call the API over the Internet."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the purpose of the API Gateway deployment."
          },
          "RestApiId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ApiGateway::RestApi",
            "description": "The ID of the RestApi resource to deploy."
          },
          "StageDescription": {
            "type": "Object",
            "required": false,
            "description": "Configures the stage that API Gateway creates with this deployment.",
            "properties": {
              "CacheClusterEnabled": {
                "type": "String",
                "required": false,
                "description": "Indicates whether cache clustering is enabled for the stage."
              },
              "CacheClusterSize": {
                "type": "String",
                "required": false,
                "description": "The size of the stage's cache cluster."
              },
              "CacheDataEncrypted": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether the cached responses are encrypted."
              },
              "CacheTtlInSeconds": {
                "type": "Number",
                "required": false,
                "description": "The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses."
              },
              "CachingEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether responses are cached and returned for requests."
              },
              "ClientCertificateId": {
                "type": "String",
                "required": false,
                "description": "The identifier of the client certificate that API Gateway uses to call your integration endpoints in the stage."
              },
              "DataTraceEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether data trace logging is enabled for methods in the stage. API Gateway pushes these logs to Amazon CloudWatch Logs."
              },
              "Description": {
                "type": "String",
                "required": false,
                "description": "A description of the purpose of the stage."
              },
              "LoggingLevel": {
                "type": "String",
                "required": false,
                "description": "The logging level for this method."
              },
              "MethodSettings": {
                "type": "Object",
                "required": false,
                "description": "Configures settings for all of the stage's methods.",
                "properties": {
                  "CacheDataEncrypted": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether the cached responses are encrypted."
                  },
                  "CacheTtlInSeconds": {
                    "type": "Number",
                    "required": false,
                    "description": "The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses."
                  },
                  "CachingEnabled": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether responses are cached and returned for requests."
                  },
                  "DataTraceEnabled": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether data trace logging is enabled for methods in the stage."
                  },
                  "HttpMethod": {
                    "type": "String",
                    "required": false,
                    "description": "The HTTP method."
                  },
                  "LoggingLevel": {
                    "type": "String",
                    "required": false,
                    "description": "The logging level for this method."
                  },
                  "MetricsEnabled": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether Amazon CloudWatch metrics are enabled for methods in the stage."
                  },
                  "ResourcePath": {
                    "type": "String",
                    "required": false,
                    "description": "The resource path for this method. Forward slashes (/) are encoded as ~1 and the initial slash must include a forward slash. For example, the path value /resource/subresource must be encoded as /~1resource~1subresource. To specify the root path, use only a slash (/)."
                  },
                  "ThrottlingBurstLimit": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of burst requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account."
                  },
                  "ThrottlingRateLimit": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of steady-state requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account."
                  }
                }
              },
              "MetricsEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether Amazon CloudWatch metrics are enabled for methods in the stage."
              },
              "StageName": {
                "type": "String",
                "required": false,
                "description": "The name of the stage, which API Gateway uses as the first path segment in the invoke Uniform Resource Identifier (URI)."
              },
              "ThrottlingBurstLimit": {
                "type": "Number",
                "required": false,
                "description": "The number of burst requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account."
              },
              "ThrottlingRateLimit": {
                "type": "Number",
                "required": false,
                "description": "The number of steady-state requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account."
              },
              "Variables": {
                "type": "Json",
                "required": false,
                "description": "A map that defines the stage variables."
              },
              "DocumentationVersion": {
                "type": "String",
                "required": false,
                "description": "The version identifier of the API documentation snapshot."
              },
              "AccessLogSetting": {
                "type": "Object",
                "required": false,
                "description": "Specifies settings for logging access in this stage.",
                "properties": {
                  "DestinationArn": {
                    "type": "String",
                    "required": false,
                    "description": "The Amazon Resource Name (ARN) of the CloudWatch Logs log group to receive access logs",
                    "resource-ref-type": "AWS::Logs::LogGroup"
                  },
                  "Format": {
                    "type": "String",
                    "required": false,
                    "description": "A single line format of the access logs of data, as specified by selected $context variables."
                  }
                }
              },
              "CanarySetting": {
                "type": "Object",
                "required": false,
                "description": "Specifies settings for the canary deployment in this stage.",
                "properties": {
                  "PercentTraffic": {
                    "type": "Number",
                    "required": false,
                    "description": "The percent (0-100) of traffic diverted to a canary deployment."
                  },
                  "StageVariableOverrides": {
                    "type": "Json",
                    "required": false,
                    "description": "Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary."
                  },
                  "UseStageCache": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Whether the canary deployment uses the stage cache or not."
                  }
                }
              },
              "Tags": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "An array of arbitrary tags (key-value pairs) to associate with the stage.",
                "properties": {
                  "Value": {
                    "type": "String",
                    "required": false,
                    "description": "The value for the tag."
                  },
                  "Key": {
                    "type": "String",
                    "required": false,
                    "description": "The key name of the tag. "
                  }
                }
              },
              "TracingEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Specifies whether active tracing with X-ray is enabled for this stage."
              }
            }
          },
          "StageName": {
            "type": "String",
            "resource-ref-type": "AWS::ApiGateway::Stage",
            "description": "A name for the stage that API Gateway creates with this deployment. Use only alphanumeric characters."
          },
          "DeploymentCanarySettings": {
            "type": "Object",
            "required": false,
            "description": "Specifies settings for the canary deployment.",
            "properties": {
              "PercentTraffic": {
                "type": "Number",
                "required": false,
                "description": "The percent (0-100) of traffic diverted to a canary deployment."
              },
              "StageVariableOverrides": {
                "type": "Json",
                "required": false,
                "description": "Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary."
              },
              "UseStageCache": {
                "type": "Boolean",
                "required": false,
                "description": "Whether the canary deployment uses the stage cache or not."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::DocumentationPart": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::DocumentationPart resource creates a documentation part for an Amazon API Gateway API entity.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::DocumentationPart resource creates a documentation part for an Amazon API Gateway API entity."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Location": {
            "type": "Object",
            "required": true,
            "description": "The location of the API entity that the documentation applies to.",
            "properties": {
              "Method": {
                "type": "String",
                "required": false,
                "description": "The HTTP verb of a method."
              },
              "Name": {
                "type": "String",
                "required": false,
                "description": "The name of the targeted API entity."
              },
              "Path": {
                "type": "String",
                "required": false,
                "description": "The URL path of the target."
              },
              "StatusCode": {
                "type": "String",
                "required": false,
                "description": "The HTTP status code of a response."
              },
              "Type": {
                "type": "String",
                "required": false,
                "description": "The type of API entity that the documentation content applies to.",
                "allowed-values": [
                  "*",
                  "API",
                  "AUTHORIZER",
                  "METHOD",
                  "MODEL",
                  "PATH_PARAMETER",
                  "QUERY_PARAMETER",
                  "REQUEST_BODY",
                  "REQUEST_HEADER",
                  "RESOURCE",
                  "RESPONSE",
                  "RESPONSE_BODY",
                  "RESPONSE_HEADER"
                ]
              }
            }
          },
          "Properties": {
            "type": "String",
            "required": true,
            "description": "The documentation content map of the targeted API entity."
          },
          "RestApiId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ApiGateway::RestApi",
            "description": "The identifier of the targeted API entity."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::DocumentationVersion": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::DocumentationVersion resource creates a snapshot of the documentation for an Amazon API Gateway API entity.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::DocumentationVersion resource creates a snapshot of the documentation for an Amazon API Gateway API entity."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "The description of the API documentation snapshot."
          },
          "DocumentationVersion": {
            "type": "String",
            "required": true,
            "description": "The version identifier of the API documentation snapshot."
          },
          "RestApiId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ApiGateway::RestApi",
            "description": "The identifier of the targeted API entity."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::DomainName": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::DomainName resource specifies a custom domain name for your API in Amazon API Gateway (API Gateway). ",
    "return-values": [
      {
        "name": "DistributionDomainName",
        "description": "The Amazon CloudFront distribution domain name that's mapped to the custom domain name."
      },
      {
        "name": "DistributionHostedZoneId",
        "description": "The region-agnostic Amazon Route 53 Hosted Zone ID of the edge-optimized endpoint."
      },
      {
        "name": "RegionalDomainName",
        "description": "The domain name associated with the regional endpoint for this custom domain name."
      },
      {
        "name": "RegionalHostedZoneId",
        "description": "The region-specific Amazon Route 53 Hosted Zone ID of the regional endpoint."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::DomainName resource specifies a custom domain name for your API in Amazon API Gateway (API Gateway). "
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CertificateArn": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::CertificateManager::Certificate",
            "description": "The reference to an AWS-managed certificate for use by the edge-optimized endpoint for this domain name."
          },
          "DomainName": {
            "type": "String",
            "required": true,
            "description": "The custom domain name for your API in Amazon API Gateway."
          },
          "EndpointConfiguration": {
            "type": "Object",
            "required": false,
            "description": "A list of the endpoint types of the domain name.",
            "properties": {
              "Types": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "A list of endpoint types of an API or its custom domain name.",
                "allowed-values": [
                  "*",
                  "EDGE",
                  "REGIONAL"
                ]
              }
            }
          },
          "RegionalCertificateArn": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::CertificateManager::Certificate",
            "description": "The reference to an AWS-managed certificate for use by the regional endpoint for the domain name."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::GatewayResponse": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::GatewayResponse resource creates a custom response for your API Gateway API.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::GatewayResponse resource creates a custom response for your API Gateway API."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ResponseParameters": {
            "type": "Json",
            "required": false,
            "description": "The response parameters (paths, query strings, and headers) for the response."
          },
          "ResponseTemplates": {
            "type": "Json",
            "required": false,
            "description": "The response templates for the response."
          },
          "ResponseType": {
            "type": "String",
            "required": true,
            "description": "The response type.",
            "allowed-values": [
              "*",
              "ACCESS_DENIED",
              "API_CONFIGURATION_ERROR",
              "AUTHORIZER_FAILURE",
              "AUTHORIZER_CONFIGURATION_ERROR",
              "BAD_REQUEST_PARAMETERS",
              "BAD_REQUEST_BODY",
              "DEFAULT_4XX",
              "DEFAULT_5XX",
              "EXPIRED_TOKEN",
              "INVALID_SIGNATURE",
              "INTEGRATION_FAILURE",
              "INTEGRATION_TIMEOUT",
              "INVALID_API_KEY",
              "MISSING_AUTHENTICATION_TOKEN",
              "QUOTA_EXCEEDED",
              "REQUEST_TOO_LARGE",
              "RESOURCE_NOT_FOUND",
              "THROTTLED",
              "UNAUTHORIZED",
              "UNSUPPORTED_MEDIA_TYPES"
            ]
          },
          "RestApiId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ApiGateway::RestApi",
            "description": "The identifier of the targeted API entity."
          },
          "StatusCode": {
            "type": "String",
            "required": false,
            "description": "The HTTP status code for the response."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::Method": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::Method resource creates Amazon API Gateway (API Gateway) methods that define the parameters and body that clients must send in their requests.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::Method resource creates Amazon API Gateway (API Gateway) methods that define the parameters and body that clients must send in their requests."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ApiKeyRequired": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the method requires clients to submit a valid API key."
          },
          "AuthorizationType": {
            "type": "Boolean",
            "required": false,
            "description": "The method's authorization type."
          },
          "AuthorizerId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::ApiGateway::Authorizer",
            "description": "The identifier of the authorizer to use on this method. If you specify this property, specify CUSTOM for the AuthorizationType property."
          },
          "HttpMethod": {
            "type": "String",
            "required": true,
            "description": "The HTTP method that clients will use to call this method."
          },
          "Integration": {
            "type": "Object",
            "required": false,
            "description": "The back-end system that the method calls when it receives a request.",
            "properties": {
              "CacheKeyParameters": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "A list of request parameters whose values API Gateway will cache."
              },
              "CacheNamespace": {
                "type": "String",
                "required": false,
                "description": "An API-specific tag group of related cached parameters."
              },
              "Credentials": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::IAM::Role",
                "description": "The credentials required for the integration."
              },
              "IntegrationHttpMethod": {
                "type": "String",
                "required": false,
                "description": "The integration's HTTP method type."
              },
              "IntegrationResponses": {
                "type": "Object",
                "required": false,
                "description": "The response that API Gateway provides after a method's back end completes processing a request.",
                "properties": {
                  "ResponseParameters": {
                    "type": "Json",
                    "required": false,
                    "description": "The response parameters from the back-end response that API Gateway sends to the method response."
                  },
                  "ResponseTemplates": {
                    "type": "Json",
                    "required": false,
                    "description": "The templates used to transform the integration response body."
                  },
                  "SelectionPattern": {
                    "type": "String",
                    "required": false,
                    "description": "A regular expression that specifies which error strings or status codes from the back end map to the integration response."
                  },
                  "StatusCode": {
                    "type": "String",
                    "required": false,
                    "description": "The status code that API Gateway uses to map the integration response to a MethodResponse status code."
                  },
                  "ContentHandling": {
                    "type": "String",
                    "required": false,
                    "description": "Specifies how to handle request payload content type conversions",
                    "allowed-values": [
                      "*",
                      "CONVERT_TO_BINARY",
                      "CONVERT_TO_TEXT"
                    ]
                  }
                }
              },
              "PassthroughBehavior": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "*",
                  "WHEN_NO_MATCH",
                  "NEVER",
                  "WHEN_NO_TEMPLATES"
                ],
                "description": "Indicates when API Gateway passes requests to the targeted back end. This behavior depends on the request's Content-Type header and whether you defined a mapping template for it."
              },
              "RequestParameters": {
                "type": "Json",
                "required": false,
                "description": "The request parameters that API Gateway sends with the back-end request."
              },
              "RequestTemplates": {
                "type": "Json",
                "required": false,
                "description": "A map of Apache Velocity templates that are applied on the request payload."
              },
              "Type": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "*",
                  "AWS",
                  "MOCK",
                  "HTTP_PROXY",
                  "AWS_PROXY"
                ],
                "description": "The type of back end your method is running, such as HTTP, AWS, or MOCK."
              },
              "Uri": {
                "type": "String",
                "required": true,
                "description": "The integration's Uniform Resource Identifier (URI)."
              },
              "ContentHandling": {
                "type": "String",
                "required": false,
                "description": "Specifies how to handle request payload content type conversions",
                "allowed-values": [
                  "*",
                  "CONVERT_TO_BINARY",
                  "CONVERT_TO_TEXT"
                ]
              },
              "ConnectionId": {
                "type": "String",
                "required": false,
                "description": "The ID of the VpcLink used for the integration when connectionType=VPC_LINK and undefined, otherwise."
              },
              "ConnectionType": {
                "type": "String",
                "required": false,
                "description": "The type of the network connection to the integration endpoint.",
                "allowed-values": [
                  "*",
                  "INTERNET",
                  "VPC_LINK"
                ]
              },
              "TimeoutInMillis": {
                "type": "Number",
                "required": false,
                "description": "Custom timeout between 50 and 29,000 milliseconds."
              }
            }
          },
          "MethodResponses": {
            "type": "Object",
            "required": false,
            "description": "The responses that can be sent to the client who calls the method.",
            "properties": {
              "ResponseModels": {
                "type": "Json",
                "required": false,
                "description": "The resources used for the response's content type."
              },
              "ResponseParameters": {
                "type": "Json",
                "required": false,
                "description": "Response parameters that API Gateway sends to the client that called a method."
              },
              "StatusCode": {
                "type": "String",
                "required": true,
                "description": "The method response's status code, which you map to an IntegrationResponse."
              }
            }
          },
          "RequestModels": {
            "type": "Json",
            "required": false,
            "description": "The resources used for the response's content type. Specify response models as key-value pairs (string-to-string map), with a content type as the key and a Model resource name as the value."
          },
          "RequestParameters": {
            "type": "Json",
            "required": false,
            "description": "Request parameters that API Gateway accepts. "
          },
          "ResourceId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ApiGateway::Resource",
            "description": "The ID of an API Gateway resource."
          },
          "RestApiId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ApiGateway::RestApi",
            "description": "The ID of the RestApi resource in which API Gateway creates the method."
          },
          "OperationName": {
            "type": "String",
            "required": false,
            "description": "A friendly operation name for the method."
          },
          "RequestValidatorId": {
            "type": "String",
            "required": false,
            "description": "The ID of the associated request validator."
          },
          "AuthorizationScopes": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "A list of authorization scopes configured on the method."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::Model": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::Model resource defines the structure of a request or response payload for an Amazon API Gateway (API Gateway) method.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::Model resource defines the structure of a request or response payload for an Amazon API Gateway (API Gateway) method."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ContentType": {
            "type": "String",
            "required": false,
            "description": "The content type for the model."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description that identifies this model."
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "A name for the mode. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the model name."
          },
          "RestApiId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ApiGateway::RestApi",
            "description": "The ID of a REST API with which to associate this model."
          },
          "Schema": {
            "type": "Json",
            "required": false,
            "description": "The schema to use to transform data to one or more output formats."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::RequestValidator": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::RequestValidator resource sets up basic validation rules for incoming requests to your API Gateway API.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::RequestValidator resource sets up basic validation rules for incoming requests to your API Gateway API."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Name": {
            "type": "String",
            "required": false,
            "description": "The name of this request validator."
          },
          "RestApiId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ApiGateway::RestApi",
            "description": "The identifier of the targeted API entity."
          },
          "ValidateRequestBody": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether to validate the request body according to the configured schema for the targeted API and method."
          },
          "ValidateRequestParameters": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether to validate request parameters."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::Resource": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::Resource resource creates a resource in an Amazon API Gateway (API Gateway) API.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::Resource resource creates a resource in an Amazon API Gateway (API Gateway) API."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ParentId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ApiGateway::Resource",
            "description": "If you want to create a child resource, the ID of the parent resource."
          },
          "PathPart": {
            "type": "String",
            "required": true,
            "description": "A path name for the resource."
          },
          "RestApiId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ApiGateway::RestApi",
            "description": "The ID of the RestApi resource in which you want to create this resource."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::RestApi": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::RestApi resource contains a collection of Amazon API Gateway (API Gateway) resources and methods that can be invoked through HTTPS endpoints.",
    "return-values": [
      {
        "name": "RootResourceId",
        "description": "The root resource ID for a RestApi resource, such as a0bc123d4e."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::RestApi resource contains a collection of Amazon API Gateway (API Gateway) resources and methods that can be invoked through HTTPS endpoints."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Body": {
            "type": "Json",
            "required": false,
            "description": "A Swagger specification that defines a set of RESTful APIs in the JSON format."
          },
          "BodyS3Location": {
            "type": "Object",
            "required": false,
            "description": "The Amazon Simple Storage Service (Amazon S3) location that points to a Swagger file, which defines a set of RESTful APIs in JSON or YAML format.",
            "properties": {
              "Bucket": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::S3::Bucket",
                "description": "The name of the S3 bucket where the Swagger file is stored."
              },
              "ETag": {
                "type": "String",
                "required": false,
                "description": "The Amazon S3 ETag (a file checksum) of the Swagger file."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The file name of the Swagger file (Amazon S3 object name)."
              },
              "Version": {
                "type": "String",
                "required": false,
                "description": "For versioning-enabled buckets, a specific version of the Swagger file."
              }
            }
          },
          "CloneFrom": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::ApiGateway::RestApi",
            "description": "The ID of the API Gateway RestApi resource that you want to clone."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the purpose of this API Gateway RestApi resource."
          },
          "FailOnWarnings": {
            "type": "Boolean",
            "required": false,
            "description": "If a warning occurs while API Gateway is creating the RestApi resource, indicates whether to roll back the resource."
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "A name for the API Gateway RestApi resource."
          },
          "Parameters": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "Custom header parameters for the request."
          },
          "BinaryMediaTypes": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The list of binary media types that are supported by the RestApi resource, such as image/png or application/octet-stream."
          },
          "EndpointConfiguration": {
            "type": "Object",
            "required": false,
            "description": "A list of the endpoint types of the API.",
            "properties": {
              "Types": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "A list of endpoint types of an API or its custom domain name."
              }
            }
          },
          "Mode": {
            "type": "String",
            "required": false,
            "description": ""
          },
          "ApiKeySourceType": {
            "type": "String",
            "required": false,
            "description": "The source of the API key for metering requests according to a usage plan.",
            "allowed-values": [
              "*",
              "HEADER",
              "AUTHORIZER"
            ]
          },
          "MinimumCompressionSize": {
            "type": "Number",
            "required": false,
            "description": "A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API."
          },
          "Policy": {
            "type": "Json",
            "required": false,
            "description": "A policy document that contains the permissions for this RestApi resource, in JSON format."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::Stage": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::Stage resource creates a stage for an Amazon API Gateway (API Gateway) deployment.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::Stage resource creates a stage for an Amazon API Gateway (API Gateway) deployment."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CacheClusterEnabled": {
            "type": "String",
            "required": false,
            "description": "Indicates whether cache clustering is enabled for the stage."
          },
          "CacheClusterSize": {
            "type": "String",
            "required": false,
            "description": "The stage's cache cluster size."
          },
          "ClientCertificateId": {
            "type": "String",
            "required": false,
            "description": "The identifier of the client certificate that API Gateway uses to call your integration endpoints in the stage."
          },
          "DeploymentId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ApiGateway::Deployment",
            "description": "The ID of the deployment that the stage points to."
          },
          "Description": {
            "type": "String",
            "required": true,
            "description": "The ID of the deployment that the stage points to."
          },
          "MethodSettings": {
            "type": "Object",
            "required": false,
            "description": "Configures settings for all of the stage's methods.",
            "properties": {
              "CacheDataEncrypted": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether the cached responses are encrypted."
              },
              "CacheTtlInSeconds": {
                "type": "Number",
                "required": false,
                "description": "The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses."
              },
              "CachingEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether responses are cached and returned for requests."
              },
              "DataTraceEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether data trace logging is enabled for methods in the stage."
              },
              "HttpMethod": {
                "type": "String",
                "required": false,
                "description": "The HTTP method."
              },
              "LoggingLevel": {
                "type": "String",
                "required": false,
                "description": "The logging level for this method."
              },
              "MetricsEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether Amazon CloudWatch metrics are enabled for methods in the stage."
              },
              "ResourcePath": {
                "type": "String",
                "required": false,
                "description": "The resource path for this method. Forward slashes (/) are encoded as ~1 and the initial slash must include a forward slash. For example, the path value /resource/subresource must be encoded as /~1resource~1subresource. To specify the root path, use only a slash (/)."
              },
              "ThrottlingBurstLimit": {
                "type": "Number",
                "required": false,
                "description": "The number of burst requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account."
              },
              "ThrottlingRateLimit": {
                "type": "Number",
                "required": false,
                "description": "The number of steady-state requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account."
              }
            }
          },
          "RestApiId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ApiGateway::RestApi",
            "description": "The ID of the RestApi resource that you're deploying with this stage."
          },
          "StageName": {
            "type": "String",
            "required": true,
            "description": "The name of the stage, which API Gateway uses as the first path segment in the invoke Uniform Resource Identifier (URI)."
          },
          "Variables": {
            "type": "Json",
            "required": false,
            "description": "A map (string to string map) that defines the stage variables, where the variable name is the key and the variable value is the value."
          },
          "DocumentationVersion": {
            "type": "String",
            "required": false,
            "description": "The version identifier of the API documentation snapshot."
          },
          "AccessLogSetting": {
            "type": "Object",
            "required": false,
            "description": "Specifies settings for logging access in this stage.",
            "properties": {
              "DestinationArn": {
                "type": "String",
                "required": false,
                "description": "The Amazon Resource Name (ARN) of the CloudWatch Logs log group to receive access logs",
                "resource-ref-type": "AWS::Logs::LogGroup"
              },
              "Format": {
                "type": "String",
                "required": false,
                "description": "A single line format of the access logs of data, as specified by selected $context variables."
              }
            }
          },
          "CanarySetting": {
            "type": "Object",
            "required": false,
            "description": "Specifies settings for the canary deployment in this stage.",
            "properties": {
              "DeploymentId": {
                "type": "String",
                "required": false,
                "description": "The identifier of the deployment that the stage points to."
              },
              "PercentTraffic": {
                "type": "Number",
                "required": false,
                "description": "The percent (0-100) of traffic diverted to a canary deployment."
              },
              "StageVariableOverrides": {
                "type": "Json",
                "required": false,
                "description": "Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary."
              },
              "UseStageCache": {
                "type": "Boolean",
                "required": false,
                "description": "Whether the canary deployment uses the stage cache or not."
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "An array of arbitrary tags (key-value pairs) to associate with the stage.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          },
          "TracingEnabled": {
            "type": "Boolean",
            "required": false,
            "description": "Specifies whether active tracing with X-ray is enabled for this stage."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::UsagePlan": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::UsagePlan resource specifies a usage plan for deployed Amazon API Gateway (API Gateway) APIs.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::UsagePlan resource specifies a usage plan for deployed Amazon API Gateway (API Gateway) APIs."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ApiStages": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The APIs and API stages to associate with this usage plan.",
            "properties": {
              "ApiId": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::ApiGateway::RestApi",
                "description": "The ID of an API that is in the specified Stage property that you want to associate with the usage plan."
              },
              "Stage": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::ApiGateway::Stage",
                "description": "The name of an API Gateway stage to associate with the usage plan."
              },
              "Throttle": {
                "type": "Json",
                "required": false,
                "description": "Map containing method-level throttling information for API stage in a usage plan."
              }
            }
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "The purpose of this usage plan."
          },
          "Quota": {
            "type": "Object",
            "required": false,
            "description": "Configures the number of requests that users can make within a given interval.",
            "properties": {
              "Limit": {
                "type": "Number",
                "required": false,
                "description": "The maximum number of requests that users can make within the specified time period."
              },
              "Offset": {
                "type": "Number",
                "required": false,
                "description": "For the initial time period, the number of requests to subtract from the specified limit."
              },
              "Period": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "*",
                  "DAY",
                  "WEEK",
                  "MONTH"
                ],
                "description": "The time period for which the maximum limit of requests applies, such as DAY or WEEK."
              }
            }
          },
          "Throttle": {
            "type": "Object",
            "required": false,
            "description": "Configures the overall request rate (average requests per second) and burst capacity.",
            "properties": {
              "BurstLimit": {
                "type": "Number",
                "required": false,
                "description": "The maximum API request rate limit over a time ranging from one to a few seconds."
              },
              "RateLimit": {
                "type": "Number",
                "required": false,
                "description": "The API request steady-state rate limit (average requests per second over an extended period of time)."
              }
            }
          },
          "UsagePlanName": {
            "type": "String",
            "required": false,
            "description": "A name for this usage plan."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::UsagePlanKey": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::UsagePlanKey resource associates an Amazon API Gateway API key with an API Gateway usage plan. This association determines which users the usage plan is applied to.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::UsagePlanKey resource associates an Amazon API Gateway API key with an API Gateway usage plan. This association determines which users the usage plan is applied to."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "KeyId": {
            "type": "String",
            "required": true,
            "description": "The ID of the usage plan key.",
            "resource-ref-type": "AWS::ApiGateway::ApiKey"
          },
          "KeyType": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "API_KEY"
            ],
            "description": "The type of usage plan key. Currently, the valid key type is API_KEY."
          },
          "UsagePlanId": {
            "type": "String",
            "required": true,
            "description": "The value of the usage plan key.",
            "resource-ref-type": "AWS::ApiGateway::UsagePlan"
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::VpcLink": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::VpcLink resource specifies an API Gateway VPC link for a AWS::ApiGateway::RestApi to access resources in an Amazon Virtual Private Cloud (VPC).",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::VpcLink resource specifies an API Gateway VPC link for a AWS::ApiGateway::RestApi to access resources in an Amazon Virtual Private Cloud (VPC)."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "The description of the VPC link."
          },
          "TargetArns": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "resource-ref-type": "*",
            "description": "The ARNs of network load balancers of the VPC targeted by the VPC link. The network load balancers must be owned by the same AWS account of the API owner."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "The name used to label and identify the VPC link."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApplicationAutoScaling::ScalableTarget": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApplicationAutoScaling::ScalableTarget resource specifies a resource that Application Auto Scaling can scale up or down.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApplicationAutoScaling::ScalableTarget resource specifies a resource that Application Auto Scaling can scale up or down."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "MaxCapacity": {
            "type": "Number",
            "required": true,
            "description": "The maximum value that Application Auto Scaling can use to scale a target during a scaling activity."
          },
          "MinCapacity": {
            "type": "Number",
            "required": true,
            "description": "The minimum value that Application Auto Scaling can use to scale a target during a scaling activity."
          },
          "ResourceId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "*",
            "description": "The unique resource identifier to associate with this scalable target."
          },
          "RoleARN": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that allows Application Auto Scaling to modify your scalable target."
          },
          "ScalableDimension": {
            "type": "String",
            "required": true,
            "description": "The scalable dimension associated with the scalable target."
          },
          "ServiceNamespace": {
            "type": "String",
            "required": true,
            "description": "The AWS service namespace of the scalable target."
          },
          "ScheduledActions": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The scheduled actions for the scalable target. Duplicates aren't allowed.",
            "properties": {
              "EndTime": {
                "type": "Timestamp",
                "required": false,
                "description": "The date and time that the action is scheduled to end."
              },
              "ScalableTargetAction": {
                "type": "Object",
                "required": false,
                "description": "The new minimum and maximum capacity.",
                "properties": {
                  "MaxCapacity": {
                    "type": "Number",
                    "required": false,
                    "description": "The maximum capacity."
                  },
                  "MinCapacity": {
                    "type": "Number",
                    "required": false,
                    "description": "The minimum capacity."
                  }
                }
              },
              "Schedule": {
                "type": "String",
                "required": true,
                "description": "The schedule for this action."
              },
              "ScheduledActionName": {
                "type": "String",
                "required": true,
                "description": "The name of the scheduled action."
              },
              "StartTime": {
                "type": "Timestamp",
                "required": false,
                "description": "The date and time that the action is scheduled to begin."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApplicationAutoScaling::ScalingPolicy": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApplicationAutoScaling::ScalingPolicy resource defines an Application Auto Scaling scaling policy that Application Auto Scaling uses to adjust your application resources.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApplicationAutoScaling::ScalingPolicy resource defines an Application Auto Scaling scaling policy that Application Auto Scaling uses to adjust your application resources."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "PolicyName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::AutoScaling::ScalingPolicy",
            "description": "A name for the scaling policy."
          },
          "PolicyType": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "StepScaling"
            ],
            "description": "A name for the scaling policy."
          },
          "ResourceId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "*",
            "description": "The unique resource identifier for the scalable target that this scaling policy applies to."
          },
          "ScalableDimension": {
            "type": "String",
            "required": false,
            "description": "The scalable dimension of the scalable target that this scaling policy applies to."
          },
          "ServiceNamespace": {
            "type": "String",
            "required": false,
            "description": "The AWS service namespace of the scalable target that this scaling policy applies to."
          },
          "ScalingTargetId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "description": "The AWS CloudFormation-generated ID of an Application Auto Scaling scalable target."
          },
          "StepScalingPolicyConfiguration": {
            "type": "Object",
            "required": false,
            "description": "A step policy that configures when Application Auto Scaling scales resources up or down, and by how much.",
            "properties": {
              "AdjustmentType": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "*",
                  "ChangeInCapacity",
                  "PercentChangeInCapacity",
                  "ExactCapacity"
                ],
                "description": "Specifies whether the ScalingAdjustment value in the StepAdjustment property is an absolute number or a percentage of the current capacity."
              },
              "Cooldown": {
                "type": "Number",
                "required": false,
                "description": "The amount of time, in seconds, after a scaling activity completes before any further trigger-related scaling activities can start."
              },
              "MetricAggregationType": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "*",
                  "Minimum",
                  "Maximum",
                  "Average"
                ],
                "description": "The aggregation type for the CloudWatch metrics."
              },
              "MinAdjustmentMagnitude": {
                "type": "Number",
                "required": false,
                "description": "The minimum number of resources to adjust when a scaling activity is triggered."
              },
              "StepAdjustments": {
                "type": "Object",
                "required": false,
                "description": "A set of adjustments that enable you to scale based on the size of the alarm breach.",
                "properties": {
                  "MetricIntervalLowerBound": {
                    "type": "Number",
                    "required": false,
                    "description": "The lower bound of the breach size. The lower bound is the difference between the breach threshold and the aggregated CloudWatch metric value."
                  },
                  "MetricIntervalUpperBound": {
                    "type": "Number",
                    "required": false,
                    "description": "The upper bound of the breach size. The upper bound is the difference between the breach threshold and the CloudWatch metric value."
                  },
                  "ScalingAdjustment": {
                    "type": "Number",
                    "required": false,
                    "description": "The amount by which to scale."
                  }
                }
              }
            }
          },
          "TargetTrackingScalingPolicyConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Configures a target tracking scaling policy.",
            "properties": {
              "CustomizedMetricSpecification": {
                "type": "Object",
                "required": false,
                "description": "This property is reserved for future use.",
                "properties": {
                  "Dimensions": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "The dimensions of the metric. Duplicates not allowed.",
                    "properties": {
                      "Name": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the dimension."
                      },
                      "Value": {
                        "type": "String",
                        "required": true,
                        "description": "The value of the dimension."
                      }
                    }
                  },
                  "MetricName": {
                    "type": "String",
                    "required": true,
                    "description": "The name of the metric."
                  },
                  "Namespace": {
                    "type": "String",
                    "required": true,
                    "description": "The namespace of the metric."
                  },
                  "Statistic": {
                    "type": "String",
                    "required": true,
                    "description": "The statistic of the metric.",
                    "allowed-values": [
                      "*",
                      "Average",
                      "Minimum",
                      "Maximum",
                      "SampleCount",
                      "Sum"
                    ]
                  },
                  "Unit": {
                    "type": "String",
                    "required": false,
                    "description": "The unit of the metric."
                  }
                }
              },
              "PredefinedMetricSpecification": {
                "type": "Object",
                "required": false,
                "description": "A predefined metric.",
                "properties": {
                  "PredefinedMetricType": {
                    "type": "String",
                    "required": true,
                    "description": "The metric type.",
                    "allowed-values": [
                      "*",
                      "DynamoDBReadCapacityUtilization",
                      "DynamoDBWriteCapacityUtilization",
                      "ALBRequestCountPerTarget",
                      "RDSReaderAverageCPUUtilization",
                      "RDSReaderAverageDatabaseConnections",
                      "EC2SpotFleetRequestAverageCPUUtilization",
                      "EC2SpotFleetRequestAverageNetworkIn",
                      "EC2SpotFleetRequestAverageNetworkOut"
                    ]
                  },
                  "ResourceLabel": {
                    "type": "String",
                    "required": false,
                    "description": "Identifies the resource associated with the metric type."
                  }
                }
              },
              "ScaleInCooldown": {
                "type": "Number",
                "required": false,
                "description": "The amount of time, in seconds, after a scale in activity completes before another scale in activity can start."
              },
              "ScaleOutCooldown": {
                "type": "Number",
                "required": false,
                "description": "The amount of time, in seconds, after a scale out activity completes before another scale out activity can start."
              },
              "TargetValue": {
                "type": "Number",
                "required": true,
                "description": "The target value for the metric."
              },
              "DisableScaleIn": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether scale in by the target tracking policy is disabled."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AppStream::DirectoryConfig": {
    "type": "Object",
    "required": false,
    "description": "The AWS::AppStream::DirectoryConfig resource specifies the configuration information required to join Amazon AppStream 2.0 fleets and image builders to Microsoft Active Directory domains.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::AppStream::DirectoryConfig resource specifies the configuration information required to join Amazon AppStream 2.0 fleets and image builders to Microsoft Active Directory domains."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "OrganizationalUnitDistinguishedNames": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "description": "The distinguished names of the organizational units for computer accounts."
          },
          "ServiceAccountCredentials": {
            "type": "Object",
            "required": true,
            "description": "The credentials for the service account used by the streaming instance to connect to the directory.",
            "properties": {
              "AccountName": {
                "type": "String",
                "required": true,
                "description": "The user name of the account."
              },
              "AccountPassword": {
                "type": "String",
                "required": true,
                "description": "The password for the account."
              }
            }
          },
          "DirectoryName": {
            "type": "String",
            "required": true,
            "description": "The fully qualified name of the directory (for example, corp.example.com)."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AppStream::Fleet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::AppStream::Fleet resource creates a fleet for Amazon AppStream 2.0.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::AppStream::Fleet resource creates a fleet for Amazon AppStream 2.0."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "The description to display."
          },
          "ComputeCapacity": {
            "type": "Object",
            "required": true,
            "description": "The desired capacity for the fleet.",
            "properties": {
              "DesiredInstances": {
                "type": "Number",
                "required": true,
                "description": "The desired number of streaming instances."
              }
            }
          },
          "VpcConfig": {
            "type": "Object",
            "required": false,
            "description": "The VPC configuration for the fleet.",
            "properties": {
              "SubnetIds": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The identifiers of the subnets to which a network interface is attached from the fleet instance.",
                "resource-ref-type": "AWS::EC2::Subnet"
              },
              "SecurityGroupIds": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The identifiers of the security groups for the fleet.",
                "resource-ref-type": "AWS::EC2::SecurityGroup"
              }
            }
          },
          "FleetType": {
            "type": "String",
            "required": false,
            "description": "The fleet type."
          },
          "EnableDefaultInternetAccess": {
            "type": "Boolean",
            "required": false,
            "description": "Enables or disables default internet access for the fleet."
          },
          "DomainJoinInfo": {
            "type": "Object",
            "required": false,
            "description": "The information needed to join a Microsoft Active Directory domain.",
            "properties": {
              "OrganizationalUnitDistinguishedName": {
                "type": "String",
                "required": false,
                "description": "The distinguished name of the organizational unit for computer accounts."
              },
              "DirectoryName": {
                "type": "String",
                "required": false,
                "description": "The fully qualified name of the directory (for example, corp.example.com)."
              }
            }
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "A unique name for the fleet."
          },
          "ImageName": {
            "type": "String",
            "required": false,
            "description": "The name of the image used to create the fleet."
          },
          "MaxUserDurationInSeconds": {
            "type": "Number",
            "required": false,
            "description": "The maximum time that a streaming session can run, in seconds. Specify a value between 600 and 57600."
          },
          "DisconnectTimeoutInSeconds": {
            "type": "Number",
            "required": false,
            "description": "The time after disconnection when a session is considered to have ended, in seconds. "
          },
          "DisplayName": {
            "type": "String",
            "required": false,
            "description": "The fleet name to display."
          },
          "InstanceType": {
            "type": "String",
            "required": true,
            "description": "The instance type to use when launching fleet instances."
          },
          "ImageArn": {
            "type": "String",
            "required": false,
            "description": "The ARN of the public, private, or shared image to use."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AppStream::ImageBuilder": {
    "type": "Object",
    "required": false,
    "description": "The AWS::AppStream::ImageBuilder resource creates an image builder for Amazon AppStream 2.0",
    "return-values": [
      {
        "name": "StreamingUrl",
        "description": "The URL to start an image builder streaming session, returned as a string."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::AppStream::ImageBuilder resource creates an image builder for Amazon AppStream 2.0"
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ImageName": {
            "type": "String",
            "required": false,
            "description": "The name of the image used to create the image builder."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "The description to display."
          },
          "VpcConfig": {
            "type": "Object",
            "required": false,
            "description": "The VPC configuration for the image builder.",
            "properties": {
              "SecurityGroupIds": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The identifiers of the security groups for the image builder.",
                "resource-ref-type": "AWS::EC2::SecurityGroup"
              },
              "SubnetIds": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The identifier of the subnet to which a network interface is attached from the image builder instance.",
                "resource-ref-type": "AWS::EC2::Subnet"
              }
            }
          },
          "EnableDefaultInternetAccess": {
            "type": "Boolean",
            "required": false,
            "description": "Enables or disables default internet access for the image builder."
          },
          "DisplayName": {
            "type": "String",
            "required": false,
            "description": "The image builder name to display."
          },
          "DomainJoinInfo": {
            "type": "Object",
            "required": false,
            "description": "The name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain.",
            "properties": {
              "OrganizationalUnitDistinguishedName": {
                "type": "String",
                "required": false,
                "description": "The distinguished name of the organizational unit for computer accounts."
              },
              "DirectoryName": {
                "type": "String",
                "required": false,
                "description": "The fully qualified name of the directory (for example, corp.example.com)."
              }
            }
          },
          "AppstreamAgentVersion": {
            "type": "String",
            "required": false,
            "description": "The version of the Amazon AppStream 2.0 agent to use for this image builder."
          },
          "InstanceType": {
            "type": "String",
            "required": true,
            "description": "The instance type to use when launching the image builder."
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "A unique name for the image builder."
          },
          "ImageArn": {
            "type": "String",
            "required": false,
            "description": "The ARN of the public, private, or shared image to use."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AppStream::Stack": {
    "type": "Object",
    "required": false,
    "description": "The AWS::AppStream::Stack resource creates a stack to start streaming applications to Amazon AppStream 2.0 users.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::AppStream::Stack resource creates a stack to start streaming applications to Amazon AppStream 2.0 users."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ApplicationSettings": {
            "type": "Object",
            "required": false,
            "description": "The persistent application settings for users of a stack.",
            "properties": {
              "SettingsGroup": {
                "type": "String",
                "required": false,
                "description": "The path prefix for the Amazon S3 bucket where users� persistent application settings are stored."
              },
              "Enabled": {
                "type": "Boolean",
                "required": true,
                "description": "Specifies whether persistent application settings are enabled for users during their streaming sessions."
              }
            }
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "The description to display."
          },
          "StorageConnectors": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The storage connectors to enable.",
            "properties": {
              "Domains": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The names of the domains for the account."
              },
              "ResourceIdentifier": {
                "type": "String",
                "required": false,
                "description": "The ARN of the storage connector."
              },
              "ConnectorType": {
                "type": "String",
                "required": true,
                "description": "The type of storage connector."
              }
            }
          },
          "DeleteStorageConnectors": {
            "type": "Boolean",
            "required": false,
            "description": "Deletes the storage connectors currently enabled for the stack. (This parameter has been deprecated.)"
          },
          "UserSettings": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The actions that are enabled or disabled for users during their streaming sessions. By default, these actions are enabled.",
            "properties": {
              "Action": {
                "type": "String",
                "required": true,
                "description": "The action that is enabled or disabled."
              },
              "Permission": {
                "type": "String",
                "required": true,
                "description": "Indicates whether the action is enabled or disabled."
              }
            }
          },
          "AttributesToDelete": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The stack attributes to delete."
          },
          "DisplayName": {
            "type": "String",
            "required": false,
            "description": "The stack name to display."
          },
          "RedirectURL": {
            "type": "String",
            "required": false,
            "description": "The URL that users are redirected to after their streaming session ends."
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "The name of the stack."
          },
          "FeedbackURL": {
            "type": "String",
            "required": false,
            "description": "The URL that users are redirected to after they choose the Send Feedback link."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AppStream::StackFleetAssociation": {
    "type": "Object",
    "required": false,
    "description": "The AWS::AppStream::StackFleetAssociation resource associates the specified fleet with the specified stack for Amazon AppStream 2.0.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::AppStream::StackFleetAssociation resource associates the specified fleet with the specified stack for Amazon AppStream 2.0."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "FleetName": {
            "type": "String",
            "required": true,
            "description": "The name of the fleet.",
            "resource-ref-type": "AWS::AppStream::Fleet"
          },
          "StackName": {
            "type": "String",
            "required": true,
            "description": "The name of the stack.",
            "resource-ref-type": "AWS::AppStream::Stack"
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AppStream::StackUserAssociation": {
    "type": "Object",
    "required": false,
    "description": "The AWS::AppStream::StackUserAssociation resource associates the specified stacks with the specified users for Amazon AppStream 2.0.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::AppStream::StackUserAssociation resource associates the specified stacks with the specified users for Amazon AppStream 2.0."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "SendEmailNotification": {
            "type": "Boolean",
            "required": false,
            "description": "Specifies whether a welcome email is sent to a user after the user is created in the user pool."
          },
          "UserName": {
            "type": "String",
            "required": true,
            "description": "The email address of the user."
          },
          "StackName": {
            "type": "String",
            "required": true,
            "description": "The name of the stack.",
            "resource-ref-type": "AWS::AppStream::Stack"
          },
          "AuthenticationType": {
            "type": "String",
            "required": true,
            "description": "The authentication type for the user."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AppStream::User": {
    "type": "Object",
    "required": false,
    "description": "The AWS::AppStream::User resource creates a new user in the user pool for Amazon AppStream 2.0.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::AppStream::User resource creates a new user in the user pool for Amazon AppStream 2.0."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "UserName": {
            "type": "String",
            "required": true,
            "description": "The email address of the user."
          },
          "FirstName": {
            "type": "String",
            "required": false,
            "description": "The first name, or given name, of the user."
          },
          "MessageAction": {
            "type": "String",
            "required": false,
            "description": "The action to take for the welcome email that is sent to a user after the user is created in the user pool.",
            "allowed-values": [
              "*",
              "SUPPRESS",
              "RESEND"
            ]
          },
          "LastName": {
            "type": "String",
            "required": false,
            "description": "The last name, or surname, of the user."
          },
          "AuthenticationType": {
            "type": "String",
            "required": true,
            "description": "The authentication type for the user.",
            "allowed-values": [
              "*",
              "USERPOOL"
            ]
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AppSync::ApiKey": {
    "type": "Object",
    "required": false,
    "description": "The AWS::AppSync::ApiKey resource creates a unique key that you can distribute to clients who are executing GraphQL operations with AWS AppSync that require an API key.",
    "return-values": [
      {
        "name": "ApiKey",
        "description": "The API key."
      },
      {
        "name": "Arn",
        "description": "The Amazon Resource Name (ARN) of the API key, such as arn:aws:appsync:us-east-1:123456789012:apis/graphqlapiid/apikey/apikeya1bzhi."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::AppSync::ApiKey resource creates a unique key that you can distribute to clients who are executing GraphQL operations with AWS AppSync that require an API key."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "Unique description of your API Key."
          },
          "Expires": {
            "type": "Number",
            "required": false,
            "description": "Expiration time of the API Key in seconds (using Unix Epoch time), with a minimum of 1 day and a maximum of 365 days."
          },
          "ApiId": {
            "type": "String",
            "required": true,
            "description": "Unique AWS AppSync GraphQL API Identifier for this API Key."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AppSync::DataSource": {
    "type": "Object",
    "required": false,
    "description": "The AWS::AppSync::DataSource resource creates data sources for resolvers in AWS AppSync to connect to, such as Amazon DynamoDB, AWS Lambda, and Amazon Elasticserach Service. Resolvers use these data sources to fetch data when clients make GraphQL calls.",
    "return-values": [
      {
        "name": "DataSourceArn",
        "description": "The Amazon Resource Name (ARN) of the API key, such as arn:aws:appsync:us-east-1:123456789012:apis/graphqlapiid/datasources/datasourcename."
      },
      {
        "name": "Name",
        "description": "Friendly name for you to identify your AppSync data source after creation."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::AppSync::DataSource resource creates data sources for resolvers in AWS AppSync to connect to, such as Amazon DynamoDB, AWS Lambda, and Amazon Elasticserach Service. Resolvers use these data sources to fetch data when clients make GraphQL calls."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Type": {
            "type": "String",
            "required": true,
            "description": "Mandatory resource to return data from in customer AWS account."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "Friendly description for this data source."
          },
          "ServiceRoleArn": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "IAM role ARN which the data source will use to connect to a resource."
          },
          "LambdaConfig": {
            "type": "Object",
            "required": false,
            "description": "A valid ARN of a Lambda function in your account.",
            "properties": {
              "LambdaFunctionArn": {
                "type": "String",
                "required": true,
                "description": "The ARN for the Lambda function.",
                "resource-ref-type": "AWS::Lambda::Function"
              }
            }
          },
          "ApiId": {
            "type": "String",
            "required": true,
            "description": "Unique AWS AppSync GraphQL API Identifier where this data source will be created."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "Friendly name for you to identify your AppSync data source after creation."
          },
          "DynamoDBConfig": {
            "type": "Object",
            "required": false,
            "description": "AwsRegion and TableName for an Amazon DynamoDB table in your account.",
            "properties": {
              "TableName": {
                "type": "String",
                "required": true,
                "description": "The table name.",
                "resource-ref-type": "AWS::DynamoDB::Table"
              },
              "AwsRegion": {
                "type": "String",
                "required": true,
                "description": "The AWS region."
              },
              "UseCallerCredentials": {
                "type": "Boolean",
                "required": false,
                "description": "Set to TRUE to use Amazon Cognito credentials with this data source."
              }
            }
          },
          "ElasticsearchConfig": {
            "type": "Object",
            "required": false,
            "description": "AwsRegion and Endpoints for an Amazon Elasticsearch Service domain in your account.",
            "properties": {
              "AwsRegion": {
                "type": "String",
                "required": true,
                "description": "The AWS region."
              },
              "Endpoint": {
                "type": "String",
                "required": true,
                "description": "The endpoint."
              }
            }
          },
          "HttpConfig": {
            "type": "Object",
            "required": false,
            "description": "Endpoints for an HTTP DataSource.",
            "properties": {
              "Endpoint": {
                "type": "String",
                "required": true,
                "description": "The endpoint."
              },
              "AuthorizationConfig": {
                "type": "Object",
                "required": false,
                "description": "The authorization configuration.",
                "properties": {
                  "AwsIamConfig": {
                    "type": "Object",
                    "required": false,
                    "description": "The configuration for the Authorization.",
                    "properties": {
                      "SigningRegion": {
                        "type": "String",
                        "required": false,
                        "description": "The region of signing."
                      },
                      "SigningServiceName": {
                        "type": "String",
                        "required": false,
                        "description": "The service name of signing."
                      }
                    }
                  },
                  "AuthorizationType": {
                    "type": "String",
                    "required": true,
                    "description": "The type for the Authorization."
                  }
                }
              }
            }
          },
          "RelationalDatabaseConfig": {
            "type": "Object",
            "required": false,
            "description": "Relational Database configuration of the relational database data source.",
            "properties": {
              "RdsHttpEndpointConfig": {
                "type": "Object",
                "required": false,
                "description": "The information about the rds resource.",
                "properties": {
                  "AwsRegion": {
                    "type": "String",
                    "required": true,
                    "description": "The aws region of the rdshttpendpoint."
                  },
                  "Schema": {
                    "type": "String",
                    "required": false,
                    "description": "The schema of the relational database."
                  },
                  "DatabaseName": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the relational database."
                  },
                  "DbClusterIdentifier": {
                    "type": "String",
                    "required": true,
                    "description": "The database cluster identifier of the rdshttpendpoint.",
                    "resource-ref-type": "*"
                  },
                  "AwsSecretStoreArn": {
                    "type": "String",
                    "required": true,
                    "description": "The secret store ARN of the rdshttpendpoint."
                  }
                }
              },
              "RelationalDatabaseSourceType": {
                "type": "String",
                "required": true,
                "description": "The type of the relational datasource."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AppSync::FunctionConfiguration": {
    "type": "Object",
    "required": false,
    "description": "The AWS::AppSync::FunctionConfiguration resource defines the functions in GraphQL Apis to perform certain operations. Functions can be attached by PipelineResolver.",
    "return-values": [
      {
        "name": "FunctionId",
        "description": "The unique Id of this function."
      },
      {
        "name": "FunctionArn",
        "description": "ARN of the Function"
      },
      {
        "name": "DataSourceName",
        "description": "The name of data source this function will attach."
      },
      {
        "name": "Name",
        "description": "The name of this function."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::AppSync::FunctionConfiguration resource defines the functions in GraphQL Apis to perform certain operations. Functions can be attached by PipelineResolver."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ResponseMappingTemplateS3Location": {
            "type": "String",
            "required": false,
            "description": "A location of a response mapping template on an S3 bucket if you wish to provision with the template file living in S3 rather than embedded in your CloudFormation template."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "The Description of the function."
          },
          "DataSourceName": {
            "type": "String",
            "required": false,
            "description": "The AWS AppSync data source that this function will run against in order to return data to the caller."
          },
          "RequestMappingTemplate": {
            "type": "String",
            "required": false,
            "description": "The function�s request mapping template, written in text within the CloudFormation template."
          },
          "ResponseMappingTemplate": {
            "type": "String",
            "required": false,
            "description": "The function�s response mapping template, written in text within the CloudFormation template."
          },
          "FunctionVersion": {
            "type": "String",
            "required": false,
            "description": "The version of the function."
          },
          "RequestMappingTemplateS3Location": {
            "type": "String",
            "required": false,
            "description": "A location of a request mapping template on an S3 bucket if you wish to provision with the template file living in S3 rather than embedded in your CloudFormation template."
          },
          "ApiId": {
            "type": "String",
            "required": true,
            "description": "The AWS AppSync GraphQL API which you will attach with this function."
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "The Name of the function."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AppSync::GraphQLApi": {
    "type": "Object",
    "required": false,
    "description": "The AWS::AppSync::GraphQLApi resource will create a new AWS AppSync GraphQL API.",
    "return-values": [
      {
        "name": "GraphQLUrl",
        "description": "The Endpoint URL of your GraphQL API."
      },
      {
        "name": "Arn",
        "description": "The Amazon Resource Name (ARN) of the API key, such as arn:aws:appsync:us-east-1:123456789012:apis/graphqlapiid."
      },
      {
        "name": "ApiId",
        "description": "Unique AWS AppSync GraphQL API Identifier."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::AppSync::GraphQLApi resource will create a new AWS AppSync GraphQL API."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "OpenIDConnectConfig": {
            "type": "Object",
            "required": false,
            "description": "Optional authorization configuration for using an OpenId Connect compliant service with your GraphQL endpoint.",
            "properties": {
              "Issuer": {
                "type": "String",
                "required": false,
                "description": "The issuer for the open id connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token."
              },
              "ClientId": {
                "type": "String",
                "required": false,
                "description": "The client identifier of the Relying party at the OpenID Provider."
              },
              "AuthTTL": {
                "type": "Number",
                "required": false,
                "description": "The number of milliseconds a token is valid after being authenticated."
              },
              "IatTTL": {
                "type": "Number",
                "required": false,
                "description": "The number of milliseconds a token is valid after being issued to a user."
              }
            }
          },
          "UserPoolConfig": {
            "type": "Object",
            "required": false,
            "description": "Optional authorization configuration for using Amazon Cognito User Pools with your GraphQL endpoint.",
            "properties": {
              "AppIdClientRegex": {
                "type": "String",
                "required": false,
                "description": "A regular expression for validating the incoming Amazon Cognito User Pool app client ID."
              },
              "UserPoolId": {
                "type": "String",
                "required": false,
                "description": "The user pool ID.",
                "resource-ref-type": "AWS::Cognito::UserPool"
              },
              "AwsRegion": {
                "type": "String",
                "required": false,
                "description": "The AWS region in which the user pool was created."
              },
              "DefaultAction": {
                "type": "String",
                "required": false,
                "description": "The action that you want your GraphQL API to take when a request that uses Amazon Cognito User Pool authentication doesn't match the Amazon Cognito User Pool configuration."
              }
            }
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "Friendly name for your GraphQL API in AWS AppSync."
          },
          "AuthenticationType": {
            "type": "String",
            "required": true,
            "description": "Security configuration for your GraphQL API.",
            "allowed-values": [
              "*",
              "API_KEY",
              "AWS_IAM",
              "OPENID_CONNECT",
              "AMAZON_COGNITO_USER_POOLS"
            ]
          },
          "LogConfig": {
            "type": "Object",
            "required": false,
            "description": "Logging configuration when writing GraphQL operations and tracing to Amazon Cloudwatch.",
            "properties": {
              "CloudWatchLogsRoleArn": {
                "type": "String",
                "required": false,
                "description": "The IAM role that will allow publishing CloudWatch logs into the customer's account.",
                "resource-ref-type": "AWS::IAM::Role"
              },
              "FieldLogLevel": {
                "type": "String",
                "required": false,
                "description": "The desired level of logging."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AppSync::GraphQLSchema": {
    "type": "Object",
    "required": false,
    "description": "The AWS::AppSync::GraphQLSchema resource is used for your AWS AppSync GraphQL schema which controls the data model for your API. ",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::AppSync::GraphQLSchema resource is used for your AWS AppSync GraphQL schema which controls the data model for your API. "
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Definition": {
            "type": "String",
            "required": false,
            "description": "The text representation of a GraphQL schema in SDL format."
          },
          "DefinitionS3Location": {
            "type": "String",
            "required": false,
            "description": "A location of a GraphQL schema file on an S3 bucket if you wish to provision with the schema living in S3 rather than embedded in your CloudFormation template."
          },
          "ApiId": {
            "type": "String",
            "required": true,
            "description": "The AWS AppSync GraphQL API identifier to which you will apply this schema."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AppSync::Resolver": {
    "type": "Object",
    "required": false,
    "description": "The AWS::AppSync::Resolver resource defines the logical GraphQL resolver that you will attach to fields in a schema.",
    "return-values": [
      {
        "name": "TypeName",
        "description": "The GraphQL type that will invoke this resolver."
      },
      {
        "name": "ResolverArn",
        "description": "ARN of the Resolver, such as arn:aws:appsync:us-east-1:123456789012:apis/graphqlapiid/types/typename/resolvers/resolvername."
      },
      {
        "name": "FieldName",
        "description": "The GraphQL field on a type that will invoke the resolver."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::AppSync::Resolver resource defines the logical GraphQL resolver that you will attach to fields in a schema."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ResponseMappingTemplateS3Location": {
            "type": "String",
            "required": false,
            "description": "A location of a response mapping template on an S3 bucket if you wish to provision with the template file living in S3 rather than embedded in your CloudFormation template."
          },
          "TypeName": {
            "type": "String",
            "required": true,
            "description": "The GraphQL type that will invoke this resolver."
          },
          "DataSourceName": {
            "type": "String",
            "required": true,
            "description": "The AWS AppSync data source that this resolver will run against in order to return data to the caller."
          },
          "RequestMappingTemplate": {
            "type": "String",
            "required": false,
            "description": "The resolver�s request mapping template, written in text within the CloudFormation template."
          },
          "ResponseMappingTemplate": {
            "type": "String",
            "required": false,
            "description": "The resolver�s response mapping template, written in text within the CloudFormation template."
          },
          "RequestMappingTemplateS3Location": {
            "type": "String",
            "required": false,
            "description": "A location of a request mapping template on an S3 bucket if you wish to provision with the template file living in S3 rather than embedded in your CloudFormation template."
          },
          "ApiId": {
            "type": "String",
            "required": true,
            "description": "The AWS AppSync GraphQL API which you will attach this resolver."
          },
          "FieldName": {
            "type": "String",
            "required": true,
            "description": "The GraphQL field on a type that will invoke the resolver."
          },
          "PipelineConfig": {
            "type": "Object",
            "required": false,
            "description": "Functions linked with the pipeline resolver.",
            "properties": {
              "Functions": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The FunctionsIds of the functions attached with the resolver."
              }
            }
          },
          "Kind": {
            "type": "String",
            "required": false,
            "description": "The kind of the resolver.",
            "allowed-values": [
              "*",
              "UNIT",
              "PIPELINE"
            ]
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Athena::NamedQuery": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Athena::NamedQuery resource creates an Amazon Athena query.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Athena::NamedQuery resource creates an Amazon Athena query."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A brief description of the query."
          },
          "QueryString": {
            "type": "String",
            "required": true,
            "description": "The SQL query statements that comprise the query."
          },
          "Database": {
            "type": "String",
            "required": true,
            "description": "The database to which the query belongs."
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "The plain-language name of the query."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AutoScaling::AutoScalingGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::AutoScaling::AutoScalingGroup type creates an Auto Scaling group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::AutoScaling::AutoScalingGroup type creates an Auto Scaling group."
      },
      "CreationPolicy": {
        "type": "Object",
        "required": false,
        "description": "The CreationPolicy prevents the resource's status from reaching create complete until AWS CloudFormation receives a specified number of success signals or the timeout period is exceeded.",
        "properties": {
          "ResourceSignal": {
            "type": "Object",
            "required": true,
            "description": "Signal configuration.",
            "properties": {
              "Count": {
                "type": "Number",
                "required": false,
                "description": "The number of success signals AWS CloudFormation must receive before it sets the resource status as CREATE_COMPLETE."
              },
              "Timeout": {
                "type": "String",
                "required": false,
                "description": "The length of time that AWS CloudFormation waits for the number of signals that was specified in the Count property. The value must be in ISO8601 duration format, in the form: PT#H#M#S, where each # is the number of hours, minutes, and seconds, respectively. Default: PT5M (5 minutes)"
              }
            }
          }
        }
      },
      "UpdatePolicy": {
        "type": "Json",
        "required": false,
        "description": "You can use the UpdatePolicy attribute to specify how AWS CloudFormation handles updates to the AWS::AutoScaling::AutoScalingGroup resource."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AvailabilityZones": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "Contains a list of availability zones for the group."
          },
          "Cooldown": {
            "type": "String",
            "required": false,
            "description": "The number of seconds after a scaling activity is completed before any further scaling activities can start."
          },
          "DesiredCapacity": {
            "type": "String",
            "required": false,
            "description": "Specifies the desired capacity for the Auto Scaling group."
          },
          "HealthCheckGracePeriod": {
            "type": "Number",
            "required": false,
            "description": "The length of time in seconds after a new EC2 instance comes into service that Auto Scaling starts checking its health."
          },
          "HealthCheckType": {
            "type": "String",
            "required": false,
            "description": "The service you want the health status from, Amazon EC2 or Elastic Load Balancer.",
            "allowed-values": [
              "*",
              "EC2",
              "ELB"
            ]
          },
          "InstanceId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::Instance",
            "description": "The ID of the Amazon EC2 instance you want to use to create the Auto Scaling group."
          },
          "LaunchConfigurationName": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::AutoScaling::LaunchConfiguration",
            "description": "Specifies the name of the associated AWS::AutoScaling::LaunchConfiguration resource."
          },
          "LifecycleHookSpecificationList": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The lifecycle hooks for the group, which specify actions to perform when Auto Scaling launches or terminates instances.",
            "properties": {
              "DefaultResult": {
                "type": "String",
                "required": false,
                "description": "The action that the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs."
              },
              "HeartbeatTimeout": {
                "type": "Number",
                "required": false,
                "description": "The maximum time, in seconds, that can elapse before the lifecycle hook times out."
              },
              "LifecycleHookName": {
                "type": "String",
                "required": true,
                "description": "The name of the lifecycle hook."
              },
              "LifecycleTransition": {
                "type": "String",
                "required": true,
                "description": "The state of the EC2 instance to attach the lifecycle hook to."
              },
              "NotificationMetadata": {
                "type": "String",
                "required": false,
                "description": "Additional information to include when Auto Scaling sends a message to the notification target."
              },
              "NotificationTargetARN": {
                "type": "String",
                "required": false,
                "resource-ref-type": [
                  "AWS::SNS::Topic",
                  "AWS::SQS::Queue"
                ],
                "description": "The Amazon Resource Name (ARN) of the target that Auto Scaling sends notifications to when an instance is in the transition state for the lifecycle hook."
              },
              "RoleARN": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::IAM::Role",
                "description": "The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target."
              }
            }
          },
          "LoadBalancerNames": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "description": "A list of Classic load balancers associated with this Auto Scaling group."
          },
          "MaxSize": {
            "type": "String",
            "required": true,
            "description": "The maximum size of the Auto Scaling group."
          },
          "MetricsCollection": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Enables the monitoring of group metrics of an Auto Scaling group.",
            "properties": {
              "Granularity": {
                "type": "String",
                "required": true,
                "description": "The frequency at which Auto Scaling sends aggregated data to CloudWatch."
              },
              "Metrics": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The list of metrics to collect. If you don't specify any metrics, all metrics are enabled."
              }
            }
          },
          "MinSize": {
            "type": "String",
            "required": true,
            "description": "The minimum size of the Auto Scaling group."
          },
          "NotificationConfigurations": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "An embedded property that configures an Auto Scaling group to send notifications when specified events take place.",
            "properties": {
              "NotificationTypes": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "A list of event types that trigger a notification.",
                "allowed-values": [
                  "*",
                  "autoscaling:EC2_INSTANCE_LAUNCH",
                  "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                  "autoscaling:EC2_INSTANCE_TERMINATE",
                  "autoscaling:EC2_INSTANCE_TERMINATE_ERROR",
                  "autoscaling:TEST_NOTIFICATION"
                ]
              },
              "TopicARN": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::SNS::Topic",
                "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic."
              }
            }
          },
          "PlacementGroup": {
            "type": "String",
            "required": false,
            "description": "The name of an existing cluster placement group into which you want to launch your instances."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The Auto Scaling tags to attach to this resource.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "PropagateAtLaunch": {
                "type": "Boolean",
                "required": true,
                "description": "Set to true if you want AWS CloudFormation to copy the tag to EC2 instances that are launched as part of the auto scaling group."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          },
          "TargetGroupARNs": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "description": "A list of Amazon Resource Names (ARN) of target groups to associate with the Auto Scaling group."
          },
          "TerminationPolicies": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "A policy or a list of policies that are used to select the instances to terminate. The policies are executed in the order that you list them."
          },
          "VPCZoneIdentifier": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::Subnet",
            "description": "A list of subnet identifiers of Amazon Virtual Private Cloud (Amazon VPCs)."
          },
          "AutoScalingGroupName": {
            "type": "String",
            "required": false,
            "description": "The name of the Auto Scaling group.",
            "resource-ref-type": "AWS::AutoScaling::AutoScalingGroup"
          },
          "ServiceLinkedRoleARN": {
            "type": "String",
            "required": false,
            "description": "The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. ",
            "resource-ref-type": "AWS::IAM::Role"
          },
          "LaunchTemplate": {
            "type": "Object",
            "required": false,
            "description": "The launch template to use to launch instances.",
            "properties": {
              "LaunchTemplateId": {
                "type": "String",
                "required": false,
                "description": "The ID of the launch template. You must specify either a template ID or a template name.",
                "resource-ref-type": "AWS::EC2::LaunchTemplate"
              },
              "LaunchTemplateName": {
                "type": "String",
                "required": false,
                "description": "The name of the launch template. You must specify either a template name or a template ID.",
                "resource-ref-type": "AWS::EC2::LaunchTemplate"
              },
              "Version": {
                "type": "String",
                "required": true,
                "description": "The version number."
              }
            }
          },
          "MixedInstancesPolicy": {
            "type": "Object",
            "required": false,
            "description": "The mixed instances policy to use to launch instances.",
            "properties": {
              "InstancesDistribution": {
                "type": "Object",
                "required": false,
                "description": "The instances distribution to use. If you leave this parameter unspecified when creating the group, the default values are used.",
                "properties": {
                  "OnDemandAllocationStrategy": {
                    "type": "String",
                    "required": false,
                    "description": "Indicates how to allocate instance types to fulfill On-Demand capacity."
                  },
                  "OnDemandBaseCapacity": {
                    "type": "Number",
                    "required": false,
                    "description": "The minimum amount of the Auto Scaling group's capacity that must be fulfilled by On-Demand Instances. This base portion is provisioned first as your group scales."
                  },
                  "OnDemandPercentageAboveBaseCapacity": {
                    "type": "Number",
                    "required": false,
                    "description": "Controls the percentages of On-Demand Instances and Spot Instances for your additional capacity beyond OnDemandBaseCapacity."
                  },
                  "SpotAllocationStrategy": {
                    "type": "String",
                    "required": false,
                    "description": "Indicates how to allocate Spot capacity across Spot pools."
                  },
                  "SpotInstancePools": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of Spot pools to use to allocate your Spot capacity."
                  },
                  "SpotMaxPrice": {
                    "type": "String",
                    "required": false,
                    "description": "The maximum price per unit hour that you are willing to pay for a Spot Instance."
                  }
                }
              },
              "LaunchTemplate": {
                "type": "Object",
                "required": true,
                "description": "The LaunchTemplate property type describes a launch template and overrides.",
                "properties": {
                  "LaunchTemplateSpecification": {
                    "type": "Object",
                    "required": true,
                    "description": "The launch template to use. You must specify either the launch template ID or launch template name in the request.",
                    "properties": {
                      "LaunchTemplateId": {
                        "type": "String",
                        "required": false,
                        "description": "The ID of the launch template. You must specify either a template ID or a template name.",
                        "resource-ref-type": "AWS::EC2::LaunchTemplate"
                      },
                      "LaunchTemplateName": {
                        "type": "String",
                        "required": false,
                        "description": "The name of the launch template. You must specify either a template name or a template ID.",
                        "resource-ref-type": "AWS::EC2::LaunchTemplate"
                      },
                      "Version": {
                        "type": "String",
                        "required": true,
                        "description": "The version number."
                      }
                    }
                  },
                  "Overrides": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "Any parameters that you specify override the same parameters in the launch template.",
                    "properties": {
                      "InstanceType": {
                        "type": "String",
                        "required": false,
                        "description": "The instance type."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AutoScaling::LaunchConfiguration": {
    "type": "Object",
    "required": false,
    "description": "The AWS::AutoScaling::LaunchConfiguration type creates an Auto Scaling launch configuration that can be used by an Auto Scaling group to configure EC2 instances in the Auto Scaling group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::AutoScaling::LaunchConfiguration type creates an Auto Scaling launch configuration that can be used by an Auto Scaling group to configure EC2 instances in the Auto Scaling group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AssociatePublicIpAddress": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether Amazon EC2 instances in the Auto Scaling group receive public IP addresses. If you specify true, each instance in the Auto Scaling receives a unique public IP address."
          },
          "BlockDeviceMappings": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Specifies how block devices are exposed to the instance. You can specify virtual devices and EBS volumes.",
            "properties": {
              "DeviceName": {
                "type": "String",
                "required": true,
                "description": "The name of the device within Amazon EC2."
              },
              "Ebs": {
                "type": "Object",
                "required": false,
                "description": "The information for the Elastic Block Store volume. If you specify the Ebs property, do not specify the VirtualName property.",
                "properties": {
                  "DeleteOnTermination": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether to delete the volume when the instance is terminated. By default, Auto Scaling uses true."
                  },
                  "Encrypted": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether the volume is encrypted. Encrypted EBS volumes must be attached to instances that support Amazon EBS encryption."
                  },
                  "Iops": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of I/O operations per second (IOPS) that the volume supports. The maximum ratio of IOPS to volume size is 30."
                  },
                  "SnapshotId": {
                    "type": "String",
                    "required": false,
                    "description": "The Snapshot ID of the volume to use.  If you specify SnapshotId, do not specify VolumeSize."
                  },
                  "VolumeSize": {
                    "type": "String",
                    "required": false,
                    "description": "The volume size, in GigiBytes.  If you specify VolumeSize, do not specify SnapshotId."
                  },
                  "VolumeType": {
                    "type": "String",
                    "required": false,
                    "description": "The volume type. By default, Auto Scaling uses the standard volume type."
                  }
                }
              },
              "NoDevice": {
                "type": "Boolean",
                "required": false,
                "description": "Suppresses the device mapping. If NoDevice is set to true for the root device, the instance might fail the Amazon EC2 health check. Auto Scaling launches a replacement instance if the instance fails the health check."
              },
              "VirtualName": {
                "type": "String",
                "required": false,
                "description": "The name of the virtual device. The name must be in the form ephemeralX where X is a number starting from 0, for example, ephemeral0. If you specify the VirtualName property, do not specify the Ebs property."
              }
            }
          },
          "EbsOptimized": {
            "type": "Boolean",
            "required": false,
            "description": "Specifies whether the launch configuration is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. Additional fees are incurred when using EBS-optimized instances."
          },
          "ClassicLinkVPCId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::VPC",
            "required": false,
            "description": "The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. You can specify this property only for EC2-Classic instances."
          },
          "ClassicLinkVPCSecurityGroups": {
            "array-type": "String",
            "type": "Array",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "The IDs of one or more security groups for the VPC that you specified in the ClassicLinkVPCId property."
          },
          "IamInstanceProfile": {
            "type": "String",
            "resource-ref-type": "AWS::IAM::InstanceProfile",
            "required": false,
            "description": "Provides the name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role."
          },
          "ImageId": {
            "type": "String",
            "required": false,
            "description": "Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration."
          },
          "InstanceId": {
            "type": "String",
            "required": false,
            "description": "The ID of the Amazon EC2 instance you want to use to create the launch configuration. Use this property if you want the launch configuration to use settings from an existing Amazon EC2 instance."
          },
          "InstanceMonitoring": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether or not instance monitoring should be enabled for this autoscaling group. This is enabled by default. To turn it off, set InstanceMonitoring to \"false\"."
          },
          "InstanceType": {
            "type": "String",
            "required": false,
            "description": "The instance type. For example, \"m1.small\".",
            "allowed-values": [
              "*",
              "t1.micro",
              "t2.nano",
              "t2.micro",
              "t2.small",
              "t2.medium",
              "t2.large",
              "m1.small",
              "m1.medium",
              "m1.large",
              "m1.xlarge",
              "m2.xlarge",
              "m2.2xlarge",
              "m2.4xlarge",
              "m3.medium",
              "m3.large",
              "m3.xlarge",
              "m3.2xlarge",
              "m4.large",
              "m4.xlarge",
              "m4.2xlarge",
              "m4.4xlarge",
              "m4.10xlarge",
              "m4.16xlarge",
              "c1.medium",
              "c1.xlarge",
              "cr1.8xlarge",
              "c3.large",
              "c3.xlarge",
              "c3.2xlarge",
              "c3.4xlarge",
              "c3.8xlarge",
              "c4.large",
              "c4.xlarge",
              "c4.2xlarge",
              "c4.4xlarge",
              "c4.8xlarge",
              "cc1.4xlarge",
              "cc2.8xlarge",
              "cg1.4xlarge",
              "d2.xlarge",
              "d2.2xlarge",
              "d2.4xlarge",
              "d2.8xlarge",
              "g2.2xlarge",
              "g2.8xlarge",
              "hi1.4xlarge",
              "hs1.8xlarge",
              "i2.xlarge",
              "i2.2xlarge",
              "i2.4xlarge",
              "i2.8xlarge",
              "p2.xlarge",
              "p2.8xlarge",
              "p2.16xlarge",
              "r3.large",
              "r3.xlarge",
              "r3.2xlarge",
              "r3.4xlarge",
              "r3.8xlarge",
              "x1.32xlarge"
            ]
          },
          "KernelId": {
            "type": "String",
            "required": false,
            "description": "The kernel ID"
          },
          "KeyName": {
            "type": "String",
            "required": false,
            "description": "Provides the name of the EC2 key pair."
          },
          "PlacementTenancy": {
            "type": "String",
            "required": false,
            "description": "The tenancy of the instance. An instance with a tenancy of dedicated runs on single-tenant hardware and can only be launched in a VPC."
          },
          "RamdiskId": {
            "type": "String",
            "required": false,
            "description": "The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, refer to the AWS Resource Center and search for the kernel ID."
          },
          "SecurityGroups": {
            "array-type": "String",
            "type": "Array",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "A list containing the EC2 security groups to assign to the Amazon EC2 instances in the Auto Scaling group. The list can contain the name of existing EC2 security groups, references to AWS::EC2::SecurityGroup resources created in the template, or both."
          },
          "SpotPrice": {
            "type": "String",
            "required": false,
            "description": "The spot price for this autoscaling group. If a spot price is set, then the autoscaling group will launch when the current spot price is less than the amount specified in the template."
          },
          "UserData": {
            "type": "String",
            "required": false,
            "description": "The user data available to the launched EC2 instances."
          },
          "LaunchConfigurationName": {
            "type": "String",
            "required": false,
            "description": "The name of the launch configuration."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AutoScaling::LifecycleHook": {
    "type": "Object",
    "required": false,
    "description": "Use AWS::AutoScaling::LifecycleHook to control the state of an instance in an Auto Scaling group after it is launched or terminated.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use AWS::AutoScaling::LifecycleHook to control the state of an instance in an Auto Scaling group after it is launched or terminated."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AutoScalingGroupName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::AutoScaling::AutoScalingGroup",
            "description": "The name of the Auto Scaling group for the lifecycle hook."
          },
          "DefaultResult": {
            "type": "String",
            "required": false,
            "description": "The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs."
          },
          "HeartbeatTimeout": {
            "type": "Number",
            "required": false,
            "description": "The amount of time that can elapse before the lifecycle hook times out. When the lifecycle hook times out, Auto Scaling performs the action that you specified in the DefaultResult property."
          },
          "LifecycleHookName": {
            "type": "String",
            "required": false,
            "description": "The name of the lifecycle hook. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the lifecycle hook name."
          },
          "LifecycleTransition": {
            "type": "String",
            "required": true,
            "description": "The state of the Amazon EC2 instance to which you want to attach the lifecycle hook."
          },
          "NotificationMetadata": {
            "type": "String",
            "required": false,
            "description": "Additional information that you want to include when Auto Scaling sends a message to the notification target."
          },
          "NotificationTargetARN": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::SNS::Topic",
            "description": "The Amazon resource name (ARN) of the notification target that Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook."
          },
          "RoleARN": {
            "type": "String",
            "required": true,
            "description": "The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target. The role requires permissions to Amazon SNS and Amazon SQS."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AutoScalingPlans::ScalingPlan": {
    "type": "Object",
    "required": false,
    "description": "Creates a scaling plan for AWS Auto Scaling.",
    "return-values": [
      {
        "name": "ScalingPlanName",
        "description": "the scaling plan name."
      },
      {
        "name": "ScalingPlanVersion",
        "description": "The scaling plan version."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a scaling plan for AWS Auto Scaling."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ApplicationSource": {
            "type": "Object",
            "required": true,
            "description": "A CloudFormation stack or a set of tags. You can create one scaling plan per application source.",
            "properties": {
              "CloudFormationStackARN": {
                "type": "String",
                "required": false,
                "description": "The Amazon Resource Name (ARN) of a CloudFormation stack.",
                "resource-ref-type": "AWS::CloudFormation::Stack"
              },
              "TagFilters": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "A set of tags",
                "properties": {
                  "Values": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "description": "The tag values"
                  },
                  "Key": {
                    "type": "String",
                    "required": true,
                    "description": "The tag key."
                  }
                }
              }
            }
          },
          "ScalingInstructions": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "The scaling instructions.",
            "properties": {
              "ResourceId": {
                "type": "String",
                "required": true,
                "description": "The ID of the resource."
              },
              "ServiceNamespace": {
                "type": "String",
                "required": true,
                "description": "The namespace of the AWS service."
              },
              "ScalableDimension": {
                "type": "String",
                "required": true,
                "description": "The scalable dimension associated with the resource."
              },
              "MinCapacity": {
                "type": "Number",
                "required": true,
                "description": "The minimum value to scale to in response to a scale out event."
              },
              "TargetTrackingConfigurations": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "The target tracking scaling policies",
                "properties": {
                  "ScaleOutCooldown": {
                    "type": "Number",
                    "required": false,
                    "description": "The amount of time, in seconds, after a scale out activity completes before another scale out activity can start. This value is not used if the scalable resource is an Auto Scaling group."
                  },
                  "TargetValue": {
                    "type": "Number",
                    "required": true,
                    "description": "The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2)."
                  },
                  "PredefinedScalingMetricSpecification": {
                    "type": "Object",
                    "required": false,
                    "description": "A predefined metric.",
                    "properties": {
                      "ResourceLabel": {
                        "type": "String",
                        "required": false,
                        "description": "Identifies the resource associated with the metric type."
                      },
                      "PredefinedScalingMetricType": {
                        "type": "String",
                        "required": true,
                        "description": "The metric type."
                      }
                    }
                  },
                  "DisableScaleIn": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether scale in by the target tracking policy is disabled."
                  },
                  "ScaleInCooldown": {
                    "type": "Number",
                    "required": false,
                    "description": "The amount of time, in seconds, after a scale in activity completes before another scale in activity can start. This value is not used if the scalable resource is an Auto Scaling group."
                  },
                  "EstimatedInstanceWarmup": {
                    "type": "Number",
                    "required": false,
                    "description": "The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. This value is used only if the resource is an Auto Scaling group."
                  },
                  "CustomizedScalingMetricSpecification": {
                    "type": "Object",
                    "required": false,
                    "description": "A customized metric.",
                    "properties": {
                      "MetricName": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the metric."
                      },
                      "Statistic": {
                        "type": "String",
                        "required": true,
                        "description": "The statistic of the metric.",
                        "allowed-values": [
                          "*",
                          "Average",
                          "Minimum",
                          "Maximum",
                          "SampleCount",
                          "Sum"
                        ]
                      },
                      "Dimensions": {
                        "type": "Array",
                        "array-type": "Object",
                        "required": false,
                        "description": "The dimensions of the metric.",
                        "properties": {
                          "Value": {
                            "type": "String",
                            "required": true,
                            "description": "The value of the dimension."
                          },
                          "Name": {
                            "type": "String",
                            "required": true,
                            "description": "The name of the dimension."
                          }
                        }
                      },
                      "Unit": {
                        "type": "String",
                        "required": false,
                        "description": "The unit of the metric."
                      },
                      "Namespace": {
                        "type": "String",
                        "required": true,
                        "description": "The namespace of the metric."
                      }
                    }
                  }
                }
              },
              "MaxCapacity": {
                "type": "Number",
                "required": true,
                "description": "The maximum value to scale to in response to a scale in event."
              },
              "DisableDynamicScaling": {
                "type": "Boolean",
                "required": false,
                "description": "Controls whether dynamic scaling by AWS Auto Scaling is disabled."
              },
              "PredictiveScalingMaxCapacityBehavior": {
                "type": "String",
                "required": false,
                "description": "Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity specified for the resource."
              },
              "ScalingPolicyUpdateBehavior": {
                "type": "String",
                "required": false,
                "description": "Controls whether a resource's externally created scaling policies are kept or replaced."
              },
              "PredictiveScalingMaxCapacityBuffer": {
                "type": "Number",
                "required": false,
                "description": "The size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity."
              },
              "CustomizedLoadMetricSpecification": {
                "type": "Object",
                "required": false,
                "description": "The customized load metric to use for predictive scaling.",
                "properties": {
                  "MetricName": {
                    "type": "String",
                    "required": true,
                    "description": "The name of the metric."
                  },
                  "Statistic": {
                    "type": "String",
                    "required": true,
                    "description": "The statistic of the metric."
                  },
                  "Dimensions": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "The dimensions of the metric.",
                    "properties": {
                      "Value": {
                        "type": "String",
                        "required": true,
                        "description": "The value of the dimension."
                      },
                      "Name": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the dimension."
                      }
                    }
                  },
                  "Unit": {
                    "type": "String",
                    "required": false,
                    "description": "The unit of the metric."
                  },
                  "Namespace": {
                    "type": "String",
                    "required": true,
                    "description": "The namespace of the metric."
                  }
                }
              },
              "PredefinedLoadMetricSpecification": {
                "type": "Object",
                "required": false,
                "description": "The predefined load metric to use for predictive scaling.",
                "properties": {
                  "PredefinedLoadMetricType": {
                    "type": "String",
                    "required": true,
                    "description": "The metric type."
                  },
                  "ResourceLabel": {
                    "type": "String",
                    "required": false,
                    "description": "Identifies the resource associated with the metric type."
                  }
                }
              },
              "ScheduledActionBufferTime": {
                "type": "Number",
                "required": false,
                "description": "The amount of time, in seconds, to buffer the run time of scheduled scaling actions when scaling out."
              },
              "PredictiveScalingMode": {
                "type": "String",
                "required": false,
                "description": "The predictive scaling mode.",
                "allowed-values": [
                  "*",
                  "ForecastAndScale",
                  "ForecastOnly"
                ]
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AutoScaling::ScalingPolicy": {
    "type": "Object",
    "required": false,
    "description": "The AWS::AutoScaling::ScalingPolicy resource adds a scaling policy to an auto scaling group. A scaling policy specifies whether to scale the auto scaling group up or down, and by how much.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::AutoScaling::ScalingPolicy resource adds a scaling policy to an auto scaling group. A scaling policy specifies whether to scale the auto scaling group up or down, and by how much."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AdjustmentType": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "ChangeInCapacity",
              "ExactCapacity",
              "PercentChangeInCapacity"
            ],
            "description": "Specifies whether the ScalingAdjustment is an absolute number or a percentage of the current capacity."
          },
          "AutoScalingGroupName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::AutoScaling::AutoScalingGroup",
            "description": "The name or Amazon Resource Name (ARN) of the Auto Scaling Group that you want to attach the policy to."
          },
          "Cooldown": {
            "type": "String",
            "required": false,
            "description": "The amount of time, in seconds, after a scaling activity completes before any further trigger-related scaling activities can start."
          },
          "EstimatedInstanceWarmup": {
            "type": "Number",
            "required": false,
            "description": "The estimated time, in seconds, until a newly launched instance can send metrics to CloudWatch."
          },
          "MetricAggregationType": {
            "type": "String",
            "required": false,
            "description": "The aggregation type for the CloudWatch metrics.",
            "allowed-values": [
              "Minimum",
              "Maximum",
              "Average"
            ]
          },
          "MinAdjustmentMagnitude": {
            "type": "Number",
            "required": false,
            "description": "For the PercentChangeInCapacity adjustment type, the minimum number of instances to scale."
          },
          "MinAdjustmentStep": {
            "type": "Number",
            "required": false,
            "description": "The minimum number of instances that are added or removed when the Auto Scaling group scales up or down. You can use this property only when you specify PercentChangeInCapacity for the AdjustmentType property."
          },
          "PolicyType": {
            "type": "String",
            "required": false,
            "description": "An Auto Scaling policy type. You can specify SimpleScaling or StepScaling. By default, AWS CloudFormation specifies SimpleScaling.",
            "allowed-values": [
              "SimpleScaling",
              "StepScaling"
            ]
          },
          "ScalingAdjustment": {
            "type": "Number",
            "required": false,
            "description": "The number of instances by which to scale. AdjustmentType determines the interpretation of this number (e.g., as an absolute number or as a percentage of the existing Auto Scaling group size). A positive increment adds to the current capacity and a negative value removes from the current capacity."
          },
          "StepAdjustments": {
            "type": "Object",
            "required": false,
            "description": "A set of adjustments that enable you to scale based on the size of the alarm breach.",
            "properties": {
              "MetricIntervalLowerBound": {
                "type": "Number",
                "required": false,
                "description": "The lower bound for the difference between the breach threshold and the CloudWatch metric."
              },
              "MetricIntervalUpperBound": {
                "type": "Number",
                "required": false,
                "description": "The upper bound for the difference between the breach threshold and the CloudWatch metric."
              },
              "ScalingAdjustment": {
                "type": "Number",
                "required": true,
                "description": "The amount by which to scale, based on the value that you specified in the AdjustmentType property. "
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AutoScaling::ScalingPolicy": {
    "type": "Object",
    "required": false,
    "description": "The AWS::AutoScaling::ScalingPolicy resource adds a scaling policy to an auto scaling group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::AutoScaling::ScalingPolicy resource adds a scaling policy to an auto scaling group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AdjustmentType": {
            "type": "String",
            "required": false,
            "description": "Specifies whether the ScalingAdjustment is an absolute number or a percentage of the current capacity.",
            "allowed-values": [
              "*",
              "ChangeInCapacity",
              "ExactCapacity",
              "PercentChangeInCapacity"
            ]
          },
          "AutoScalingGroupName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::AutoScaling::AutoScalingGroup",
            "description": "The name or Amazon Resource Name (ARN) of the Auto Scaling Group that you want to attach the policy to."
          },
          "Cooldown": {
            "type": "String",
            "required": false,
            "description": "The amount of time, in seconds, after a scaling activity completes before any further trigger-related scaling activities can start."
          },
          "EstimatedInstanceWarmup": {
            "type": "Number",
            "required": false,
            "description": "The estimated time, in seconds, until a newly launched instance can send metrics to CloudWatch."
          },
          "MetricAggregationType": {
            "type": "String",
            "required": false,
            "description": "The aggregation type for the CloudWatch metrics.",
            "allowed-values": [
              "*",
              "Minimum",
              "Maximum",
              "Average"
            ]
          },
          "MinAdjustmentMagnitude": {
            "type": "Number",
            "required": false,
            "description": "For the PercentChangeInCapacity adjustment type, the minimum number of instances to scale."
          },
          "PolicyType": {
            "type": "String",
            "required": false,
            "description": "An Auto Scaling policy type.",
            "allowed-values": [
              "*",
              "SimpleScaling",
              "StepScaling",
              "TargetTrackingScaling"
            ]
          },
          "ScalingAdjustment": {
            "type": "Number",
            "required": false,
            "description": "The number of instances by which to scale."
          },
          "StepAdjustments": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A set of adjustments that enable you to scale based on the size of the alarm breach.",
            "properties": {
              "MetricIntervalLowerBound": {
                "type": "Number",
                "required": false,
                "description": "The lower bound of the breach size."
              },
              "MetricIntervalUpperBound": {
                "type": "Number",
                "required": false,
                "description": "The upper bound of the breach size."
              },
              "ScalingAdjustment": {
                "type": "Number",
                "required": true,
                "description": "The amount by which to scale."
              }
            }
          },
          "TargetTrackingConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Configures a target tracking scaling policy.",
            "properties": {
              "CustomizedMetricSpecification": {
                "type": "Object",
                "required": false,
                "description": "A customized metric.",
                "properties": {
                  "Dimensions": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "The dimensions of the metric. Duplicates not allowed.",
                    "properties": {
                      "Name": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the dimension."
                      },
                      "Value": {
                        "type": "String",
                        "required": true,
                        "description": "The value of the dimension."
                      }
                    }
                  },
                  "MetricName": {
                    "type": "String",
                    "required": true,
                    "description": "The name of the metric."
                  },
                  "Namespace": {
                    "type": "String",
                    "required": true,
                    "description": "The namespace of the metric."
                  },
                  "Statistic": {
                    "type": "String",
                    "required": true,
                    "description": "The statistic of the metric.",
                    "allowed-values": [
                      "*",
                      "Average",
                      "Minimum",
                      "Maximum",
                      "SampleCount",
                      "Sum"
                    ]
                  },
                  "Unit": {
                    "type": "String",
                    "required": false,
                    "description": "The unit of the metric."
                  }
                }
              },
              "DisableScaleIn": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether to disable scale-in for the target tracking policy."
              },
              "PredefinedMetricSpecification": {
                "type": "Object",
                "required": false,
                "description": "A predefined metric.",
                "properties": {
                  "PredefinedMetricType": {
                    "type": "String",
                    "required": true,
                    "description": "PredefinedMetricType",
                    "allowed-values": [
                      "*",
                      "ASGAverageCPUUtilization",
                      "ASGAverageNetworkIn",
                      "ASGAverageNetworkOut",
                      "ALBRequestCountPerTarget"
                    ]
                  },
                  "ResourceLabel": {
                    "type": "String",
                    "required": false,
                    "description": "Identifies the resource associated with the metric type."
                  }
                }
              },
              "TargetValue": {
                "type": "Number",
                "required": true,
                "description": "The target value for the metric."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AutoScaling::ScheduledAction": {
    "type": "Object",
    "required": false,
    "description": "The AWS::AutoScaling::AutoScalingGroup type creates an Auto Scaling group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::AutoScaling::AutoScalingGroup type creates an Auto Scaling group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AutoScalingGroupName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::AutoScaling::AutoScalingGroup",
            "description": "The name or ARN of the Auto Scaling group."
          },
          "DesiredCapacity": {
            "type": "String",
            "required": false,
            "description": "The number of Amazon EC2 instances that should be running in the Auto Scaling group."
          },
          "EndTime": {
            "type": "String",
            "required": false,
            "description": "The time in UTC for this schedule to end. For example, 2010-06-01T00:00:00Z."
          },
          "MaxSize": {
            "type": "Number",
            "required": false,
            "description": "The maximum number of Amazon EC2 instances in the Auto Scaling group."
          },
          "MinSize": {
            "type": "Number",
            "required": false,
            "description": "The minimum number of Amazon EC2 instances in the Auto Scaling group."
          },
          "Recurrence": {
            "type": "String",
            "required": false,
            "description": "The time when recurring future actions will start. You specify the start time by following the Unix cron syntax format."
          },
          "StartTime": {
            "type": "String",
            "required": false,
            "description": "The time in UTC for this schedule to start. For example, 2010-06-01T00:00:00Z."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AutoScaling::ScheduledAction": {
    "type": "Object",
    "required": false,
    "description": "Creates a scheduled scaling action for an Auto Scaling group, changing the number of servers available for your application in response to predictable load changes.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a scheduled scaling action for an Auto Scaling group, changing the number of servers available for your application in response to predictable load changes."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AutoScalingGroupName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::AutoScaling::AutoScalingGroup",
            "description": "The name or ARN of the Auto Scaling group."
          },
          "DesiredCapacity": {
            "type": "Number",
            "required": false,
            "description": "The number of Amazon EC2 instances that should be running in the Auto Scaling group. "
          },
          "EndTime": {
            "type": "String",
            "required": false,
            "description": "The time in UTC for this schedule to end. For example, 2010-06-01T00:00:00Z."
          },
          "MaxSize": {
            "type": "Number",
            "required": false,
            "description": "The maximum number of Amazon EC2 instances in the Auto Scaling group. At least one of MaxSize, MinSize, or DesiredCapacity must be specified."
          },
          "MinSize": {
            "type": "Number",
            "required": false,
            "description": "The minimum number of Amazon EC2 instances in the Auto Scaling group. At least one of MaxSize, MinSize, or DesiredCapacity must be specified."
          },
          "Recurrence": {
            "type": "String",
            "required": false,
            "description": "The time in UTC when recurring future actions will start."
          },
          "StartTime": {
            "type": "String",
            "required": false,
            "description": "The time in UTC for this schedule to start. For example, 2010-06-01T00:00:00Z."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AutoScaling::Trigger": {
    "type": "Object",
    "required": false,
    "description": "Creates an Auto Scaling trigger that determines when scaling activities should occur for the Auto Scaling group. This type does not support updates.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an Auto Scaling trigger that determines when scaling activities should occur for the Auto Scaling group. This type does not support updates."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AutoScalingGroupName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::AutoScaling::AutoScalingGroup",
            "description": "The name of the Auto Scaling group."
          },
          "BreachDuration": {
            "type": "String",
            "required": true,
            "description": "The amount of time to wait while the trigger is firing before performing scaling activities in response to the breach."
          },
          "Dimensions": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "A list of CloudWatch dimensions used to retrieve metric statistics that the trigger uses to determine when to fire.",
            "properties": {
              "Name": {
                "type": "String",
                "required": true,
                "description": "Name of the dimension."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value representing the dimension measurement."
              }
            }
          },
          "LowerBreachScaleIncrement": {
            "type": "String",
            "required": false,
            "description": "The incremental amount to use when performing scaling activities when the lower threshold has been breached."
          },
          "LowerThreshold": {
            "type": "String",
            "required": true,
            "description": "The lower limit for the metric. The trigger fires if all data points in the last BreachDuration seconds exceed the upper threshold or fall below the lower threshold."
          },
          "MetricName": {
            "type": "String",
            "required": true,
            "description": "The metric name used by the trigger to determine when to fire."
          },
          "Namespace": {
            "type": "String",
            "required": false,
            "description": "The namespace used by the trigger to determine when to fire."
          },
          "Period": {
            "type": "String",
            "required": false,
            "description": "The period used in retrieving metric statistics used by the trigger to determine when to fire."
          },
          "Statistic": {
            "type": "String",
            "required": false,
            "description": "The statistic used by the trigger to determine which metric statistics to examine."
          },
          "Unit": {
            "type": "String",
            "required": false,
            "description": "The standard unit associated with a measure, used by the trigger when fetching the metric statistics it uses to determine when to activate."
          },
          "UpperBreachScaleIncrement": {
            "type": "String",
            "required": false,
            "description": "The incremental amount to use when performing scaling activities when the upper threshold has been breached. Must be a negative or positive integer, or integer percentage value."
          },
          "UpperThreshold": {
            "type": "String",
            "required": false,
            "description": "The upper limit of the metric used. The trigger fires if all data points in the last BreachDuration seconds exceed the upper threshold or fall below the lower threshold."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Batch::ComputeEnvironment": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Batch::ComputeEnvironment resource to define your AWS Batch compute environment.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Batch::ComputeEnvironment resource to define your AWS Batch compute environment."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Type": {
            "type": "String",
            "required": true,
            "description": "The type of the compute environment.",
            "allowed-values": [
              "*",
              "MANAGED",
              "UNMANAGED"
            ]
          },
          "ServiceRole": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The service role associated with the compute environment that allows AWS Batch to make calls to AWS API operations on your behalf."
          },
          "ComputeEnvironmentName": {
            "type": "String",
            "required": false,
            "description": "The name of the compute environment."
          },
          "ComputeResources": {
            "type": "Object",
            "required": true,
            "description": "The compute resources defined for the compute environment.",
            "properties": {
              "SpotIamFleetRole": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::IAM::Role",
                "description": "The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment."
              },
              "MaxvCpus": {
                "type": "Number",
                "required": true,
                "description": "The maximum number of EC2 vCPUs that an environment can reach."
              },
              "BidPercentage": {
                "type": "Number",
                "required": false,
                "description": "The minimum percentage that a Spot Instance price must be when compared with the On-Demand price for that instance type before instances are launched."
              },
              "SecurityGroupIds": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "description": "The EC2 security group that is associated with instances launched in the compute environment."
              },
              "Subnets": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "resource-ref-type": "AWS::EC2::Subnet",
                "description": "The VPC subnets into which the compute resources are launched."
              },
              "Type": {
                "type": "String",
                "required": true,
                "description": "The type of compute environment",
                "allowed-values": [
                  "*",
                  "EC2",
                  "SPOT"
                ]
              },
              "MinvCpus": {
                "type": "Number",
                "required": true,
                "description": "The minimum number of EC2 vCPUs that an environment should maintain."
              },
              "ImageId": {
                "type": "String",
                "required": false,
                "description": "The Amazon Machine Image (AMI) ID used for instances launched in the compute environment."
              },
              "InstanceRole": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::IAM::Role",
                "description": "The Amazon ECS instance profile applied to Amazon EC2 instances in a compute environment."
              },
              "InstanceTypes": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "description": "The instances types that may launched."
              },
              "Ec2KeyPair": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::IAM::Role",
                "description": "The EC2 key pair that is used for instances launched in the compute environment."
              },
              "Tags": {
                "type": "Json",
                "required": false,
                "description": "Key-value pair tags to be applied to instances that are launched in the compute environment."
              },
              "DesiredvCpus": {
                "type": "Number",
                "required": false,
                "description": "The desired number of EC2 vCPUS in the compute environment."
              },
              "LaunchTemplate": {
                "type": "Object",
                "required": false,
                "description": "The launch template to use for your compute resources.",
                "properties": {
                  "LaunchTemplateName": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the launch template."
                  },
                  "Version": {
                    "type": "String",
                    "required": false,
                    "description": "The version number of the launch template."
                  },
                  "LaunchTemplateId": {
                    "type": "String",
                    "required": false,
                    "description": "The ID of the launch template.",
                    "resource-ref-type": "AWS::EC2::LaunchTemplate"
                  }
                }
              },
              "PlacementGroup": {
                "type": "String",
                "required": false,
                "description": "The Amazon EC2 placement group to associate with your compute resources."
              }
            }
          },
          "State": {
            "type": "String",
            "required": false,
            "description": "The state of the compute environment.",
            "allowed-values": [
              "*",
              "ENABLED",
              "DISABLED"
            ]
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Batch::JobDefinition": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Batch::JobDefinition resource specifies the parameters for an AWS Batch job definition.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Batch::JobDefinition resource specifies the parameters for an AWS Batch job definition."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Type": {
            "type": "String",
            "required": true,
            "description": "The type of job definition.",
            "allowed-values": [
              "*",
              "container"
            ]
          },
          "Parameters": {
            "type": "Json",
            "required": false,
            "description": "Default parameters or parameter substitution placeholders that are set in the job definition. Parameters are specified as a key-value pair mapping."
          },
          "ContainerProperties": {
            "type": "Object",
            "required": true,
            "description": "An object with various properties specific to container-based jobs.",
            "properties": {
              "MountPoints": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "The mount points for data volumes in your container.",
                "properties": {
                  "ReadOnly": {
                    "type": "Boolean",
                    "required": false,
                    "description": "If this value is true, the container has read-only access to the volume; otherwise, the container can write to the volume. The default value is false."
                  },
                  "SourceVolume": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the volume to mount."
                  },
                  "ContainerPath": {
                    "type": "String",
                    "required": false,
                    "description": "The path on the container at which to mount the host volume."
                  }
                }
              },
              "User": {
                "type": "String",
                "required": false,
                "description": "The user name to use inside the container."
              },
              "Volumes": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "A list of data volumes used in a job.",
                "properties": {
                  "Host": {
                    "type": "Object",
                    "required": false,
                    "description": "The contents of the Host parameter determine whether your data volume persists on the host container instance and where it is stored.",
                    "properties": {
                      "SourcePath": {
                        "type": "String",
                        "required": false,
                        "description": "The path on the host container instance that is presented to the container. "
                      }
                    }
                  },
                  "Name": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the volume."
                  }
                }
              },
              "Command": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The command that is passed to the container."
              },
              "Memory": {
                "type": "Number",
                "required": true,
                "description": "The hard limit (in MiB) of memory to present to the container."
              },
              "Privileged": {
                "type": "Boolean",
                "required": false,
                "description": "When this parameter is true, the container is given elevated privileges on the host container instance (similar to the root user)."
              },
              "Environment": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "The environment variables to pass to a container. ",
                "properties": {
                  "Value": {
                    "type": "String",
                    "required": false,
                    "description": "The value of the environment variable."
                  },
                  "Name": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the environment variable."
                  }
                }
              },
              "JobRoleArn": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::IAM::Role",
                "description": "The Amazon Resource Name (ARN) of the IAM role that the container can assume for AWS permissions."
              },
              "ReadonlyRootFilesystem": {
                "type": "Boolean",
                "required": false,
                "description": "When this parameter is true, the container is given read-only access to its root file system."
              },
              "Ulimits": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "A list of ulimits to set in the container.",
                "properties": {
                  "SoftLimit": {
                    "type": "Number",
                    "required": true,
                    "description": "The soft limit for the ulimit type."
                  },
                  "HardLimit": {
                    "type": "Number",
                    "required": true,
                    "description": "The hard limit for the ulimit type."
                  },
                  "Name": {
                    "type": "String",
                    "required": true,
                    "description": "The type of the ulimit."
                  }
                }
              },
              "Vcpus": {
                "type": "Number",
                "required": true,
                "description": "The number of vCPUs reserved for the container. "
              },
              "Image": {
                "type": "String",
                "required": true,
                "description": "The image used to start a container."
              },
              "InstanceType": {
                "type": "String",
                "required": false,
                "description": "The instance type to use for a multi-node parallel job."
              }
            }
          },
          "JobDefinitionName": {
            "type": "String",
            "required": false,
            "description": "The name of the job definition."
          },
          "RetryStrategy": {
            "type": "Object",
            "required": false,
            "description": "The retry strategy to use for failed jobs that are submitted with this job definition.",
            "properties": {
              "Attempts": {
                "type": "Number",
                "required": false,
                "description": "The number of times to move a job to the RUNNABLE status."
              }
            }
          },
          "Timeout": {
            "type": "Object",
            "required": false,
            "description": "The timeout configuration for jobs that are submitted with this job definition, after which AWS Batch terminates your jobs if they have not finished.",
            "properties": {
              "AttemptDurationSeconds": {
                "type": "Number",
                "required": false,
                "description": "The time duration in seconds (measured from the job attempt's startedAt timestamp) after which AWS Batch terminates your jobs if they have not finished."
              }
            }
          },
          "NodeProperties": {
            "type": "Object",
            "required": false,
            "description": "An object representing the node properties of a multi-node parallel job.",
            "properties": {
              "MainNode": {
                "type": "Number",
                "required": true,
                "description": "Specifies the node index for the main node of a multi-node parallel job."
              },
              "NodeRangeProperties": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "A list of node ranges and their properties associated with a multi-node parallel job.",
                "properties": {
                  "Container": {
                    "type": "Object",
                    "required": false,
                    "description": "The container details for the node range.",
                    "properties": {
                      "User": {
                        "type": "String",
                        "required": false,
                        "description": "The user name to use inside the container. "
                      },
                      "Memory": {
                        "type": "Number",
                        "required": true,
                        "description": "The hard limit (in MiB) of memory to present to the container."
                      },
                      "Privileged": {
                        "type": "Boolean",
                        "required": false,
                        "description": "When this parameter is true, the container is given elevated privileges on the host container instance (similar to the root user)."
                      },
                      "JobRoleArn": {
                        "type": "String",
                        "required": false,
                        "description": "The Amazon Resource Name (ARN) of the IAM role that the container can assume for AWS permissions.",
                        "resource-ref-type": "AWS::IAM::Role"
                      },
                      "ReadonlyRootFilesystem": {
                        "type": "Boolean",
                        "required": false,
                        "description": "When this parameter is true, the container is given read-only access to its root file system."
                      },
                      "Vcpus": {
                        "type": "Number",
                        "required": true,
                        "description": "The number of vCPUs reserved for the container."
                      },
                      "Image": {
                        "type": "String",
                        "required": true,
                        "description": "The image used to start a container."
                      },
                      "MountPoints": {
                        "type": "Array",
                        "array-type": "Object",
                        "required": false,
                        "description": "The mount points for data volumes in your container.",
                        "properties": {
                          "ReadOnly": {
                            "type": "Boolean",
                            "required": false,
                            "description": "If this value is true, the container has read-only access to the volume; otherwise, the container can write to the volume. The default value is false."
                          },
                          "SourceVolume": {
                            "type": "String",
                            "required": false,
                            "description": "The name of the volume to mount."
                          },
                          "ContainerPath": {
                            "type": "String",
                            "required": false,
                            "description": "The path on the container at which to mount the host volume."
                          }
                        }
                      },
                      "Volumes": {
                        "type": "Array",
                        "array-type": "Object",
                        "required": false,
                        "description": "A list of data volumes used in a job.",
                        "properties": {
                          "Host": {
                            "type": "Object",
                            "required": false,
                            "description": "The contents of the Host parameter determine whether your data volume persists on the host container instance and where it is stored.",
                            "properties": {
                              "SourcePath": {
                                "type": "String",
                                "required": false,
                                "description": "The path on the host container instance that is presented to the container."
                              }
                            }
                          },
                          "Name": {
                            "type": "String",
                            "required": false,
                            "description": "The name of the volume."
                          }
                        }
                      },
                      "Command": {
                        "type": "Array",
                        "array-type": "String",
                        "required": false,
                        "description": "The command that is passed to the container."
                      },
                      "Environment": {
                        "type": "Array",
                        "array-type": "Object",
                        "required": false,
                        "description": "The environment variables to pass to a container.",
                        "properties": {
                          "Value": {
                            "type": "String",
                            "required": false,
                            "description": "The value of the environment variable."
                          },
                          "Name": {
                            "type": "String",
                            "required": false,
                            "description": "The name of the environment variable."
                          }
                        }
                      },
                      "Ulimits": {
                        "type": "Array",
                        "array-type": "Object",
                        "required": false,
                        "description": "A list of ulimits to set in the container.",
                        "properties": {
                          "SoftLimit": {
                            "type": "Number",
                            "required": true,
                            "description": "The soft limit for the ulimit type."
                          },
                          "HardLimit": {
                            "type": "Number",
                            "required": true,
                            "description": "The hard limit for the ulimit type."
                          },
                          "Name": {
                            "type": "String",
                            "required": true,
                            "description": "The type of the ulimit."
                          }
                        }
                      },
                      "InstanceType": {
                        "type": "String",
                        "required": false,
                        "description": "The instance type to use for a multi-node parallel job."
                      }
                    }
                  },
                  "TargetNodes": {
                    "type": "String",
                    "required": true,
                    "description": "The range of nodes, using node index values."
                  }
                }
              },
              "NumNodes": {
                "type": "Number",
                "required": true,
                "description": "The number of nodes associated with a multi-node parallel job."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Batch::JobQueue": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Batch::JobQueue resource defines your AWS Batch job queue.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Batch::JobQueue resource defines your AWS Batch job queue."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ComputeEnvironmentOrder": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "The compute environments that are attached to the job queue and the order in which job placement is preferred",
            "properties": {
              "ComputeEnvironment": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::Batch::ComputeEnvironment",
                "description": "The Amazon Resource Name (ARN) of the compute environment."
              },
              "Order": {
                "type": "Number",
                "required": true,
                "description": "The order of the compute environment."
              }
            }
          },
          "Priority": {
            "type": "Number",
            "required": true,
            "description": "The priority of the job queue."
          },
          "State": {
            "type": "String",
            "required": false,
            "description": "The status of the job queue."
          },
          "JobQueueName": {
            "type": "String",
            "required": false,
            "description": "The name of the job queue."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Budgets::Budget": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Budgets::Budget resource creates, replaces, or deletes budgets for Billing and Cost Management.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Budgets::Budget resource creates, replaces, or deletes budgets for Billing and Cost Management."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "NotificationsWithSubscribers": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The notification that you want associated with the budget. A budget can have up to five notifications, and each notification can have one SNS subscriber and up to ten email subscribers.",
            "properties": {
              "Subscribers": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "A list of subscribers who are subscribed to this notification.",
                "properties": {
                  "SubscriptionType": {
                    "type": "String",
                    "required": true,
                    "description": "The type of notification that AWS sends to a subscriber, such as email or SNS.",
                    "allowed-values": [
                      "*",
                      "email",
                      "SNS"
                    ]
                  },
                  "Address": {
                    "type": "String",
                    "required": true,
                    "description": "The address that AWS sends budget notifications to, either an SNS topic or an email."
                  }
                }
              },
              "Notification": {
                "type": "Object",
                "required": true,
                "description": "A notification associated with a budget",
                "properties": {
                  "ComparisonOperator": {
                    "type": "String",
                    "required": true,
                    "description": "The comparison used for this notification.",
                    "allowed-values": [
                      "*",
                      "GREATER_THAN",
                      "LESS_THAN",
                      "EQUAL_TO"
                    ]
                  },
                  "NotificationType": {
                    "type": "String",
                    "required": true,
                    "description": "Whether the notification is for how much you have spent or for how much you are forecasted to spend.",
                    "allowed-values": [
                      "*",
                      "ACTUAL",
                      "FORECASTED"
                    ]
                  },
                  "Threshold": {
                    "type": "Number",
                    "required": true,
                    "description": "The threshold associated with a notification."
                  },
                  "ThresholdType": {
                    "type": "String",
                    "required": false,
                    "description": "The type of threshold for a notification.",
                    "allowed-values": [
                      "*",
                      "PERCENTAGE",
                      "ABSOLUTE_VALUE"
                    ]
                  }
                }
              }
            }
          },
          "Budget": {
            "type": "Object",
            "required": true,
            "description": "The budget for tracking your service usage, costs, and RI utilization.",
            "properties": {
              "BudgetLimit": {
                "type": "Object",
                "required": false,
                "description": "The total amount of cost, usage, or RI utilization that you want to track with your budget.",
                "properties": {
                  "Amount": {
                    "type": "Number",
                    "required": true,
                    "description": "The cost or usage amount associated with a budget forecast, actual spend, or budget threshold."
                  },
                  "Unit": {
                    "type": "String",
                    "required": true,
                    "description": "The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as USD or GB."
                  }
                }
              },
              "TimePeriod": {
                "type": "Object",
                "required": false,
                "description": "The period of time covered by a budget. Has a start date and an end date. The start date must come before the end date. There are no restrictions on the end date.",
                "properties": {
                  "Start": {
                    "type": "String",
                    "required": false,
                    "description": "The start date for a budget."
                  },
                  "End": {
                    "type": "String",
                    "required": false,
                    "description": "The end date for a budget."
                  }
                }
              },
              "TimeUnit": {
                "type": "String",
                "required": true,
                "description": "The length of time until a budget resets the actual and forecasted spend to zero.",
                "allowed-values": [
                  "*",
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ANNUALLY"
                ]
              },
              "CostFilters": {
                "type": "Json",
                "required": false,
                "description": "The cost filters applied to a budget, such as service or region."
              },
              "BudgetName": {
                "type": "String",
                "required": false,
                "description": "The name of a budget."
              },
              "CostTypes": {
                "type": "Object",
                "required": false,
                "description": "The types of costs included in this budget, such as credits, subscriptions, or taxes.",
                "properties": {
                  "IncludeSupport": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Specifies whether a budget includes support subscription fees."
                  },
                  "IncludeOtherSubscription": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Specifies whether a budget includes non-RI subscription costs."
                  },
                  "IncludeTax": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Specifies whether a budget includes taxes."
                  },
                  "IncludeSubscription": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Specifies whether a budget includes subscriptions."
                  },
                  "UseBlended": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Specifies whether a budget uses blended rate."
                  },
                  "IncludeUpfront": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Specifies whether a budget includes upfront RI costs."
                  },
                  "IncludeDiscount": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Specifies whether a budget includes discounts."
                  },
                  "IncludeCredit": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Specifies whether a budget includes credits."
                  },
                  "IncludeRecurring": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Specifies whether a budget includes recurring fees such as monthly RI fees."
                  },
                  "UseAmortized": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Specifies whether a budget uses the amortized rate."
                  },
                  "IncludeRefund": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Specifies whether a budget includes refunds."
                  }
                }
              },
              "BudgetType": {
                "type": "String",
                "required": true,
                "description": "Whether this budget tracks monetary costs, usage, or RI utilization.",
                "allowed-values": [
                  "*",
                  "USAGE",
                  "COST",
                  "RI_UTILIZATION",
                  "RI_COVERAGE"
                ]
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CertificateManager::Certificate": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CertificateManager::Certificate resource requests an AWS Certificate Manager (ACM) certificate that you can use with AWS services to enable secure connections.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CertificateManager::Certificate resource requests an AWS Certificate Manager (ACM) certificate that you can use with AWS services to enable secure connections."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DomainName": {
            "type": "String",
            "required": true,
            "description": "Fully qualified domain name (FQDN), such as www.example.com, of the site that you want to secure with the ACM certificate."
          },
          "DomainValidationOptions": {
            "type": "Object",
            "required": false,
            "description": "Domain information that domain name registrars use to verify your identity.",
            "properties": {
              "DomainName": {
                "type": "String",
                "required": true,
                "description": "Fully Qualified Domain Name (FQDN) of the Certificate that you are requesting."
              },
              "ValidationDomain": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "FQDNs to be included in the Subject Alternative Name extension of the ACM certificate."
              }
            }
          },
          "SubjectAlternativeNames": {
            "type": "String",
            "required": true,
            "description": "Fully qualified domain name (FQDN), such as www.example.com, of the site that you want to secure with the ACM certificate."
          },
          "ValidationMethod": {
            "type": "String",
            "required": false,
            "description": "The method you want to use if you are requesting a public certificate to validate that you own or control domain.",
            "allowed-values": [
              "*",
              "EMAIL",
              "DNS"
            ]
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Cloud9::EnvironmentEC2": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Cloud9::EnvironmentEC2 resource creates an Amazon EC2 development environment in AWS Cloud9.",
    "return-values": [
      {
        "name": "Arn",
        "description": "The Amazon Resource Name (ARN) of the development environment, such as arn:aws:cloud9:us-east-2:123456789012:environment:2bc3642873c342e485f7e0c561234567."
      },
      {
        "name": "Name",
        "description": "The name of the development environment, such as my-demo-environment."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Cloud9::EnvironmentEC2 resource creates an Amazon EC2 development environment in AWS Cloud9."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Repositories": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Any AWS CodeCommit source code repositories to be cloned into the development environment.",
            "properties": {
              "PathComponent": {
                "type": "String",
                "required": true,
                "description": "The path within the development environment's default filesystem location to clone the AWS CodeCommit repository into."
              },
              "RepositoryUrl": {
                "type": "String",
                "required": true,
                "description": "The clone URL of the AWS CodeCommit repository to be cloned."
              }
            }
          },
          "OwnerArn": {
            "type": "String",
            "required": false,
            "description": "The Amazon Resource Name (ARN) of the environment owner. If this value is not specified, the ARN defaults to this environment's creator."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "The description of the environment to create."
          },
          "AutomaticStopTimeMinutes": {
            "type": "Number",
            "required": false,
            "description": "The number of minutes until the running instance is shut down after the environment has last been used."
          },
          "SubnetId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::Subnet",
            "description": "The ID of the subnet in Amazon Virtual Private Cloud (Amazon VPC) to use."
          },
          "InstanceType": {
            "type": "String",
            "required": true,
            "description": "The type of instance to host the environment on (for example, t2.micro)."
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "The name of the environment to create."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CloudFormation::CustomResource": {
    "type": "Object",
    "required": false,
    "description": "Custom resources are special AWS CloudFormation resources that provide a way for a template developer to include resources in an AWS CloudFormation stack that are provided by a source other than Amazon Web Services. The custom resource provider can be either a template developer or a separate third-party resource provider.",
    "return-values": [
      {
        "name": "*",
        "description": "Custom return parameter."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Custom resources are special AWS CloudFormation resources that provide a way for a template developer to include resources in an AWS CloudFormation stack that are provided by a source other than Amazon Web Services. The custom resource provider can be either a template developer or a separate third-party resource provider."
      },
      "Properties": {
        "type": "Json",
        "required": false,
        "description": "Custom resources are special AWS CloudFormation resources that provide a way for a template developer to include resources in an AWS CloudFormation stack that are provided by a source other than Amazon Web Services. The custom resource provider can be either a template developer or a separate third-party resource provider."
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CloudFormation::Macro": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CloudFormation::Macro resource is an AWS CloudFormation resource type that creates an AWS CloudFormation macro to perform custom processing on AWS CloudFormation templates.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CloudFormation::Macro resource is an AWS CloudFormation resource type that creates an AWS CloudFormation macro to perform custom processing on AWS CloudFormation templates."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the macro."
          },
          "FunctionName": {
            "type": "String",
            "required": true,
            "description": "The Amazon Resource Name (ARN) of the underlying AWS Lambda function that you want AWS CloudFormation to invoke when the macro is run.",
            "resource-ref-type": "AWS::Lambda::Function"
          },
          "LogGroupName": {
            "type": "String",
            "required": false,
            "description": "The Amazon CloudWatch log group to which AWS CloudFormation sends error logging information when invoking the macro's underlying AWS Lambda function.",
            "resource-ref-type": "AWS::Logs::LogGroup"
          },
          "LogRoleARN": {
            "type": "String",
            "required": false,
            "description": "The ARN of the role AWS CloudFormation should assume when sending log entries to CloudWatch logs.",
            "resource-ref-type": "AWS::IAM::Role"
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "The name of the macro."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CloudFormation::Stack": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CloudFormation::Stack type embeds a stack as a resource in a template.",
    "return-values": [
      {
        "name": "*",
        "description": "The output value from the specified embedded stack where EmbeddedStackOutputName is the name of the output value."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CloudFormation::Stack type embeds a stack as a resource in a template."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "TemplateURL": {
            "type": "String",
            "required": true,
            "description": "The URL of a template that specifies the stack that you want to create as a resource."
          },
          "TimeoutInMinutes": {
            "type": "String",
            "required": false,
            "description": "The length of time, in minutes, that AWS CloudFormation waits for the embedded stack to reach the CREATE_COMPLETE state. "
          },
          "Parameters": {
            "type": "Json",
            "required": false,
            "description": "The set of parameters passed to AWS CloudFormation when this embedded stack is created."
          },
          "NotificationARNs": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::SNS::Topic",
            "description": "A list of existing Amazon SNS topics where notifications about stack events are sent."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "An arbitrary set of tags (key�value pairs) to describe this stack.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CloudFormation::WaitCondition": {
    "type": "Object",
    "required": false,
    "description": "The following properties are available with the AWS::CloudFormation::WaitCondition type.",
    "return-values": [
      {
        "name": "Data",
        "description": "A JSON object containing the UniqueId and Data values from the wait condition signal(s) for the specified wait condition."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The following properties are available with the AWS::CloudFormation::WaitCondition type."
      },
      "CreationPolicy": {
        "type": "Object",
        "required": false,
        "description": "The CreationPolicy prevents the resource's status from reaching create complete until AWS CloudFormation receives a specified number of success signals or the timeout period is exceeded.",
        "properties": {
          "ResourceSignal": {
            "type": "Object",
            "required": true,
            "description": "Signal configuration.",
            "properties": {
              "Count": {
                "type": "Number",
                "required": false,
                "description": "The number of success signals AWS CloudFormation must receive before it sets the resource status as CREATE_COMPLETE."
              },
              "Timeout": {
                "type": "String",
                "required": false,
                "description": "The length of time that AWS CloudFormation waits for the number of signals that was specified in the Count property. The value must be in ISO8601 duration format, in the form: PT#H#M#S, where each # is the number of hours, minutes, and seconds, respectively. Default: PT5M (5 minutes)"
              }
            }
          }
        }
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Handle": {
            "type": "Reference",
            "resource-ref-type": "AWS::CloudFormation::WaitConditionHandle",
            "required": true,
            "description": "A reference to the wait condition handle used to signal this wait condition."
          },
          "Timeout": {
            "type": "String",
            "required": true,
            "description": "The length of time (in seconds) to wait for the number of signals that the Count property specifies."
          },
          "Count": {
            "type": "String",
            "required": true,
            "description": "The number of success signals that AWS CloudFormation must receive before it continues the stack creation process."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CloudFormation::WaitConditionHandle": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CloudFormation::WaitConditionHandle type has no properties.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CloudFormation::WaitConditionHandle type has no properties."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {}
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CloudFront::CloudFrontOriginAccessIdentity": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CloudFront::CloudFrontOriginAccessIdentity resource specifies the CloudFront origin access identity to associate with the origin of a CloudFront distribution.",
    "return-values": [
      {
        "name": "S3CanonicalUserId",
        "description": "The Amazon S3 canonical user ID for the origin access identity, used when giving the origin access identity read permission to an object in Amazon S3."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CloudFront::CloudFrontOriginAccessIdentity resource specifies the CloudFront origin access identity to associate with the origin of a CloudFront distribution."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CloudFrontOriginAccessIdentityConfig": {
            "type": "Object",
            "required": true,
            "description": "The configuration of the CloudFront origin access identity.",
            "properties": {
              "Comment": {
                "type": "String",
                "required": true,
                "description": "A comment to associate with this CloudFront origin access identity."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CloudFront::Distribution": {
    "type": "Object",
    "required": false,
    "description": "Creates an Amazon CloudFront download distribution.",
    "return-values": [
      {
        "name": "DomainName",
        "description": "The domain name of the resource. For example: d2fadu0nynjpfn.cloudfront.net."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an Amazon CloudFront download distribution."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DistributionConfig": {
            "type": "Object",
            "required": true,
            "description": "The distribution's configuration information.",
            "properties": {
              "Aliases": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "CNAMEs (alternate domain names), if any, for the distribution."
              },
              "CacheBehaviors": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "properties": {
                  "AllowedMethods": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "allowed-values": [
                      "HEAD",
                      "GET",
                      "OPTIONS",
                      "DELETE",
                      "PATCH",
                      "POST",
                      "PUT",
                      "*"
                    ],
                    "description": "HTTP methods that CloudFront processes and forwards to your Amazon S3 bucket or your custom origin. You can specify [\"HEAD\", \"GET\"] or [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\"]."
                  },
                  "CachedMethods": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "allowed-values": [
                      "HEAD",
                      "GET",
                      "OPTIONS",
                      "*"
                    ],
                    "description": "HTTP methods for which CloudFront caches responses."
                  },
                  "Compress": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether CloudFront automatically compresses certain files for this cache behavior."
                  },
                  "DefaultTTL": {
                    "type": "Number",
                    "required": false,
                    "description": "The default time in seconds that objects stay in CloudFront caches before CloudFront forwards another request to your custom origin to determine whether the object has been updated."
                  },
                  "ForwardedValues": {
                    "type": "Object",
                    "required": true,
                    "description": "Specifies how CloudFront handles query strings.",
                    "properties": {
                      "Cookies": {
                        "type": "Object",
                        "required": false,
                        "description": "ForwardedValues is a property of the DefaultCacheBehavior and CacheBehavior properties that indicates whether Amazon CloudFront forwards query strings or cookies.",
                        "properties": {
                          "Forward": {
                            "type": "String",
                            "required": true,
                            "allowed-values": [
                              "none",
                              "all",
                              "whitelist"
                            ],
                            "description": "The cookies to forward to the origin of the cache behavior. You can specify none, all, or whitelist."
                          },
                          "WhitelistedNames": {
                            "type": "Array",
                            "array-type": "String",
                            "required": false,
                            "description": "The names of cookies to forward to the origin for the cache behavior."
                          }
                        }
                      },
                      "Headers": {
                        "type": "Array",
                        "array-type": "String",
                        "required": false,
                        "description": "Specifies the headers that you want Amazon CloudFront to forward to the origin for this cache behavior."
                      },
                      "QueryString": {
                        "type": "Boolean",
                        "required": true,
                        "description": "Indicates whether you want CloudFront to forward query strings to the origin that is associated with this cache behavior. If so, specify true; if not, specify false."
                      },
                      "QueryStringCacheKeys": {
                        "type": "Array",
                        "array-type": "String",
                        "required": false,
                        "description": "If you forward query strings to the origin, specifies the query string parameters that CloudFront uses to determine which content to cache."
                      }
                    }
                  },
                  "MaxTTL": {
                    "type": "Number",
                    "required": false,
                    "description": "The maximum time in seconds that objects stay in CloudFront caches before CloudFront forwards another request to your custom origin to determine whether the object has been updated."
                  },
                  "MinTTL": {
                    "type": "Number",
                    "required": false,
                    "description": "The minimum amount of time that you want objects to stay in the cache before CloudFront queries your origin to see whether the object has been updated."
                  },
                  "PathPattern": {
                    "type": "String",
                    "required": true,
                    "description": "The pattern for which you want this cache behavior to apply (ex. \"images/*.jpg\"). When CloudFront receives an end-user request, the requested path is compared with path patterns in the order in which cache behaviors are listed in the stack specification for the distribution."
                  },
                  "SmoothStreaming": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether to distribute media files in the Microsoft Smooth Streaming format by using the origin that is associated with this cache behavior. If you specify true, you can still use this cache behavior to distribute other content if the content matches the PathPattern value."
                  },
                  "TargetOriginId": {
                    "type": "String",
                    "required": true,
                    "description": "The value of ID for the origin that you want CloudFront to route requests to when the default cache behavior is applicable to a request."
                  },
                  "TrustedSigners": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "description": "A list of AWS accounts that you want to allow to create signed URLs for private content."
                  },
                  "ViewerProtocolPolicy": {
                    "type": "String",
                    "required": true,
                    "allowed-values": [
                      "allow-all",
                      "https-only",
                      "redirect-to-https",
                      "*"
                    ],
                    "description": "Specifies the protocol that users can use to access the files in the origin specified by TargetOriginId when the default cache behavior is applicable to a request."
                  },
                  "LambdaFunctionAssociations": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "Lambda function associations for the Amazon CloudFront distribution.",
                    "properties": {
                      "EventType": {
                        "type": "String",
                        "required": false,
                        "description": "Specifies the event type that triggers a Lambda function invocation.",
                        "allowed-values": [
                          "*",
                          "viewer-request",
                          "viewer-response",
                          "origin-request",
                          "origin-response"
                        ]
                      },
                      "LambdaFunctionARN": {
                        "type": "String",
                        "required": false,
                        "resource-ref-type": "AWS::Lambda::Function",
                        "description": "The ARN of the Lambda function."
                      }
                    }
                  },
                  "FieldLevelEncryptionId": {
                    "type": "String",
                    "required": false,
                    "description": "The value of ID for the field-level encryption configuration that you want CloudFront to use for encrypting specific fields of data for a cache behavior or for the default cache behavior in your distribution."
                  }
                }
              },
              "Comment": {
                "type": "String",
                "required": false,
                "description": "Any comments you want to include about the distribution."
              },
              "CustomErrorResponses": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "Whether CloudFront replaces HTTP status codes in the 4xx and 5xx range with custom error messages before returning the response to the viewer.",
                "properties": {
                  "ErrorCachingMinTTL": {
                    "type": "Number",
                    "required": false,
                    "description": "The minimum amount of time, in seconds, that Amazon CloudFront caches the HTTP status code that you specified in the ErrorCode property. The default value is 300."
                  },
                  "ErrorCode": {
                    "type": "Number",
                    "required": true,
                    "description": "An HTTP status code for which you want to specify a custom error page. You can specify 400, 403, 404, 405, 414, 500, 501, 502, 503, or 504."
                  },
                  "ResponseCode": {
                    "type": "Number",
                    "required": false,
                    "description": "The HTTP status code that CloudFront returns to viewer along with the custom error page. You can specify 200, 400, 403, 404, 405, 414, 500, 501, 502, 503, or 504."
                  },
                  "ResponsePagePath": {
                    "type": "String",
                    "required": false,
                    "description": "The path to the custom error page that CloudFront returns to a viewer when your origin returns the HTTP status code that you specified in the ErrorCode property. For example, you can specify /404-errors/403-forbidden.html."
                  }
                }
              },
              "DefaultCacheBehavior": {
                "type": "Object",
                "required": true,
                "description": "The default cache behavior that is triggered if you do not specify a CacheBehavior element, or if files don't match any of the values of PathPattern in CacheBehavior elements.",
                "properties": {
                  "AllowedMethods": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "allowed-values": [
                      "HEAD",
                      "GET",
                      "OPTIONS",
                      "DELETE",
                      "PATCH",
                      "POST",
                      "PUT",
                      "*"
                    ],
                    "description": "HTTP methods that CloudFront processes and forwards to your Amazon S3 bucket or your custom origin. You can specify [\"HEAD\", \"GET\"] or [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\"]."
                  },
                  "CachedMethods": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "allowed-values": [
                      "HEAD",
                      "GET",
                      "OPTIONS",
                      "*"
                    ],
                    "description": "HTTP methods for which CloudFront caches responses."
                  },
                  "Compress": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether CloudFront automatically compresses certain files for this cache behavior."
                  },
                  "DefaultTTL": {
                    "type": "Number",
                    "required": false,
                    "description": "The default time in seconds that objects stay in CloudFront caches before CloudFront forwards another request to your custom origin to determine whether the object has been updated."
                  },
                  "ForwardedValues": {
                    "type": "Object",
                    "required": true,
                    "description": "Specifies how CloudFront handles query strings.",
                    "properties": {
                      "Cookies": {
                        "type": "Object",
                        "required": false,
                        "description": "ForwardedValues is a property of the DefaultCacheBehavior and CacheBehavior properties that indicates whether Amazon CloudFront forwards query strings or cookies.",
                        "properties": {
                          "Forward": {
                            "type": "String",
                            "required": true,
                            "allowed-values": [
                              "none",
                              "all",
                              "whitelist"
                            ],
                            "description": "The cookies to forward to the origin of the cache behavior. You can specify none, all, or whitelist."
                          },
                          "WhitelistedNames": {
                            "type": "Array",
                            "array-type": "String",
                            "required": false,
                            "description": "The names of cookies to forward to the origin for the cache behavior."
                          }
                        }
                      },
                      "Headers": {
                        "type": "Array",
                        "array-type": "String",
                        "required": false,
                        "description": "Specifies the headers that you want Amazon CloudFront to forward to the origin for this cache behavior."
                      },
                      "QueryString": {
                        "type": "Boolean",
                        "required": true,
                        "description": "Indicates whether you want CloudFront to forward query strings to the origin that is associated with this cache behavior. If so, specify true; if not, specify false."
                      },
                      "QueryStringCacheKeys": {
                        "type": "Array",
                        "array-type": "String",
                        "required": false,
                        "description": "If you forward query strings to the origin, specifies the query string parameters that CloudFront uses to determine which content to cache."
                      }
                    }
                  },
                  "MaxTTL": {
                    "type": "Number",
                    "required": false,
                    "description": "The maximum time in seconds that objects stay in CloudFront caches before CloudFront forwards another request to your custom origin to determine whether the object has been updated."
                  },
                  "MinTTL": {
                    "type": "Number",
                    "required": false,
                    "description": "The minimum amount of time that you want objects to stay in the cache before CloudFront queries your origin to see whether the object has been updated."
                  },
                  "SmoothStreaming": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether to distribute media files in the Microsoft Smooth Streaming format by using the origin that is associated with this cache behavior. If you specify true, you can still use this cache behavior to distribute other content if the content matches the PathPattern value."
                  },
                  "TargetOriginId": {
                    "type": "String",
                    "required": true,
                    "description": "The value of ID for the origin that you want CloudFront to route requests to when the default cache behavior is applicable to a request."
                  },
                  "TrustedSigners": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "description": "A list of AWS accounts that you want to allow to create signed URLs for private content."
                  },
                  "ViewerProtocolPolicy": {
                    "type": "String",
                    "required": true,
                    "allowed-values": [
                      "allow-all",
                      "https-only",
                      "redirect-to-https",
                      "*"
                    ],
                    "description": "Specifies the protocol that users can use to access the files in the origin specified by TargetOriginId when the default cache behavior is applicable to a request."
                  },
                  "LambdaFunctionAssociations": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "Lambda function associations for the Amazon CloudFront distribution.",
                    "properties": {
                      "EventType": {
                        "type": "String",
                        "required": false,
                        "description": "Specifies the event type that triggers a Lambda function invocation.",
                        "allowed-values": [
                          "*",
                          "viewer-request",
                          "viewer-response",
                          "origin-request",
                          "origin-response"
                        ]
                      },
                      "LambdaFunctionARN": {
                        "type": "String",
                        "required": false,
                        "resource-ref-type": "AWS::Lambda::Function",
                        "description": "The ARN of the Lambda function."
                      }
                    }
                  },
                  "FieldLevelEncryptionId": {
                    "type": "String",
                    "required": false,
                    "description": "The value of ID for the field-level encryption configuration that you want CloudFront to use for encrypting specific fields of data for a cache behavior or for the default cache behavior in your distribution."
                  }
                }
              },
              "DefaultRootObject": {
                "type": "String",
                "required": false,
                "description": "The object (ex. \"index.html\") that you want CloudFront to request from your origin when the root URL for your distribution (ex. \"http://example.com/\") is requested."
              },
              "Enabled": {
                "type": "Boolean",
                "required": true,
                "description": "Controls whether the distribution is enabled to accept end user requests for content."
              },
              "HttpVersion": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "http1.1",
                  "http2",
                  "*"
                ],
                "description": "The latest HTTP version that viewers can use to communicate with CloudFront."
              },
              "Logging": {
                "type": "Object",
                "required": false,
                "description": "Controls whether access logs are written for the distribution. To turn on access logs, include this property.",
                "properties": {
                  "Bucket": {
                    "type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::S3::Bucket",
                    "description": "The Amazon S3 bucket to store the access logs in."
                  },
                  "IncludeCookies": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether CloudFront includes cookies in access logs."
                  },
                  "Prefix": {
                    "type": "String",
                    "required": false,
                    "description": "An optional string that, if defined, will be used as a prefix for the access log file names for this distribution."
                  }
                }
              },
              "Origins": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "A list of origins for this CloudFront distribution. For each origin, you can specify whether it is an S3 or custom origin.",
                "properties": {
                  "CustomOriginConfig": {
                    "type": "Object",
                    "required": false,
                    "description": "Origin information to specify a custom origin. Required: Conditional. You cannot use CustomOrigin and S3 Origin in the same distribution, but you must specify one or the other.",
                    "properties": {
                      "HTTPPort": {
                        "type": "String",
                        "required": false,
                        "description": "The HTTP port the custom origin listens on."
                      },
                      "HTTPSPort": {
                        "type": "String",
                        "required": false,
                        "description": "The HTTPS port the custom origin listens on."
                      },
                      "OriginProtocolPolicy": {
                        "type": "String",
                        "required": true,
                        "allowed-values": [
                          "http-only",
                          "match-viewer",
                          "*"
                        ],
                        "description": "The origin protocol policy to apply to your origin."
                      },
                      "OriginSSLProtocols": {
                        "type": "Array",
                        "array-type": "String",
                        "required": false,
                        "description": "The SSL protocols that CloudFront can use when establishing an HTTPS connection with your origin. By default, AWS CloudFormation specifies the TLSv1 and SSLv3 protocols."
                      },
                      "OriginReadTimeout": {
                        "type": "Number",
                        "required": false,
                        "description": "You can create a custom origin read timeout. All timeout units are in seconds."
                      },
                      "OriginKeepaliveTimeout": {
                        "type": "Number",
                        "required": false,
                        "description": "The SSL protocols that CloudFront can use when establishing an HTTPS connection with your origin.",
                        "allowed-values": [
                          "*",
                          "TLSv1",
                          "SSLv3"
                        ]
                      }
                    }
                  },
                  "DomainName": {
                    "type": "String",
                    "required": true,
                    "description": "The DNS name of the Amazon S3 bucket or the HTTP server from which you want CloudFront to get objects for this origin."
                  },
                  "Id": {
                    "type": "String",
                    "required": true,
                    "description": "An identifier for the origin. The value of Id must be unique within the distribution."
                  },
                  "OriginCustomHeaders": {
                    "type": "Object",
                    "required": false,
                    "description": "Custom headers that CloudFront includes when it forwards a request to your origin.",
                    "properties": {
                      "HeaderName": {
                        "type": "String",
                        "required": true,
                        "description": "The name of a header that CloudFront forwards to your origin."
                      },
                      "HeaderValue": {
                        "type": "String",
                        "required": true,
                        "description": "The value for the header that you specified in the HeaderName property."
                      }
                    }
                  },
                  "OriginPath": {
                    "type": "String",
                    "required": true,
                    "description": "The path that CloudFront uses to request content from an S3 bucket or custom origin."
                  },
                  "S3OriginConfig": {
                    "type": "Object",
                    "required": false,
                    "description": "Origin information to specify an Amazon S3 origin. Required: Conditional. You cannot use S3Origin and CustomOrigin in the same distribution, but you must specify one or the other.",
                    "properties": {
                      "OriginAccessIdentity": {
                        "type": "String",
                        "required": false,
                        "description": "The CloudFront origin access identity to associate with the origin. This is used to configure the origin so that end users can only access objects in an Amazon S3 bucket through CloudFront."
                      }
                    }
                  }
                }
              },
              "PriceClass": {
                "type": "String",
                "required": false,
                "description": "The price class that corresponds with the maximum price that you want to pay for the CloudFront service."
              },
              "Restrictions": {
                "type": "Object",
                "required": false,
                "description": "Specifies restrictions on who or how viewers can access your content.",
                "properties": {
                  "GeoRestriction": {
                    "type": "Object",
                    "required": false,
                    "description": "The countries in which viewers are able to access your content.",
                    "properties": {
                      "Locations": {
                        "type": "Array",
                        "array-type": "String",
                        "required": false,
                        "description": "The two-letter, uppercase country code for a country that you want to include in your blacklist or whitelist."
                      },
                      "RestrictionType": {
                        "type": "String",
                        "required": true,
                        "allowed-values": [
                          "blacklist",
                          "whitelist",
                          "none"
                        ],
                        "description": "The method to restrict distribution of your content."
                      }
                    }
                  }
                }
              },
              "ViewerCertificate": {
                "type": "Object",
                "required": false,
                "description": "The certificate to use when viewers use HTTPS to request objects.",
                "properties": {
                  "AcmCertificateArn": {
                    "type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::CertificateManager::Certificate",
                    "description": "If you're using an alternate domain name, the Amazon Resource Name (ARN) of an AWS Certificate Manager (ACM) certificate."
                  },
                  "CloudFrontDefaultCertificate": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether to use the default certificate for your CloudFront domain name when viewers use HTTPS to request your content."
                  },
                  "IamCertificateId": {
                    "type": "String",
                    "required": false,
                    "description": "The IAM certificate ID to use if you're using an alternate domain name."
                  },
                  "MinimumProtocolVersion": {
                    "type": "String",
                    "required": false,
                    "description": "The minimum version of the SSL protocol that you want CloudFront to use for HTTPS connections."
                  },
                  "SslSupportMethod": {
                    "type": "String",
                    "required": false,
                    "description": "Specifies how CloudFront serves HTTPS requests."
                  }
                }
              },
              "WebACLId": {
                "type": "String",
                "required": false,
                "resource-ref-type": [
                  "*",
                  "AWS::WAF::WebACL",
                  "AWS::WAFRegional::WebACLAssociation"
                ],
                "description": "The AWS WAF web ACL to associate with this distribution."
              },
              "IPV6Enabled": {
                "type": "Boolean",
                "required": false,
                "description": "If you want CloudFront to respond to IPv6 DNS requests with an IPv6 address for your distribution, specify true. If you specify false, CloudFront responds to IPv6 DNS requests with the DNS response code NOERROR and with no IP addresses."
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "An arbitrary set of tags (key�value pairs) to associate with a CloudFront distribution.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CloudFront::StreamingDistribution": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CloudFront::StreamingDistribution resource specifies an RMTP distribution for Amazon CloudFront.",
    "return-values": [
      {
        "name": "DomainName",
        "description": "The domain name of the resource, such as sct27g85mgx04.cloudfront.net."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CloudFront::StreamingDistribution resource specifies an RMTP distribution for Amazon CloudFront."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "StreamingDistributionConfig": {
            "type": "Object",
            "required": true,
            "description": "Information about the configuration of the RMTP streaming distribution.",
            "properties": {
              "Logging": {
                "type": "Object",
                "required": false,
                "description": "Whether access logs are written for the streaming distribution.",
                "properties": {
                  "Bucket": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::S3::Bucket",
                    "description": "The Amazon S3 bucket to store the access logs in, for example, myawslogbucket.s3.amazonaws.com."
                  },
                  "Enabled": {
                    "type": "Boolean",
                    "required": true,
                    "description": "Specifies whether you want CloudFront to save access logs to an Amazon S3 bucket."
                  },
                  "Prefix": {
                    "type": "String",
                    "required": true,
                    "description": "An optional string that you want CloudFront to prefix to the access log filenames for this streaming distribution, for example, myprefix/."
                  }
                }
              },
              "Comment": {
                "type": "String",
                "required": true,
                "description": "Any comments you want to include about the streaming distribution."
              },
              "PriceClass": {
                "type": "String",
                "required": false,
                "description": "he price class for this streaming distribution.",
                "allowed-values": [
                  "*",
                  "PriceClass_100",
                  "PriceClass_200",
                  "PriceClass_All"
                ]
              },
              "S3Origin": {
                "type": "Object",
                "required": true,
                "description": "Information about the Amazon S3 bucket from which you want CloudFront to get your media files for distribution.",
                "properties": {
                  "DomainName": {
                    "type": "String",
                    "required": true,
                    "description": "The DNS name of the Amazon S3 origin."
                  },
                  "OriginAccessIdentity": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
                    "description": "The CloudFront origin access identity to associate with the RTMP distribution. "
                  }
                }
              },
              "Enabled": {
                "type": "Boolean",
                "required": true,
                "description": "Whether the streaming distribution is enabled to accept user requests for content."
              },
              "Aliases": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "Lists the CNAMEs (alternate domain names), if any, for this streaming distribution."
              },
              "TrustedSigners": {
                "type": "Object",
                "required": true,
                "description": "Specifies any AWS accounts that you want to permit to create signed URLs for private content.",
                "properties": {
                  "Enabled": {
                    "type": "Boolean",
                    "required": true,
                    "description": "Specifies whether you want to require viewers to use signed URLs to access the files specified by PathPattern and TargetOriginId."
                  },
                  "AwsAccountNumbers": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "description": "The trusted signers for this cache behavior."
                  }
                }
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "Key-value tags to assign to this streaming distribution.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "A string that contains Tag key."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "A string that contains an optional Tag value."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CloudTrail::Trail": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CloudTrail::Trail resource creates a trail and specifies where logs are published.",
    "return-values": [
      {
        "name": "Arn",
        "description": "The ARN of the CloudTrail trail, such as arn:aws:cloudtrail:us-east-2:123456789012:trail/myCloudTrail."
      },
      {
        "name": "SnsTopicArn",
        "description": "The ARN of the Amazon SNS topic that's associated with the CloudTrail trail, such as arn:aws:sns:us-east-2:123456789012:mySNSTopic."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CloudTrail::Trail resource creates a trail and specifies where logs are published."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CloudWatchLogsLogGroupArn": {
            "type": "String",
            "required": false,
            "description": "The Amazon Resource Name (ARN) of a log group to which CloudTrail logs will be delivered."
          },
          "CloudWatchLogsRoleArn": {
            "type": "String",
            "required": false,
            "description": "The role ARN that Amazon CloudWatch Logs (CloudWatch Logs) assumes to write logs to a log group."
          },
          "EnableLogFileValidation": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether CloudTrail validates the integrity of log files. When you disable log file integrity validation, CloudTrail stops creating digest files."
          },
          "IncludeGlobalServiceEvents": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the trail is publishing events from global services, such as IAM, to the log files."
          },
          "IsLogging": {
            "type": "Boolean",
            "required": true,
            "description": "Indicates whether the CloudTrail trail is currently logging AWS API calls."
          },
          "IsMultiRegionTrail": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the CloudTrail trail is created in the region in which you create the stack (false) or in all regions (true)."
          },
          "KMSKeyId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::KMS::Key",
            "description": "The AWS Key Management Service (AWS KMS) key ID that you want to use to encrypt CloudTrail logs."
          },
          "S3BucketName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::S3::Bucket",
            "description": "The name of the Amazon S3 bucket where CloudTrail publishes log files."
          },
          "S3KeyPrefix": {
            "type": "String",
            "required": false,
            "description": "An Amazon S3 object key prefix that precedes the name of all log files."
          },
          "SnsTopicName": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::SNS::Topic",
            "description": "The name of an Amazon SNS topic that is notified when new log files are published."
          },
          "EventSelectors": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Configures logging for management and data events.",
            "properties": {
              "DataResources": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "The resources for data events.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The resource type to log data events for.",
                    "allowed-values": [
                      "*",
                      "AWS::S3::Object"
                    ]
                  },
                  "Values": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "description": "A list of ARN-like strings for the specified Amazon S3 objects."
                  }
                }
              },
              "IncludeManagementEvents": {
                "type": "Boolean",
                "required": false,
                "description": "Specifies whether the event selector includes management events for the trail."
              },
              "ReadWriteType": {
                "type": "String",
                "required": false,
                "description": "Specifies whether to log read-only events, write-only events, or all events.",
                "allowed-values": [
                  "*",
                  "All"
                ]
              }
            }
          },
          "TrailName": {
            "type": "String",
            "required": false,
            "description": "The name of the trail."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CloudWatch::Alarm": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CloudWatch::Alarm type creates an Amazon CloudWatch alarm.",
    "return-values": [
      {
        "name": "Arn",
        "description": "The Amazon Resource Name (ARN) of the CloudWatch alarm, such as arn:aws:cloudwatch:us-east-2:123456789012:alarm:myCloudWatchAlarm-CPUAlarm-UXMMZK36R55Z."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CloudWatch::Alarm type creates an Amazon CloudWatch alarm."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ActionsEnabled": {
            "type": "String",
            "required": false,
            "description": "Indicates whether or not actions should be executed during any changes to the alarm's state. Either true or false."
          },
          "AlarmActions": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": [
              "AWS::SNS::Topic",
              "AWS::AutoScaling::ScalingPolicy"
            ],
            "required": false,
            "description": "The list of actions to execute when this alarm transitions into an ALARM state from any other state. Each action is specified as an Amazon Resource Number (ARN). Currently the only action supported is publishing to an Amazon SNS topic or an Amazon Auto Scaling policy."
          },
          "AlarmDescription": {
            "type": "String",
            "required": false,
            "description": "The description for the alarm."
          },
          "AlarmName": {
            "type": "String",
            "required": false,
            "description": "A name for the alarm. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the alarm name."
          },
          "ComparisonOperator": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "GreaterThanOrEqualToThreshold",
              "GreaterThanThreshold",
              "LessThanThreshold",
              "LessThanOrEqualToThreshold"
            ],
            "description": "The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand."
          },
          "Dimensions": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The dimensions for the alarm's associated metric.",
            "properties": {
              "Name": {
                "type": "String",
                "required": true,
                "description": "Name of the dimension."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "The value representing the dimension measurement."
              }
            }
          },
          "EvaluationPeriods": {
            "type": "String",
            "required": true,
            "description": "The number of periods over which data is compared to the specified threshold."
          },
          "InsufficientDataActions": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": [
              "AWS::SNS::Topic",
              "AWS::AutoScaling::ScalingPolicy"
            ],
            "required": false,
            "description": "The list of actions to execute when this alarm transitions into an INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Number (ARN). Currently the only action supported is publishing to an Amazon SNS topic or an Amazon Auto Scaling policy."
          },
          "MetricName": {
            "type": "String",
            "required": true,
            "description": "The name for the alarm's associated metric."
          },
          "Namespace": {
            "type": "String",
            "required": true,
            "description": "The namespace for the alarm's associated metric."
          },
          "OKActions": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": [
              "AWS::SNS::Topic",
              "AWS::AutoScaling::ScalingPolicy"
            ],
            "required": false,
            "description": "The list of actions to execute when this alarm transitions into an OK state from any other state. Each action is specified as an Amazon Resource Number (ARN). Currently the only action supported is publishing to an Amazon SNS topic or an Amazon Auto Scaling policy."
          },
          "Period": {
            "type": "String",
            "required": true,
            "description": "The period in seconds over which the specified statistic is applied."
          },
          "Statistic": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "SampleCount",
              "Average",
              "Sum",
              "Minimum",
              "Maximum"
            ],
            "description": "The statistic to apply to the alarm's associated metric."
          },
          "Threshold": {
            "type": "String",
            "required": true,
            "description": "The value against which the specified statistic is compared."
          },
          "Unit": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "Seconds",
              "Microseconds",
              "Milliseconds",
              "Bytes",
              "Kilobytes",
              "Megabytes",
              "Gigabytes",
              "Terabytes",
              "Bits",
              "Kilobits",
              "Megabits",
              "Gigabits",
              "Terabits",
              "Percent",
              "Count",
              "Bytes/Second",
              "Kilobytes/Second",
              "Megabytes/Second",
              "Gigabytes/Second",
              "Terabytes/Second",
              "Bits/Second",
              "Kilobits/Second",
              "Megabits/Second",
              "Gigabits/Second",
              "Terabits/Second",
              "Count/Second",
              "None"
            ],
            "description": "The unit for the alarm's associated metric."
          },
          "EvaluateLowSampleCountPercentile": {
            "type": "String",
            "required": false,
            "description": "Used only for alarms that are based on percentiles."
          },
          "ExtendedStatistic": {
            "type": "String",
            "required": false,
            "description": "The percentile statistic for the metric."
          },
          "TreatMissingData": {
            "type": "String",
            "required": false,
            "description": "Sets how this alarm is to handle missing data points."
          },
          "DatapointsToAlarm": {
            "type": "Number",
            "required": false,
            "description": "The number of datapoints that must be breaching to trigger the alarm."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CloudWatch::Dashboard": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CloudWatch::Dashboard resource creates an Amazon CloudWatch dashboard.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CloudWatch::Dashboard resource creates an Amazon CloudWatch dashboard."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DashboardName": {
            "type": "String",
            "required": false,
            "description": "A name for the dashboard."
          },
          "DashboardBody": {
            "type": "String",
            "required": true,
            "description": "A JSON string that defines the widgets contained in the dashboard and their location."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CodeBuild::Project": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CodeBuild::Project resource configures how AWS CodeBuild builds your source code.",
    "return-values": [
      {
        "name": "Arn",
        "description": "The ARN of the AWS CodeBuild project."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CodeBuild::Project resource configures how AWS CodeBuild builds your source code."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Artifacts": {
            "type": "Object",
            "required": true,
            "description": "The output settings for artifacts that the project generates during a build.",
            "properties": {
              "Location": {
                "type": "String",
                "required": false,
                "description": "The location where AWS CodeBuild saves the build output artifacts."
              },
              "Name": {
                "type": "String",
                "required": false,
                "description": "The name of the build output folder where AWS CodeBuild saves the build output artifacts."
              },
              "NamespaceType": {
                "type": "String",
                "required": false,
                "description": "The information AWS CodeBuild adds to the build output path, such as a build ID."
              },
              "Packaging": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "*",
                  "NONE",
                  "ZIP"
                ],
                "description": "Indicates how AWS CodeBuild packages the build output artifacts."
              },
              "Path": {
                "type": "String",
                "required": false,
                "description": "The path to the build output folder where AWS CodeBuild saves the build output artifacts."
              },
              "Type": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "*",
                  "CODECOMMIT",
                  "CODEPIPELINE",
                  "GITHUB",
                  "GITHUB_ENTERPRISE",
                  "BITBUCKET",
                  "S3",
                  "NO_SOURCE"
                ],
                "description": "The type of build output artifact."
              },
              "ArtifactIdentifier": {
                "type": "String",
                "required": false,
                "description": "An identifier for this artifact."
              },
              "OverrideArtifactName": {
                "type": "Boolean",
                "required": false,
                "description": "If set to true a name specified in the buildspec file overrides the artifact name."
              },
              "EncryptionDisabled": {
                "type": "Boolean",
                "required": false,
                "description": "If set to true, then the build output artifacts are not encrypted."
              }
            }
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the project. Use the description to identify the purpose of the project."
          },
          "EncryptionKey": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::KMS::Key",
            "description": "The alias or Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS) customer master key (CMK) that AWS CodeBuild uses to encrypt the build output."
          },
          "Environment": {
            "type": "Object",
            "required": false,
            "description": "The build environment settings for the project, such as the environment type or the environment variables to use for the build environment.",
            "properties": {
              "ComputeType": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "*",
                  "BUILD_GENERAL1_SMALL",
                  "BUILD_GENERAL1_MEDIUM",
                  "BUILD_GENERAL1_LARGE"
                ],
                "description": "The type of compute environment"
              },
              "EnvironmentVariables": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "The environment variables that your builds can use.",
                "properties": {
                  "Name": {
                    "type": "String",
                    "required": true,
                    "description": "The name of an environment variable."
                  },
                  "Value": {
                    "type": "String",
                    "required": true,
                    "description": "The value of the environment variable."
                  },
                  "Type": {
                    "type": "String",
                    "required": false,
                    "description": "The type of environment variable.",
                    "allowed-values": [
                      "*",
                      "PARAMETER_STORE",
                      "PLAINTEXT"
                    ]
                  }
                }
              },
              "Image": {
                "type": "String",
                "required": true,
                "description": "The Docker image identifier that the build environment uses."
              },
              "Type": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "*",
                  "LINUX_CONTAINER",
                  "WINDOWS_CONTAINER"
                ],
                "description": "The type of build environment."
              },
              "PrivilegedMode": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates how the project builds Docker images. Specify true to enable running the Docker daemon inside a Docker container."
              },
              "Certificate": {
                "type": "String",
                "required": false,
                "description": "The certificate to use with this build project."
              },
              "ImagePullCredentialsType": {
                "type": "String",
                "required": false,
                "description": "The type of credentials AWS CodeBuild uses to pull images in your build.",
                "allowed-values": [
                  "*",
                  "CODEBUILD",
                  "SERVICE_ROLE"
                ]
              },
              "RegistryCredential": {
                "type": "Object",
                "required": false,
                "description": "RegistryCredential is a property of the AWS::CodeBuild::Project resource that specifies information about credentials that provide access to a private Docker registry.",
                "properties": {
                  "Credential": {
                    "type": "String",
                    "required": true,
                    "description": "The Amazon Resource Name (ARN) or name of credentials created using AWS Secrets Manager."
                  },
                  "CredentialProvider": {
                    "type": "String",
                    "required": true,
                    "description": "The service that created the credentials to access a private Docker registry.",
                    "allowed-values": [
                      "*",
                      "SERCRETS_MANAGER"
                    ]
                  }
                }
              }
            }
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "A name for the project."
          },
          "ServiceRole": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The ARN of the service role that AWS CodeBuild uses to interact with services on your behalf."
          },
          "Source": {
            "type": "Object",
            "required": true,
            "description": "The source code settings for the project, such as the source code's repository type and location.",
            "properties": {
              "BuildSpec": {
                "type": "String",
                "required": true,
                "description": "The build specification, specified as a single string."
              },
              "Location": {
                "type": "String",
                "required": true,
                "description": "The location of the source code in the specified repository type."
              },
              "Type": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "*",
                  "CODECOMMIT",
                  "CODEPIPELINE",
                  "GITHUB",
                  "GITHUB_ENTERPRISE",
                  "BITBUCKET",
                  "S3",
                  "NO_SOURCE"
                ],
                "description": "The type of repository that contains your source code."
              },
              "Auth": {
                "type": "Object",
                "required": false,
                "description": "Information about the authorization settings for AWS CodeBuild to access the source code to be built.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The authorization type to use.",
                    "allowed-values": [
                      "*",
                      "OAUTH"
                    ]
                  },
                  "Resource": {
                    "type": "String",
                    "required": false,
                    "description": "The resource value that applies to the specified authorization type."
                  }
                }
              },
              "GitCloneDepth": {
                "type": "Number",
                "required": false,
                "description": "The depth of history to download."
              },
              "InsecureSsl": {
                "type": "Boolean",
                "required": false,
                "description": "This is used with GitHub Enterprise only."
              },
              "ReportBuildStatus": {
                "type": "Boolean",
                "required": false,
                "description": "Set to true to report the status of a build's start and finish to your source provider."
              },
              "SourceIdentifier": {
                "type": "String",
                "required": false,
                "description": "An identifier for this project source."
              }
            }
          },
          "TimeoutInMinutes": {
            "type": "Number",
            "required": false,
            "description": "The number of minutes after which AWS CodeBuild stops the build if it's not complete. "
          },
          "BadgeEnabled": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether AWS CodeBuild generates a publicly accessible URL for your project's build badge."
          },
          "VpcConfig": {
            "type": "Object",
            "required": false,
            "description": "Settings that enable AWS CodeBuild to access resources in an Amazon VPC.",
            "properties": {
              "Subnets": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "description": "The IDs of the security groups in the Amazon VPC. The maximum count is 5.",
                "resource-ref-type": "AWS::EC2::Subnet"
              },
              "VpcId": {
                "type": "String",
                "required": true,
                "description": "The ID of the Amazon VPC.",
                "resource-ref-type": "AWS::EC2::VPC"
              },
              "SecurityGroupIds": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "description": "The IDs of the security groups in the Amazon VPC. The maximum count is 5.",
                "resource-ref-type": "AWS::EC2::SecurityGroup"
              }
            }
          },
          "Cache": {
            "type": "Object",
            "required": false,
            "description": "Settings that AWS CodeBuild uses to store and reuse build dependencies.",
            "properties": {
              "Type": {
                "type": "String",
                "required": true,
                "description": "The type of cache for the build project to use.",
                "allowed-values": [
                  "*",
                  "NO_CACHE",
                  "S3"
                ]
              },
              "Location": {
                "type": "String",
                "required": false,
                "description": "The Amazon S3 bucket name and prefix�for example, mybucket/prefix. This value is ignored when Type is set to NO_CACHE."
              }
            }
          },
          "Triggers": {
            "type": "Object",
            "required": false,
            "description": "For an existing AWS CodeBuild build project that has its source code stored in a GitHub repository, enables AWS CodeBuild to begin automatically rebuilding the source code every time a code change is pushed to the repository.",
            "properties": {
              "Webhook": {
                "type": "Boolean",
                "required": false,
                "description": "Specifies whether or not to begin automatically rebuilding the source code every time a code change is pushed to the repository."
              }
            }
          },
          "SecondarySources": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "An array of source objects. Each source object contains source code settings for the project.",
            "properties": {
              "Type": {
                "type": "String",
                "required": true,
                "description": "The type of repository that contains your source code.",
                "allowed-values": [
                  "*",
                  "CODECOMMIT",
                  "CODEPIPELINE",
                  "GITHUB",
                  "GITHUB_ENTERPRISE",
                  "BITBUCKET",
                  "S3",
                  "NO_SOURCE"
                ]
              },
              "ReportBuildStatus": {
                "type": "Boolean",
                "required": false,
                "description": "his specifies whether to send your source provider the status of a build's start and completion."
              },
              "Auth": {
                "type": "Object",
                "required": false,
                "description": "Information about the authorization settings for AWS CodeBuild to access the source code to be built.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The authorization type to use.",
                    "allowed-values": [
                      "*",
                      "OAUTH"
                    ]
                  },
                  "Resource": {
                    "type": "String",
                    "required": false,
                    "description": "The resource value that applies to the specified authorization type."
                  }
                }
              },
              "SourceIdentifier": {
                "type": "String",
                "required": false,
                "description": "An identifier for this project source."
              },
              "BuildSpec": {
                "type": "String",
                "required": false,
                "description": "The build specification for the project."
              },
              "GitCloneDepth": {
                "type": "Number",
                "required": false,
                "description": "The depth of history to download."
              },
              "InsecureSsl": {
                "type": "Boolean",
                "required": false,
                "description": "This is used with GitHub Enterprise only."
              },
              "Location": {
                "type": "String",
                "required": false,
                "description": "The location of the source code in the specified repository type."
              }
            }
          },
          "SecondaryArtifacts": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "An array of artifacts objects. Each artifacts object specifies output settings that the project generates during a build.",
            "properties": {
              "Path": {
                "type": "String",
                "required": false,
                "description": "The path to the build output folder where AWS CodeBuild saves the build output artifacts."
              },
              "Type": {
                "type": "String",
                "required": true,
                "description": "The type of build output artifact.",
                "allowed-values": [
                  "*",
                  "CODEPIPELINE",
                  "NO_ARTIFACTS",
                  "S3"
                ]
              },
              "ArtifactIdentifier": {
                "type": "String",
                "required": false,
                "description": "An identifier for this artifact."
              },
              "OverrideArtifactName": {
                "type": "Boolean",
                "required": false,
                "description": "If set to true a name specified in the buildspec file overrides the artifact name."
              },
              "Packaging": {
                "type": "String",
                "required": false,
                "description": "Indicates how AWS CodeBuild packages the build output artifacts."
              },
              "EncryptionDisabled": {
                "type": "Boolean",
                "required": false,
                "description": "If set to true, then the build output artifacts are not encrypted."
              },
              "Location": {
                "type": "String",
                "required": false,
                "description": "The location where AWS CodeBuild saves the build output artifacts."
              },
              "Name": {
                "type": "String",
                "required": false,
                "description": "The name of the build output folder where AWS CodeBuild saves the build output artifacts."
              },
              "NamespaceType": {
                "type": "String",
                "required": false,
                "description": "The information AWS CodeBuild adds to the build output path, such as a build ID."
              }
            }
          },
          "LogsConfig": {
            "type": "Object",
            "required": false,
            "description": "Information about logs for this build project.",
            "properties": {
              "CloudWatchLogs": {
                "type": "Object",
                "required": false,
                "description": "Information about CloudWatch Logs for a build project.",
                "properties": {
                  "Status": {
                    "type": "String",
                    "required": true,
                    "description": "The current status of the CloudWatch Logs for a build project.",
                    "allowed-values": [
                      "ENABLED",
                      "DISABLED"
                    ]
                  },
                  "GroupName": {
                    "type": "String",
                    "required": false,
                    "description": "The group name of the CloudWatch Logs.",
                    "resource-ref-type": "AWS::Logs::LogGroup"
                  },
                  "StreamName": {
                    "type": "String",
                    "required": false,
                    "description": "The prefix of the stream name of the CloudWatch Logs.",
                    "resource-ref-type": "AWS::Logs::LogStream"
                  }
                }
              },
              "S3Logs": {
                "type": "Object",
                "required": false,
                "description": "Information about logs built to an S3 bucket for a build project.",
                "properties": {
                  "Status": {
                    "type": "String",
                    "required": true,
                    "description": "The current status of the S3 logs for a build project.",
                    "allowed-values": [
                      "ENABLED",
                      "DISABLED"
                    ]
                  },
                  "Location": {
                    "type": "String",
                    "required": false,
                    "description": "The ARN of an S3 bucket and the path prefix for S3 logs."
                  }
                }
              }
            }
          },
          "QueuedTimeoutInMinutes": {
            "type": "Number",
            "required": false,
            "description": "The number of minutes a build is allowed to be queued before it times out."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CodeCommit::Repository": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CodeCommit::Repository resource creates an AWS CodeCommit repository that is hosted by Amazon Web Services.",
    "return-values": [
      {
        "name": "CloneUrlHttp",
        "description": "The URL to use for cloning the repository over HTTPS, such as https://codecommit.us-east-1.amazonaws.com/v1/repos/MyDemoRepo."
      },
      {
        "name": "CloneUrlSsh",
        "description": "The URL to use for cloning the repository over SSH, such as ssh://git-codecommit.us-east-1.amazonaws.com/v1/repos//v1/repos/MyDemoRepo."
      },
      {
        "name": "Arn",
        "description": "The Amazon Resource Name (ARN) of the repository, such as arn:aws:codecommit:us-east-1:123456789012:MyDemoRepo."
      },
      {
        "name": "Name",
        "description": "The name of the repository, such MyDemoRepo."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CodeCommit::Repository resource creates an AWS CodeCommit repository that is hosted by Amazon Web Services."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "RepositoryDescription": {
            "type": "String",
            "required": false,
            "description": "A description about the AWS CodeCommit repository."
          },
          "RepositoryName": {
            "type": "String",
            "required": false,
            "description": "A name for the AWS CodeCommit repository."
          },
          "Triggers": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Defines the actions to take in response to events that occur in the repository.",
            "properties": {
              "Branches": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The names of the branches in the AWS CodeCommit repository that contain events that you want to include in the trigger."
              },
              "CustomData": {
                "type": "String",
                "required": false,
                "description": "When an event is triggered, additional information that AWS CodeCommit includes when it sends information to the target."
              },
              "DestinationArn": {
                "type": "String",
                "required": false,
                "resource-ref-type": [
                  "AWS::Lambda::Function",
                  "AWS::SNS::Topic"
                ],
                "description": "The Amazon Resource Name (ARN) of the resource that is the target for this trigger. "
              },
              "Events": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "allowed-values": [
                  "*",
                  "all",
                  "updateReference",
                  "createReference",
                  "deleteReference"
                ],
                "description": "The repository events for which AWS CodeCommit sends information to the target, which you specified in the DestinationArn property."
              },
              "Name": {
                "type": "String",
                "required": false,
                "description": "A name for the trigger."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CodeDeploy::Application": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CodeDeploy::Application resource creates an AWS CodeDeploy application.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CodeDeploy::Application resource creates an AWS CodeDeploy application."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ApplicationName": {
            "type": "String",
            "required": false,
            "description": "A name for the application. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the application name."
          },
          "ComputePlatform": {
            "type": "String",
            "required": false,
            "description": "The compute platform that AWS CodeDeploy deploys the application to."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CodeDeploy::DeploymentConfig": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CodeDeploy::DeploymentConfig resource creates a set of deployment rules, deployment success conditions, and deployment failure conditions that AWS CodeDeploy uses during a deployment.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CodeDeploy::DeploymentConfig resource creates a set of deployment rules, deployment success conditions, and deployment failure conditions that AWS CodeDeploy uses during a deployment."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DeploymentConfigName": {
            "type": "String",
            "required": false,
            "description": "A name for the deployment configuration. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the deployment configuration name."
          },
          "MinimumHealthyHosts": {
            "type": "Object",
            "required": true,
            "description": "The minimum number of healthy instances that must be available at any time during an AWS CodeDeploy deployment.",
            "properties": {
              "Type": {
                "type": "String",
                "required": false,
                "description": "The type of count to use, such as an absolute value or a percentage of the total number of instances in the deployment."
              },
              "Value": {
                "type": "Number",
                "required": false,
                "description": "The minimum number of healthy instances."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CodeDeploy::DeploymentGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CodeDeploy::DeploymentGroup resource creates an AWS CodeDeploy deployment group that details which application revision to use and which instances your application revisions are deployed to.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CodeDeploy::DeploymentGroup resource creates an AWS CodeDeploy deployment group that details which application revision to use and which instances your application revisions are deployed to."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ApplicationName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::CodeDeploy::Application",
            "description": "The name of an AWS CodeDeploy application for this deployment group."
          },
          "AutoScalingGroups": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "resource-ref-type": "AWS::AutoScaling::AutoScalingGroup",
            "description": "A list of associated Auto Scaling groups that AWS CodeDeploy automatically deploys revisions to when new instances are created."
          },
          "Deployment": {
            "type": "Object",
            "required": false,
            "description": "The application revision that will be deployed to this deployment group.",
            "properties": {
              "Description": {
                "type": "String",
                "required": false,
                "description": "A description about this deployment."
              },
              "IgnoreApplicationStopFailures": {
                "type": "Boolean",
                "required": false,
                "description": "Whether to continue the deployment if the ApplicationStop deployment lifecycle event fails."
              },
              "Revision": {
                "type": "Object",
                "required": true,
                "description": "The location of the application revision to deploy.",
                "properties": {
                  "GitHubLocation": {
                    "type": "Object",
                    "required": false,
                    "description": "If your application revision is stored in GitHub, information about the location where it is stored.",
                    "properties": {
                      "CommitId": {
                        "type": "String",
                        "required": true,
                        "description": "The SHA1 commit ID of the GitHub commit to use as your application revision."
                      },
                      "Repository": {
                        "type": "String",
                        "required": true,
                        "description": "The GitHub account and repository name that includes the application revision. Specify the value as account/repository_name."
                      }
                    }
                  },
                  "RevisionType": {
                    "type": "String",
                    "required": true,
                    "allowed-values": [
                      "S3",
                      "GitHub",
                      "*"
                    ],
                    "description": "The application revision's location, such as in an S3 bucket or GitHub repository."
                  },
                  "S3Location": {
                    "type": "Object",
                    "required": false,
                    "description": "Information about the location of application artifacts that are stored in Amazon S3.",
                    "properties": {
                      "Bucket": {
                        "type": "String",
                        "required": false,
                        "resource-ref-type": "AWS::S3::Bucket",
                        "description": "The name of the Amazon S3 bucket where the application revision is stored."
                      },
                      "BundleType": {
                        "type": "String",
                        "required": false,
                        "allowed-values": [
                          "tar",
                          "tgz",
                          "zip",
                          "*"
                        ],
                        "description": "The file type of the application revision."
                      },
                      "ETag": {
                        "type": "String",
                        "required": false,
                        "description": "The ETag of the Amazon S3 object that represents the bundled artifacts for the application revision."
                      },
                      "Key": {
                        "type": "String",
                        "required": false,
                        "description": "The name of the Amazon S3 object that represents the bundled artifacts for the application revision."
                      },
                      "Version": {
                        "type": "String",
                        "required": false,
                        "description": "A specific version of the Amazon S3 object that represents the bundled artifacts for the application revision."
                      }
                    }
                  }
                }
              }
            }
          },
          "DeploymentConfigName": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::CodeDeploy::DeploymentConfig",
            "description": "A deployment configuration name or a predefined configuration name."
          },
          "DeploymentGroupName": {
            "type": "String",
            "required": false,
            "description": "A name for the deployment group. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the deployment group name."
          },
          "Ec2TagFilters": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The Amazon EC2 tags to filter on. AWS CodeDeploy includes all instances that match the tag filter with this deployment group.",
            "properties": {
              "Key": {
                "type": "String",
                "required": false,
                "description": "Filter instances with this key."
              },
              "Type": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "KEY_ONLY",
                  "VALUE_ONLY",
                  "KEY_AND_VALUE"
                ],
                "description": "The filter type. For example, you can filter instances by the key, tag value, or both."
              },
              "Value": {
                "type": "String",
                "required": false,
                "description": "Filter instances with this tag value."
              }
            }
          },
          "OnPremisesInstanceTagFilters": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The on-premises instance tags to filter on.",
            "properties": {
              "Key": {
                "type": "String",
                "required": false,
                "description": "Filter on-premises instances with this key."
              },
              "Type": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "KEY_ONLY",
                  "VALUE_ONLY",
                  "KEY_AND_VALUE"
                ],
                "description": "The filter type. For example, you can filter on-premises instances by the key, tag value, or both."
              },
              "Value": {
                "type": "String",
                "required": false,
                "description": "Filter on-premises instances with this tag value."
              }
            }
          },
          "ServiceRoleArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "A service role Amazon Resource Name (ARN) that grants AWS CodeDeploy permission to make calls to AWS services on your behalf."
          },
          "AlarmConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Information about the Amazon CloudWatch alarms that are associated with the deployment group.",
            "properties": {
              "Alarms": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "The list of alarms configured for the deployment group.",
                "properties": {
                  "Name": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the alarm."
                  }
                }
              },
              "Enabled": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether the alarm configuration is enabled."
              },
              "IgnorePollAlarmFailure": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is false."
              }
            }
          },
          "AutoRollbackConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Information about the automatic rollback configuration that is associated with the deployment group.",
            "properties": {
              "Enabled": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether a defined automatic rollback configuration is currently enabled."
              },
              "Events": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The event type or types that trigger a rollback.",
                "allowed-values": [
                  "*",
                  "DEPLOYMENT_FAILURE",
                  "DEPLOYMENT_STOP_ON_ALARM",
                  "DEPLOYMENT_STOP_ON_REQUEST"
                ]
              }
            }
          },
          "DeploymentStyle": {
            "type": "Object",
            "required": false,
            "description": "Attributes that determine the type of deployment to run and whether to route deployment traffic behind a load balancer.",
            "properties": {
              "DeploymentOption": {
                "type": "String",
                "required": false,
                "description": "Indicates whether to route deployment traffic behind a load balancer."
              },
              "DeploymentType": {
                "type": "String",
                "required": false,
                "description": "Indicates whether to run an in-place or blue/green deployment.",
                "allowed-values": [
                  "*",
                  "IN_PLACE",
                  "BLUE_GREEN"
                ]
              }
            }
          },
          "LoadBalancerInfo": {
            "type": "Object",
            "required": false,
            "description": "Information about the load balancer used in the deployment.",
            "properties": {
              "ElbInfoList": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "Information about the Elastic Load Balancing load balancer to use in the deployment.",
                "properties": {
                  "Name": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the load balancer that instances are deregistered from so they are not serving traffic during a deployment, and then re-registered with after the deployment completes. No duplicates allowed."
                  }
                }
              },
              "TargetGroupInfoList": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "information about the target groups to use in the deployment.",
                "properties": {
                  "Name": {
                    "type": "String",
                    "required": false,
                    "description": "For blue/green deployments, the name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes."
                  }
                }
              }
            }
          },
          "TriggerConfigurations": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Information about the notification triggers for the deployment group.",
            "properties": {
              "TriggerEvents": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The event type or types that trigger notifications.",
                "allowed-values": [
                  "*",
                  "DeploymentStart",
                  "DeploymentSuccess",
                  "DeploymentFailure",
                  "DeploymentStop",
                  "DeploymentRollback",
                  "DeploymentReady",
                  "InstanceStart",
                  "InstanceSuccess",
                  "InstanceFailure",
                  "InstanceReady"
                ]
              },
              "TriggerName": {
                "type": "String",
                "required": false,
                "description": "The name of the notification trigger."
              },
              "TriggerTargetArn": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::SNS::Topic",
                "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service topic through which notifications about deployment or instance events are sent."
              }
            }
          },
          "Ec2TagSet": {
            "type": "Object",
            "required": false,
            "description": "Specifies information about groups of tags applied to EC2 instances.",
            "properties": {
              "Ec2TagSetList": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "A list containing other lists of EC2 instance tag groups. ",
                "properties": {
                  "Ec2TagGroup": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "The EC2 tags that are already applied to EC2 instances that you want to include in the deployment group.",
                    "properties": {
                      "Key": {
                        "type": "String",
                        "required": false,
                        "description": "Filter instances with this key."
                      },
                      "Type": {
                        "type": "String",
                        "required": false,
                        "description": "The filter type.",
                        "allowed-values": [
                          "*",
                          "KEY_ONLY",
                          "VALUE_ONLY",
                          "KEY_AND_VALUE"
                        ]
                      },
                      "Value": {
                        "type": "String",
                        "required": false,
                        "description": "Filter instances with this tag value."
                      }
                    }
                  }
                }
              }
            }
          },
          "OnPremisesTagSet": {
            "type": "Object",
            "required": false,
            "description": "Information about groups of tags applied to on-premises instances.",
            "properties": {
              "OnPremisesTagSetList": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "A list containing other lists of on-premises instance tag groups.",
                "properties": {
                  "OnPremisesTagGroup": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "Lists of on-premises instance tag groups.",
                    "properties": {
                      "Key": {
                        "type": "String",
                        "required": false,
                        "description": "Filter instances with this key."
                      },
                      "Type": {
                        "type": "String",
                        "required": false,
                        "description": "The filter type.",
                        "allowed-values": [
                          "*",
                          "KEY_ONLY",
                          "VALUE_ONLY",
                          "KEY_AND_VALUE"
                        ]
                      },
                      "Value": {
                        "type": "String",
                        "required": false,
                        "description": "Filter instances with this tag value."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CodePipeline::CustomActionType": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CodePipeline::CustomActionType resource creates a custom action for activities that aren't included in the AWS CodePipeline default actions, such as running an internally developed build process or a test suite.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CodePipeline::CustomActionType resource creates a custom action for activities that aren't included in the AWS CodePipeline default actions, such as running an internally developed build process or a test suite."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Category": {
            "type": "String",
            "required": true,
            "description": "The category of the custom action, such as a source action or a build action."
          },
          "ConfigurationProperties": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The configuration properties for the custom action.",
            "properties": {
              "Description": {
                "type": "String",
                "required": false,
                "description": "A description of this configuration property that will be displayed to users."
              },
              "Key": {
                "type": "Boolean",
                "required": true,
                "description": "Indicates whether the configuration property is a key."
              },
              "Name": {
                "type": "String",
                "required": true,
                "description": "A name for this configuration property."
              },
              "Queryable": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether the configuration property will be used with the PollForJobs call."
              },
              "Required": {
                "type": "Boolean",
                "required": true,
                "description": ""
              },
              "Secret": {
                "type": "Boolean",
                "required": true,
                "description": "Indicates whether the configuration property is secret."
              },
              "Type": {
                "type": "String",
                "required": false,
                "description": "The type of the configuration property, such as String, Number, or Boolean.",
                "allowed-values": [
                  "*",
                  "String",
                  "Number",
                  "Boolean"
                ]
              }
            }
          },
          "InputArtifactDetails": {
            "type": "Object",
            "required": true,
            "description": "The input artifact details for this custom action.",
            "properties": {
              "MaximumCount": {
                "type": "Number",
                "required": true,
                "description": "The maximum number of artifacts allowed for the action type."
              },
              "MinimumCount": {
                "type": "Number",
                "required": true,
                "description": "The minimum number of artifacts allowed for the action type."
              }
            }
          },
          "OutputArtifactDetails": {
            "type": "Object",
            "required": true,
            "description": "The output artifact details for this custom action.",
            "properties": {
              "MaximumCount": {
                "type": "Number",
                "required": true,
                "description": "The maximum number of artifacts allowed for the action type."
              },
              "MinimumCount": {
                "type": "Number",
                "required": true,
                "description": "The minimum number of artifacts allowed for the action type."
              }
            }
          },
          "Provider": {
            "type": "String",
            "required": true,
            "description": "The name of the service provider that AWS CodePipeline uses for this custom action."
          },
          "Settings": {
            "type": "Object",
            "required": false,
            "description": "URLs that provide users information about this custom action.",
            "properties": {
              "EntityUrlTemplate": {
                "type": "String",
                "required": false,
                "description": "The URL that is returned to the AWS CodePipeline console that links to the resources of the external system, such as the configuration page for an AWS CodeDeploy deployment group."
              },
              "ExecutionUrlTemplate": {
                "type": "String",
                "required": false,
                "description": "The URL that is returned to the AWS CodePipeline console that links to the top-level landing page for the external system, such as the console page for AWS CodeDeploy."
              },
              "RevisionUrlTemplate": {
                "type": "String",
                "required": false,
                "description": "The URL that is returned to the AWS CodePipeline console that links to the page where customers can update or change the configuration of the external action."
              },
              "ThirdPartyConfigurationUrl": {
                "type": "String",
                "required": false,
                "description": "The URL of a sign-up page where users can sign up for an external service and specify the initial configurations for the service's action."
              }
            }
          },
          "Version": {
            "type": "String",
            "required": false,
            "description": "The version number of this custom action."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CodePipeline::Pipeline": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CodePipeline::Pipeline resource creates an AWS CodePipeline pipeline that describes how software changes go through a release process.",
    "return-values": [
      {
        "name": "Version",
        "description": "The version of the pipeline."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CodePipeline::Pipeline resource creates an AWS CodePipeline pipeline that describes how software changes go through a release process."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ArtifactStore": {
            "type": "Object",
            "required": true,
            "description": "The Amazon Simple Storage Service (Amazon S3) location where AWS CodePipeline stores pipeline artifacts.",
            "properties": {
              "EncryptionKey": {
                "type": "Object",
                "required": false,
                "resource-ref-type": "AWS::KMS::Key",
                "description": "The encryption key AWS CodePipeline uses to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key.",
                "properties": {
                  "Id": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::KMS::Key",
                    "description": "The ID of the key."
                  },
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The type of encryption key, such as KMS.",
                    "allowed-values": [
                      "*",
                      "KMS"
                    ]
                  }
                }
              },
              "Location": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::S3::Bucket",
                "description": "The location where AWS CodePipeline stores artifacts for a pipeline, such as an S3 bucket."
              },
              "Type": {
                "type": "String",
                "required": true,
                "description": "The type of the artifact store, such as Amazon S3.",
                "allowed-values": [
                  "*",
                  "S3"
                ]
              }
            }
          },
          "DisableInboundStageTransitions": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Prevents artifacts in a pipeline from transitioning to the stage that you specified.",
            "properties": {
              "Reason": {
                "type": "String",
                "required": true,
                "description": "An explanation of why the transition between two stages of a pipeline was disabled."
              },
              "StageName": {
                "type": "String",
                "required": true,
                "description": "The name of the stage to which transitions are disabled."
              }
            }
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "The name of your AWS CodePipeline pipeline."
          },
          "RestartExecutionOnUpdate": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether to rerun the AWS CodePipeline pipeline after you update it."
          },
          "RoleArn": {
            "type": "String",
            "resource-ref-type": "AWS::IAM::Role",
            "required": true,
            "description": "A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf."
          },
          "Stages": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "Defines the AWS CodePipeline pipeline stages.",
            "properties": {
              "Actions": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "The actions to include in this stage.",
                "properties": {
                  "ActionTypeId": {
                    "type": "Object",
                    "required": true,
                    "description": "Specifies the action type and the provider of the action.",
                    "properties": {
                      "Category": {
                        "type": "String",
                        "required": true,
                        "description": "A category that defines which action type the owner (the entitiy that performs the action) performs.",
                        "allowed-values": [
                          "*",
                          "Source",
                          "Build",
                          "Deploy",
                          "Test",
                          "Invoke"
                        ]
                      },
                      "Owner": {
                        "type": "String",
                        "required": true,
                        "description": "The entity that performs the action.",
                        "allowed-values": [
                          "*",
                          "AWS",
                          "ThirdParty",
                          "Custom"
                        ]
                      },
                      "Provider": {
                        "type": "String",
                        "required": true,
                        "description": "The service provider that the action calls."
                      },
                      "Version": {
                        "type": "String",
                        "required": true,
                        "description": "A version identifier for this action."
                      }
                    }
                  },
                  "Configuration": {
                    "type": "Json",
                    "required": false,
                    "description": "The action's configuration."
                  },
                  "InputArtifacts": {
                    "type": "Object",
                    "required": true,
                    "description": "The name or ID of the artifact that the action consumes, such as a test or build artifact.",
                    "properties": {
                      "Name": {
                        "type": "String",
                        "required": false,
                        "description": "The name of the artifact that the AWS CodePipeline action works on, such as My App.The input artifact of an action must match the output artifact from any preceding action."
                      }
                    }
                  },
                  "Name": {
                    "type": "String",
                    "required": true,
                    "description": "The action name."
                  },
                  "OutputArtifacts": {
                    "type": "Object",
                    "required": true,
                    "description": "The artifact name or ID that is a result of the action, such as a test or build artifact.",
                    "properties": {
                      "Name": {
                        "type": "String",
                        "required": false,
                        "description": "The name of the artifact that is the result of an AWS CodePipeline action, such as My App. Output artifact names must be unique within a pipeline."
                      }
                    }
                  },
                  "RoleArn": {
                    "type": "String",
                    "resource-ref-type": "AWS::IAM::Role",
                    "required": false,
                    "description": "The Amazon Resource Name (ARN) of a service role that the action uses. The pipeline's role assumes this role."
                  },
                  "RunOrder": {
                    "type": "Number",
                    "required": false,
                    "description": "The order in which AWS CodePipeline runs this action."
                  },
                  "Region": {
                    "type": "String",
                    "required": false,
                    "description": "Specifies the action�s AWS Region, such as us-east-1."
                  }
                }
              },
              "Blockers": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "The gates included in a stage.",
                "properties": {
                  "Name": {
                    "type": "String",
                    "required": true,
                    "description": "The name of the gate declaration."
                  },
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The type of gate declaration.",
                    "allowed-values": [
                      "*",
                      "Schedule"
                    ]
                  }
                }
              },
              "Name": {
                "type": "String",
                "required": true,
                "description": "A name for this stage."
              }
            }
          },
          "ArtifactStores": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The Amazon Simple Storage Service (Amazon S3) location where AWS CodePipeline stores pipeline artifacts.",
            "properties": {
              "ArtifactStore": {
                "type": "Object",
                "required": true,
                "description": "The Amazon Simple Storage Service (Amazon S3) location where AWS CodePipeline stores pipeline artifacts.",
                "properties": {
                  "EncryptionKey": {
                    "type": "Object",
                    "required": false,
                    "description": "The encryption key AWS CodePipeline uses to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key.",
                    "properties": {
                      "Id": {
                        "type": "String",
                        "required": true,
                        "description": "The ID of the key.",
                        "resource-ref-type": "AWS::KMS::Key"
                      },
                      "Type": {
                        "type": "String",
                        "required": true,
                        "description": "The type of encryption key, such as KMS.",
                        "allowed-values": [
                          "*",
                          "KMS"
                        ]
                      }
                    }
                  },
                  "Location": {
                    "type": "String",
                    "required": true,
                    "description": "The name of the S3 bucket where AWS CodePipeline stores artifacts for a pipeline."
                  },
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The type of the artifact store, such as Amazon S3.",
                    "allowed-values": [
                      "*",
                      "S3"
                    ]
                  }
                }
              },
              "Region": {
                "type": "String",
                "required": true,
                "description": "Specifies the action�s AWS Region, such as us-east-1."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CodePipeline::Webhook": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CodePipeline::Webhook resource creates and registers your webhook.",
    "return-values": [
      {
        "name": "Url",
        "description": "The webhook URL generated by AWS CodePipeline, such as https://eu-central-1.webhooks.aws/trigger123456."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CodePipeline::Webhook resource creates and registers your webhook."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AuthenticationConfiguration": {
            "type": "Object",
            "required": true,
            "description": "Properties that configure the authentication applied to incoming webhook trigger requests.",
            "properties": {
              "AllowedIPRange": {
                "type": "String",
                "required": false,
                "description": "The property used to configure acceptance of webhooks within a specific IP range."
              },
              "SecretToken": {
                "type": "String",
                "required": false,
                "description": "The property used to configure GitHub authentication."
              }
            }
          },
          "Filters": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "A list of rules applied to the body/payload sent in the POST request to a webhook URL.",
            "properties": {
              "JsonPath": {
                "type": "String",
                "required": true,
                "description": "A JsonPath expression that will be applied to the body/payload of the webhook."
              },
              "MatchEquals": {
                "type": "String",
                "required": false,
                "description": "The value selected by the JsonPath expression must match what is supplied in the MatchEquals field, otherwise the request will be ignored."
              }
            }
          },
          "Authentication": {
            "type": "String",
            "required": true,
            "description": "The type of authentication scheme that allows the trigger request to be accepted."
          },
          "TargetPipeline": {
            "type": "String",
            "required": true,
            "description": "The name of the pipeline you want to connect to the webhook.",
            "resource-ref-type": [
              "*",
              "AWS::CodePipeline::Pipeline"
            ]
          },
          "TargetAction": {
            "type": "String",
            "required": true,
            "description": "The name of the action in a pipeline you want to connect to the webhook."
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "The name of the webhook to be created and, if applicable, to register with a supported third party."
          },
          "TargetPipelineVersion": {
            "type": "Number",
            "required": true,
            "description": "The version number of the pipeline to be connected to the trigger request."
          },
          "RegisterWithThirdParty": {
            "type": "Boolean",
            "required": false,
            "description": "ndicates whether to register the webhook with a third party"
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Cognito::IdentityPool": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Cognito::IdentityPool resource creates an Amazon Cognito identity pool.",
    "return-values": [
      {
        "name": "Name",
        "description": "The name of the Amazon Cognito identity pool, returned as a string."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Cognito::IdentityPool resource creates an Amazon Cognito identity pool."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "IdentityPoolName": {
            "type": "String",
            "required": false,
            "description": "The name of your Amazon Cognito identity pool."
          },
          "AllowUnauthenticatedIdentities": {
            "type": "Boolean",
            "required": true,
            "description": "Specifies whether the identity pool supports unauthenticated logins."
          },
          "DeveloperProviderName": {
            "type": "String",
            "required": false,
            "description": "The domain by which Amazon Cognito will refer to your users."
          },
          "SupportedLoginProviders": {
            "type": "Json",
            "required": false,
            "description": "Key-value pairs that map provider names to provider app IDs."
          },
          "CognitoIdentityProviders": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "An array of Amazon Cognito user pools and their client IDs.",
            "properties": {
              "ClientId": {
                "type": "String",
                "required": false,
                "description": "The client ID for the Amazon Cognito user pool."
              },
              "ProviderName": {
                "type": "String",
                "required": false,
                "description": "The provider name for an Amazon Cognito user pool."
              },
              "ServerSideTokenCheck": {
                "type": "Boolean",
                "required": false,
                "description": "TRUE if server-side token validation is enabled for the identity provider�s token."
              }
            }
          },
          "SamlProviderARNs": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": [
              "*"
            ],
            "description": "A list of Amazon Resource Names (ARNs) of Security Assertion Markup Language (SAML) providers. "
          },
          "OpenIdConnectProviderARNs": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": [
              "*"
            ],
            "description": "A list of ARNs for the OpendID Connect provider."
          },
          "CognitoStreams": {
            "type": "Object",
            "required": false,
            "description": "Configuration options for configuring Amazon Cognito streams.",
            "properties": {
              "RoleArn": {
                "type": "String",
                "required": false,
                "resource-ref-type": [
                  "AWS::IAM::Role"
                ],
                "description": "The Amazon Resource Name (ARN) of the role Amazon Cognito can assume to publish to the stream."
              },
              "StreamingStatus": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "ENABLED",
                  "DISABLED"
                ],
                "description": "Status of the Cognito streams. Valid values are: ENABLED or DISABLED."
              },
              "StreamName": {
                "type": "String",
                "required": false,
                "description": "The name of the Amazon Cognito stream to receive updates."
              }
            }
          },
          "PushSync": {
            "type": "Object",
            "required": false,
            "description": "Configuration options to be applied to the identity pool.",
            "properties": {
              "ApplicationArns": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "resource-ref-type": [
                  "*"
                ],
                "description": "List of Amazon SNS platform application ARNs that could be used by clients."
              },
              "RoleArn": {
                "type": "String",
                "required": false,
                "resource-ref-type": [
                  "AWS::IAM::Role"
                ],
                "description": "An IAM role configured to allow Amazon Cognito to call SNS on behalf of the developer."
              }
            }
          },
          "CognitoEvents": {
            "type": "Json",
            "required": false,
            "description": "The events to configure."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Cognito::IdentityPoolRoleAttachment": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Cognito::IdentityPoolRoleAttachment resource manages the role configuration for an Amazon Cognito identity pool.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Cognito::IdentityPoolRoleAttachment resource manages the role configuration for an Amazon Cognito identity pool."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "IdentityPoolId": {
            "type": "String",
            "required": true,
            "description": "An identity pool ID in the format REGION:GUID. "
          },
          "RoleMappings": {
            "type": "Json",
            "required": false,
            "description": "How users for a specific identity provider are to mapped to roles. This is a string to RoleMapping object map. The string identifies the identity provider."
          },
          "Roles": {
            "type": "Json",
            "required": false,
            "description": "The map of roles associated with this pool."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Cognito::UserPool": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Cognito::UserPool resource creates an Amazon Cognito user pool.",
    "return-values": [
      {
        "name": "ProviderName",
        "description": "The provider name of the Amazon Cognito user pool, specified as a String. "
      },
      {
        "name": "ProviderURL",
        "description": "The URL of the provider of the Amazon Cognito user pool, specified as a String. "
      },
      {
        "name": "Arn",
        "description": "The Amazon Resource Name (ARN) of the user pool "
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Cognito::UserPool resource creates an Amazon Cognito user pool."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AdminCreateUserConfig": {
            "type": "Object",
            "required": false,
            "description": "The type of configuration for creating a new user profile.",
            "properties": {
              "AllowAdminCreateUserOnly": {
                "type": "Boolean",
                "required": false,
                "description": "Set to True if only the administrator is allowed to create user profiles."
              },
              "InviteMessageTemplate": {
                "type": "Object",
                "required": false,
                "description": "The message template to be used for the welcome message to new users.",
                "properties": {
                  "EmailMessage": {
                    "type": "String",
                    "required": false,
                    "description": "The message template for email messages."
                  },
                  "EmailSubject": {
                    "type": "String",
                    "required": false,
                    "description": "The subject line for email messages."
                  },
                  "SMSMessage": {
                    "type": "String",
                    "required": false,
                    "description": "The message template for SMS messages."
                  }
                }
              },
              "UnusedAccountValidityDays": {
                "type": "Number",
                "required": false,
                "description": "The user account expiration limit, in days, after which the account is no longer usable."
              }
            }
          },
          "AliasAttributes": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "phone_number",
              "email",
              "preferred_username"
            ],
            "description": "Attributes supported as an alias for this user pool."
          },
          "AutoVerifiedAttributes": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "phone_number",
              "email"
            ],
            "description": "The attributes to be auto-verified."
          },
          "DeviceConfiguration": {
            "type": "Object",
            "required": false,
            "description": "The type of configuration for the user pool's device tracking.",
            "properties": {
              "ChallengeRequiredOnNewDevice": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether a challenge is required on a new device. Only applicable to a new device."
              },
              "DeviceOnlyRememberedOnUserPrompt": {
                "type": "Boolean",
                "required": false,
                "description": "If true, a device is only remembered on user prompt."
              }
            }
          },
          "EmailConfiguration": {
            "type": "Object",
            "required": false,
            "description": "The email configuration.",
            "properties": {
              "ReplyToEmailAddress": {
                "type": "String",
                "required": false,
                "description": "The REPLY-TO email address."
              },
              "SourceArn": {
                "type": "String",
                "required": false,
                "resource-ref-type": [
                  "*"
                ],
                "description": "The Amazon Resource Name (ARN) of the email source."
              }
            }
          },
          "EmailVerificationMessage": {
            "type": "String",
            "required": false,
            "description": "A string representing the email verification message. Must contain {####} in the description."
          },
          "EmailVerificationSubject": {
            "type": "String",
            "required": false,
            "description": "A string representing the email verification subject."
          },
          "LambdaConfig": {
            "type": "Object",
            "required": false,
            "description": "The AWS Lambda trigger configuration information for the Amazon Cognito user pool.",
            "properties": {
              "CreateAuthChallenge": {
                "type": "String",
                "required": false,
                "description": "Creates an authentication challenge."
              },
              "CustomMessage": {
                "type": "String",
                "required": false,
                "description": "A custom Message AWS Lambda trigger."
              },
              "DefineAuthChallenge": {
                "type": "String",
                "required": false,
                "description": "Defines the authentication challenge."
              },
              "PostAuthentication": {
                "type": "String",
                "required": false,
                "resource-ref-type": [
                  "AWS::Lambda::Function"
                ],
                "description": "A post-authentication AWS Lambda trigger."
              },
              "PostConfirmation": {
                "type": "String",
                "required": false,
                "resource-ref-type": [
                  "AWS::Lambda::Function"
                ],
                "description": "A post-confirmation AWS Lambda trigger."
              },
              "PreAuthentication": {
                "type": "String",
                "required": false,
                "resource-ref-type": [
                  "AWS::Lambda::Function"
                ],
                "description": "A pre-authentication AWS Lambda trigger."
              },
              "PreSignUp": {
                "type": "String",
                "required": false,
                "resource-ref-type": [
                  "AWS::Lambda::Function"
                ],
                "description": "A pre-registration AWS Lambda trigger."
              },
              "VerifyAuthChallengeResponse": {
                "type": "String",
                "required": false,
                "description": "Verifies the authentication challenge response."
              }
            }
          },
          "MfaConfiguration": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "OFF",
              "ON",
              "OPTIONAL"
            ],
            "description": "Specifies multi-factor authentication (MFA) configuration details."
          },
          "Policies": {
            "type": "Object",
            "required": false,
            "description": "The policies associated with the Amazon Cognito user pool.",
            "properties": {
              "PasswordPolicy": {
                "type": "Object",
                "required": false,
                "description": "Specifies information about the user pool password policy.",
                "properties": {
                  "RequireNumbers": {
                    "type": "Boolean",
                    "required": false,
                    "description": "In the password policy that you have set, refers to whether you have required users to use at least one number in their password."
                  },
                  "MinimumLength": {
                    "type": "Number",
                    "required": false,
                    "description": "The minimum length of the password policy that you have set. Cannot be less than 6."
                  },
                  "RequireUppercase": {
                    "type": "Boolean",
                    "required": false,
                    "description": "In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password."
                  },
                  "RequireLowercase": {
                    "type": "Boolean",
                    "required": false,
                    "description": "In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password."
                  },
                  "RequireSymbols": {
                    "type": "Boolean",
                    "required": false,
                    "description": "In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password."
                  }
                }
              }
            }
          },
          "UserPoolName": {
            "type": "String",
            "required": false,
            "description": "A string used to name the user pool."
          },
          "Schema": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "An array of schema attributes for the new user pool. These attributes can be standard or custom attributes.",
            "properties": {
              "AttributeDataType": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "*",
                  "String",
                  "Number",
                  "DateTime",
                  "Boolean"
                ],
                "description": "The attribute data type."
              },
              "DeveloperOnlyAttribute": {
                "type": "Boolean",
                "required": false,
                "description": "Specifies whether the attribute type is developer only."
              },
              "Mutable": {
                "type": "Boolean",
                "required": false,
                "description": "Specifies whether the attribute can be changed once it has been created. True means mutable and False means immutable."
              },
              "Name": {
                "type": "String",
                "required": false,
                "description": "A schema attribute of the name type."
              },
              "NumberAttributeConstraints": {
                "type": "Object",
                "required": false,
                "description": "Specifies the constraints for an attribute of the number type.",
                "properties": {
                  "MaxLength": {
                    "type": "String",
                    "required": false,
                    "description": "The maximum length of an attribute value of the number type."
                  },
                  "MinLength": {
                    "type": "String",
                    "required": false,
                    "description": "The minimum length of an attribute value of the number type."
                  },
                  "MinValue": {
                    "type": "String",
                    "required": false,
                    "description": "The minimum value of an attribute that is of the number data type."
                  },
                  "MaxValue": {
                    "type": "String",
                    "required": false,
                    "description": "The maximum value of an attribute that is of the number data type."
                  }
                }
              },
              "StringAttributeConstraints": {
                "type": "Object",
                "required": false,
                "description": "Specifies the constraints for an attribute of the string type.",
                "properties": {
                  "MaxLength": {
                    "type": "String",
                    "required": false,
                    "description": "The maximum length of an attribute value of the string type."
                  },
                  "MinLength": {
                    "type": "String",
                    "required": false,
                    "description": "The minimum length of an attribute value of the string type."
                  }
                }
              },
              "Required": {
                "type": "Boolean",
                "required": false,
                "description": "Specifies whether a user pool attribute is required."
              }
            }
          },
          "SmsAuthenticationMessage": {
            "type": "String",
            "required": false,
            "description": "A string representing the SMS authentication message. Must contain {####} in the message."
          },
          "SmsConfiguration": {
            "type": "Object",
            "required": false,
            "description": "The Short Message Service (SMS) configuration.",
            "properties": {
              "ExternalId": {
                "type": "String",
                "required": false,
                "description": "The external ID used in IAM role trust relationships."
              },
              "SnsCallerArn": {
                "type": "String",
                "required": false,
                "resource-ref-type": [
                  "*",
                  "AWS::SNS::Topic"
                ],
                "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller."
              }
            }
          },
          "SmsVerificationMessage": {
            "type": "String",
            "required": false,
            "description": "A string representing the SMS verification message. Must contain {####} in the message."
          },
          "UserPoolTags": {
            "type": "Json",
            "required": false,
            "description": "The cost allocation tags for the user pool."
          },
          "UsernameAttributes": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up.",
            "allowed-values": [
              "*",
              "phone_number",
              "email"
            ]
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Cognito::UserPoolClient": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Cognito::UserPoolClient resource creates an Amazon Cognito user pool client.",
    "return-values": [
      {
        "name": "ClientSecret",
        "description": "The client secret, as a String."
      },
      {
        "name": "Name",
        "description": "The name of the user pool client, as a String."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Cognito::UserPoolClient resource creates an Amazon Cognito user pool client."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ClientName": {
            "type": "String",
            "required": false,
            "description": "The client name for the user pool client that you want to create."
          },
          "ExplicitAuthFlows": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "ADMIN_NO_SRP_AUTH",
              "CUSTOM_AUTH_FLOW_ONLY"
            ],
            "description": "The explicit authentication flows, which can be one of the following: ADMIN_NO_SRP_AUTH or CUSTOM_AUTH_FLOW_ONLY."
          },
          "GenerateSecret": {
            "type": "Boolean",
            "required": false,
            "description": "Specifies whether you want to generate a secret for the user pool client being created."
          },
          "ReadAttributes": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The read attributes."
          },
          "RefreshTokenValidity": {
            "type": "String",
            "required": false,
            "description": "The time limit, in days, after which the refresh token is no longer valid."
          },
          "UserPoolId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Cognito::UserPool",
            "description": "The user pool ID for the user pool where you want to create a client."
          },
          "WriteAttributes": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The write attributes."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Cognito::UserPoolGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Cognito::UserPoolGroup resource creates a user group in an Amazon Cognito user pool.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Cognito::UserPoolGroup resource creates a user group in an Amazon Cognito user pool."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the user group."
          },
          "GroupName": {
            "type": "String",
            "required": true,
            "description": "The name of the user group. GroupName must be unique."
          },
          "Precedence": {
            "type": "Number",
            "required": false,
            "description": "A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool."
          },
          "RoleArn": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The role ARN for the group."
          },
          "UserPoolId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Cognito::UserPool",
            "description": "The user pool ID."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Cognito::UserPoolUser": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Cognito::UserPoolUser resource creates an Amazon Cognito user pool user.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Cognito::UserPoolUser resource creates an Amazon Cognito user pool user."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DesiredDeliveryMediums": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "EMAIL",
              "SMS"
            ],
            "description": "Specifies how the welcome message will be sent."
          },
          "ForceAliasCreation": {
            "type": "Boolean",
            "required": false,
            "description": "Use this parameter only if the phone_number_verified attribute or the email_verified attribute is set to True. Otherwise, it is ignored. The default value is False."
          },
          "UserAttributes": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "An array of name-value pairs that contain user attributes and attribute values to be set for the user that you are creating.",
            "properties": {
              "Name": {
                "type": "String",
                "required": true,
                "description": "The name of the attribute."
              },
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value of the attribute."
              }
            }
          },
          "MessageAction": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "RESEND",
              "SUPPRESS"
            ],
            "description": "Specifies the action you'd like to take for the message. Valid values are RESEND and SUPPRESS."
          },
          "Username": {
            "type": "String",
            "required": false,
            "description": "The user name for the user."
          },
          "UserPoolId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Cognito::UserPool",
            "description": "The ID for the user pool where the user will be created."
          },
          "ValidationData": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The user's validation data.",
            "properties": {
              "Name": {
                "type": "String",
                "required": true,
                "description": "The name of the attribute."
              },
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value of the attribute."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Cognito::UserPoolUserToGroupAttachment": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Cognito::UserPoolUserToGroupAttachment resource attaches a user to an Amazon Cognito user pool user group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Cognito::UserPoolUserToGroupAttachment resource attaches a user to an Amazon Cognito user pool user group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "GroupName": {
            "type": "String",
            "required": true,
            "description": "The name of the group."
          },
          "Username": {
            "type": "String",
            "required": true,
            "description": "The user's user name."
          },
          "UserPoolId": {
            "type": "String",
            "required": true,
            "description": "The ID of the user pool."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Config::AggregationAuthorization": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Config::AggregationAuthorization resource to grant permission to an aggregator account to collect your AWS Config data.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Config::AggregationAuthorization resource to grant permission to an aggregator account to collect your AWS Config data."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AuthorizedAccountId": {
            "type": "String",
            "required": true,
            "description": "The 12 digit account ID of the account authorized to aggregate data."
          },
          "AuthorizedAwsRegion": {
            "type": "String",
            "required": true,
            "description": "The region authorized to collect aggregated data."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Config::ConfigRule": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Config::ConfigRule resource uses an AWS Lambda (Lambda) function that evaluates configuration items to assess whether your AWS resources comply with your specified configurations.",
    "return-values": [
      {
        "name": "Arn",
        "description": "The Amazon Resource Name (ARN) of the AWS Config rule, such as arn:aws:config:us-east-1:123456789012:config-rule/config-rule-a1bzhi."
      },
      {
        "name": "Compliance.Type",
        "description": "The compliance status of an AWS Config rule, such as COMPLIANT or NON_COMPLIANT."
      },
      {
        "name": "ConfigRuleId",
        "description": "The ID of the AWS Config rule, such as config-rule-a1bzhi."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Config::ConfigRule resource uses an AWS Lambda (Lambda) function that evaluates configuration items to assess whether your AWS resources comply with your specified configurations."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ConfigRuleName": {
            "type": "String",
            "required": false,
            "description": "A name for the AWS Config rule. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the rule name."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description about this AWS Config rule."
          },
          "InputParameters": {
            "type": "Json",
            "required": false,
            "description": "Input parameter values that are passed to the AWS Config rule (Lambda function)."
          },
          "MaximumExecutionFrequency": {
            "type": "String",
            "required": false,
            "description": "The maximum frequency at which the AWS Config rule runs evaluations.",
            "allowed-values": [
              "*",
              "One_Hour",
              "Three_Hours",
              "Six_Hours",
              "Twelve_Hours",
              "TwentyFour_Hours"
            ]
          },
          "Scope": {
            "type": "Object",
            "required": false,
            "description": "Defines which AWS resources will trigger an evaluation when their configurations change.",
            "properties": {
              "ComplianceResourceId": {
                "type": "String",
                "required": false,
                "description": "The ID of an AWS resource that you want AWS Config to evaluate against a rule."
              },
              "ComplianceResourceTypes": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The ID of an AWS resource that you want AWS Config to evaluate against a rule.",
                "allowed-values": [
                  "*",
                  "AWS::EC2::Volume",
                  "AWS::EC2::Host",
                  "AWS::EC2::EIP",
                  "AWS::EC2::Instance",
                  "AWS::EC2::NetworkInterface",
                  "AWS::EC2::SecurityGroup",
                  "AWS::EC2::CustomerGateway",
                  "AWS::EC2::InternetGateway",
                  "AWS::EC2::NetworkAcl",
                  "AWS::EC2::RouteTable",
                  "AWS::EC2::Subnet",
                  "AWS::EC2::VPC",
                  "AWS::EC2::VPNConnection",
                  "AWS::EC2::VPNGateway",
                  "AWS::CloudTrail::Trail"
                ]
              },
              "TagKey": {
                "type": "String",
                "required": false,
                "description": "The tag key that is applied to the AWS resources that you want AWS Config to evaluate against the rule."
              },
              "TagValue": {
                "type": "String",
                "required": false,
                "description": "The tag value that is applied to the AWS resources that you want AWS Config to evaluate against the rule."
              }
            }
          },
          "Source": {
            "type": "Object",
            "required": true,
            "description": "Specifies the rule owner, the rule identifier, and the events that cause the function to evaluate your AWS resources.",
            "properties": {
              "Owner": {
                "type": "String",
                "required": true,
                "description": "Indicates who owns and manages the AWS Config rule.",
                "allowed-values": [
                  "*",
                  "CUSTOM_LAMBDA",
                  "AWS"
                ]
              },
              "SourceDetails": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "Provides the source and type of the event that causes AWS Config to evaluate your AWS resources.",
                "properties": {
                  "EventSource": {
                    "type": "String",
                    "required": true,
                    "description": "The source of the event, such as an AWS service, that triggers AWS Config to evaluate your AWS resources."
                  },
                  "MaximumExecutionFrequency": {
                    "type": "String",
                    "required": false,
                    "description": "The frequency that you want AWS Config to run evaluations for a custom rule with a periodic trigger.",
                    "allowed-values": [
                      "*",
                      "One_Hour",
                      "Three_Hours",
                      "Six_Hours",
                      "Twelve_Hours",
                      "TwentyFour_Hours"
                    ]
                  },
                  "MessageType": {
                    "type": "String",
                    "required": true,
                    "description": "The type of notification that triggers AWS Config to run an evaluation for a rule.",
                    "allowed-values": [
                      "*",
                      "ConfigurationItemChangeNotification",
                      "ConfigurationSnapshotDeliveryCompleted",
                      "ScheduledNotification",
                      "OversizedConfigurationItemChangeNotification"
                    ]
                  }
                }
              },
              "SourceIdentifier": {
                "type": "String",
                "required": true,
                "description": "For AWS managed rules, the identifier of the rule."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Config::ConfigurationAggregator": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Config::ConfigurationAggregator resource is an AWS Config resource type that collects AWS Config data from multiple accounts and regions.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Config::ConfigurationAggregator resource is an AWS Config resource type that collects AWS Config data from multiple accounts and regions."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AccountAggregationSources": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A collection of accounts and regions.",
            "properties": {
              "AllAwsRegions": {
                "type": "Boolean",
                "required": false,
                "description": "If true aggreagate existing AWS Config regions and future regions."
              },
              "AwsRegions": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The source regions being aggregated."
              },
              "AccountIds": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "description": "The 12 digit account ID of the account being aggregated."
              }
            }
          },
          "ConfigurationAggregatorName": {
            "type": "String",
            "required": true,
            "description": "The name of the configuration aggregator."
          },
          "OrganizationAggregationSource": {
            "type": "Object",
            "required": false,
            "description": "A collection of regions and IAM role to retrieve AWS Organizations details.",
            "properties": {
              "AllAwsRegions": {
                "type": "Boolean",
                "required": false,
                "description": "If true aggreagate existing AWS Config regions and future regions."
              },
              "AwsRegions": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The source regions being aggregated."
              },
              "RoleArn": {
                "type": "String",
                "required": true,
                "description": "The Amazon Resource Name (ARN) of the IAM role used to retreive AWS Organizations details associated with the aggregator account.",
                "resource-ref-type": "AWS::IAM::Role"
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Config::ConfigurationRecorder": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Config::ConfigurationRecorder resource describes the AWS resource types for which AWS Config records configuration changes. The configuration recorder stores the configurations of the supported resources in your account as configuration items.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Config::ConfigurationRecorder resource describes the AWS resource types for which AWS Config records configuration changes. The configuration recorder stores the configurations of the supported resources in your account as configuration items."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Name": {
            "type": "String",
            "required": false,
            "description": "A name for the configuration recorder."
          },
          "RecordingGroup": {
            "type": "Object",
            "required": false,
            "description": "Indicates whether to record configurations for all supported resources or for a list of resource types.",
            "properties": {
              "AllSupported": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether to record all supported resource types. If you specify this property, do not specify the ResourceTypes property."
              },
              "IncludeGlobalResourceTypes": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether AWS Config records all supported global resource types. "
              },
              "ResourceTypes": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "A name for the configuration recorder.",
                "allowed-values": [
                  "*",
                  "AWS::EC2::Volume",
                  "AWS::EC2::Host",
                  "AWS::EC2::EIP",
                  "AWS::EC2::Instance",
                  "AWS::EC2::NetworkInterface",
                  "AWS::EC2::SecurityGroup",
                  "AWS::EC2::CustomerGateway",
                  "AWS::EC2::InternetGateway",
                  "AWS::EC2::NetworkAcl",
                  "AWS::EC2::RouteTable",
                  "AWS::EC2::Subnet",
                  "AWS::EC2::VPC",
                  "AWS::EC2::VPNConnection",
                  "AWS::EC2::VPNGateway",
                  "AWS::CloudTrail::Trail",
                  "AWS::IAM::User",
                  "AWS::IAM::Group",
                  "AWS::IAM::Role",
                  "AWS::IAM::Policy"
                ]
              }
            }
          },
          "RoleARN": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that is used to make read or write requests to the delivery channel that you specify and to get configuration details for supported AWS resources."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Config::DeliveryChannel": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Config::DeliveryChannel resource describes where AWS Config stores configuration changes to an AWS resource.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Config::DeliveryChannel resource describes where AWS Config stores configuration changes to an AWS resource."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ConfigSnapshotDeliveryProperties": {
            "type": "Object",
            "required": false,
            "description": "Provides options for how AWS Config delivers configuration snapshots to the S3 bucket in your delivery channel.",
            "properties": {
              "DeliveryFrequency": {
                "type": "String",
                "required": false,
                "description": "The frequency with which AWS Config delivers configuration snapshots.",
                "allowed-values": [
                  "*",
                  "One_Hour",
                  "Three_Hours",
                  "Six_Hours",
                  "Twelve_Hours",
                  "TwentyFour_Hours"
                ]
              }
            }
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "A name for the delivery channel. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the delivery channel name."
          },
          "S3BucketName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::S3::Bucket",
            "description": "The name of an S3 bucket where you want to store configuration history for the delivery channel."
          },
          "S3KeyPrefix": {
            "type": "String",
            "required": false,
            "description": "A key prefix (folder) for the specified S3 bucket."
          },
          "SnsTopicARN": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::SNS::Topic",
            "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic that AWS Config delivers notifications to."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::DataPipeline::Pipeline": {
    "type": "Object",
    "required": false,
    "description": "Creates a data pipeline that you can use to automate the movement and transformation of data.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a data pipeline that you can use to automate the movement and transformation of data."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Activate": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether to validate and start the pipeline or stop an active pipeline. By default, the value is set to true."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description for the pipeline."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "A name for the pipeline. Because AWS CloudFormation assigns each new pipeline a unique identifier, you can use the same name for multiple pipelines that are associated with your AWS account."
          },
          "ParameterObjects": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Defines the variables that are in the pipeline definition.",
            "properties": {
              "Attributes": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "Key-value pairs that define the attributes of the parameter object.",
                "properties": {
                  "Key": {
                    "type": "String",
                    "required": true,
                    "description": "Specifies the name of a parameter attribute."
                  },
                  "StringValue": {
                    "type": "String",
                    "required": false,
                    "description": "A parameter attribute value."
                  }
                }
              },
              "Id": {
                "type": "String",
                "required": true,
                "description": "The identifier of the parameter object."
              }
            }
          },
          "ParameterValues": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Defines the values for the parameters that are defined in the ParameterObjects property.",
            "properties": {
              "Id": {
                "type": "String",
                "required": true,
                "description": "The ID of a parameter object."
              },
              "StringValue": {
                "type": "String",
                "required": true,
                "description": "A value to associate with the parameter object."
              }
            }
          },
          "PipelineObjects": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A list of pipeline objects that make up the pipeline.",
            "properties": {
              "Fields": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "Key-value pairs that define the properties of the object.",
                "properties": {
                  "Key": {
                    "type": "String",
                    "required": true,
                    "description": "Specifies the name of a field for a particular object."
                  },
                  "RefValue": {
                    "type": "String",
                    "required": false,
                    "description": "A field value that you specify as an identifier of another object in the same pipeline definition."
                  },
                  "StringValue": {
                    "type": "String",
                    "required": false,
                    "description": "A field value that you specify as a string."
                  }
                }
              },
              "Id": {
                "type": "String",
                "required": true,
                "description": "The ID of a parameter object."
              },
              "Name": {
                "type": "String",
                "required": true,
                "description": "Name of the object."
              }
            }
          },
          "PipelineTags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::DAX::Cluster": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS::DAX::Cluster resource to create a DAX cluster for use with Amazon DynamoDB.",
    "return-values": [
      {
        "name": "ClusterDiscoveryEndpoint",
        "description": "Returns the configuation endpoint of the DAX cluster."
      },
      {
        "name": "Arn",
        "description": "Returns the ARN of the DAX cluster."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS::DAX::Cluster resource to create a DAX cluster for use with Amazon DynamoDB."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the cluster."
          },
          "ReplicationFactor": {
            "type": "Number",
            "required": true,
            "description": "The number of nodes in the DAX cluster."
          },
          "ParameterGroupName": {
            "type": "String",
            "required": false,
            "description": "The parameter group to be associated with the DAX cluster."
          },
          "AvailabilityZones": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The Availability Zones (AZs) in which the cluster nodes will be created."
          },
          "NodeType": {
            "type": "String",
            "required": true,
            "description": "The compute and memory capacity of the nodes in the cluster."
          },
          "IAMRoleARN": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "A valid Amazon Resource Name (ARN) that identifies an IAM role."
          },
          "SubnetGroupName": {
            "type": "String",
            "required": false,
            "description": "The name of the subnet group to be used for the replication group."
          },
          "ClusterName": {
            "type": "String",
            "required": false,
            "description": "The cluster identifier. This parameter is stored as a lowercase string."
          },
          "PreferredMaintenanceWindow": {
            "type": "String",
            "required": false,
            "description": "Specifies the weekly time range during which maintenance on the DAX cluster is performed."
          },
          "NotificationTopicARN": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::SNS::Topic",
            "description": "The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications will be sent."
          },
          "SecurityGroupIds": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "description": "A list of security group IDs to be assigned to each node in the DAX cluster."
          },
          "Tags": {
            "type": "Json",
            "required": false,
            "description": "A map of tags to associate with the DAX cluster."
          },
          "SSESpecification": {
            "type": "Object",
            "required": false,
            "description": "Whether server-side encryption is enabled or not.",
            "properties": {
              "SSEEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Whether server-side encryption is enabled or not."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::DAX::ParameterGroup": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS CloudFormation AWS::DAX::ParameterGroup resource to create a parameter group for use with Amazon DynamoDB.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS CloudFormation AWS::DAX::ParameterGroup resource to create a parameter group for use with Amazon DynamoDB."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ParameterNameValues": {
            "type": "Json",
            "required": false,
            "description": "A map of DAX parameter names and values."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the parameter group."
          },
          "ParameterGroupName": {
            "type": "String",
            "required": false,
            "description": "The name of the parameter group."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::DAX::SubnetGroup": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS CloudFormation AWS::DAX::SubnetGroup resource to create a subnet group for use with DAX",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS CloudFormation AWS::DAX::SubnetGroup resource to create a subnet group for use with DAX"
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "The description of the subnet group."
          },
          "SubnetGroupName": {
            "type": "String",
            "required": false,
            "description": "The name of the subnet group."
          },
          "SubnetIds": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "resource-ref-type": "AWS::EC2::Subnet",
            "description": "A list of subnets associated with the subnet group."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::DirectoryService::MicrosoftAD": {
    "type": "Object",
    "required": false,
    "description": "The AWS::DirectoryService::MicrosoftAD resource creates a Microsoft Active Directory in AWS so that your directory users and groups can access the AWS Management Console and AWS applications using their existing credentials.",
    "return-values": [
      {
        "name": "Alias",
        "description": "The alias for a directory. For example: d-12373a053a or alias4-mydirectory-12345abcgmzsk (if you have the CreateAlias property set to true)."
      },
      {
        "name": "DnsIpAddresses",
        "description": "The IP addresses of the DNS servers for the directory."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::DirectoryService::MicrosoftAD resource creates a Microsoft Active Directory in AWS so that your directory users and groups can access the AWS Management Console and AWS applications using their existing credentials."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CreateAlias": {
            "type": "Boolean",
            "required": false,
            "description": "A unique alias to assign to the Microsoft Active Directory in AWS. "
          },
          "EnableSso": {
            "type": "Boolean",
            "required": false,
            "description": "Whether to enable single sign-on for a Microsoft Active Directory in AWS."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "The fully qualified name for the Microsoft Active Directory in AWS, such as corp.example.com."
          },
          "Password": {
            "type": "String",
            "required": true,
            "description": "The password for the default administrative user, Admin."
          },
          "ShortName": {
            "type": "String",
            "required": false,
            "description": "The NetBIOS name for your domain, such as CORP."
          },
          "VpcSettings": {
            "type": "Object",
            "required": true,
            "description": "Specifies the VPC settings of the Microsoft Active Directory server in AWS.",
            "properties": {
              "SubnetIds": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "description": "A list of at least two subnet IDs for the directory servers.",
                "resource-ref-type": "AWS::EC2::Subnet"
              },
              "VpcId": {
                "type": "String",
                "required": true,
                "description": "The VPC ID in which to create the Microsoft Active Directory server.",
                "resource-ref-type": "AWS::EC2::VPC"
              }
            }
          },
          "Edition": {
            "type": "String",
            "required": false,
            "description": "The AWS Microsoft AD edition. The default is Enterprise.",
            "allowed-values": [
              "*",
              "Standard",
              "Enterprise"
            ]
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::DirectoryService::SimpleAD": {
    "type": "Object",
    "required": false,
    "description": "The AWS::DirectoryService::SimpleAD resource creates an AWS Directory Service Simple Active Directory (Simple AD) in AWS so that you can seamlessly join Amazon Elastic Compute Cloud (Amazon EC2) Windows instances to your domain.",
    "return-values": [
      {
        "name": "Alias",
        "description": "The alias for a directory. For example: d-12373a053a or alias4-mydirectory-12345abcgmzsk (if you have the CreateAlias property set to true)."
      },
      {
        "name": "DnsIpAddresses",
        "description": "The IP addresses of the DNS servers for the directory."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::DirectoryService::SimpleAD resource creates an AWS Directory Service Simple Active Directory (Simple AD) in AWS so that you can seamlessly join Amazon Elastic Compute Cloud (Amazon EC2) Windows instances to your domain."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CreateAlias": {
            "type": "Boolean",
            "required": false,
            "description": "Creates an alias for a directory and assigns the alias to the directory."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the directory."
          },
          "EnableSso": {
            "type": "Boolean",
            "required": false,
            "description": "Whether to enable single-sign on for a directory."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "The fully qualified name for the directory, such as corp.example.com."
          },
          "Password": {
            "type": "String",
            "required": true,
            "description": "The password for the directory administrator. AWS Directory Service creates a directory administrator account with the user name Administrator and this password."
          },
          "ShortName": {
            "type": "String",
            "required": false,
            "description": "The short name of the directory, such as CORP."
          },
          "Size": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "Large",
              "Small",
              "*"
            ],
            "description": "The size of the directory."
          },
          "VpcSettings": {
            "type": "Object",
            "required": true,
            "description": "Specifies the VPC settings of the directory server.",
            "properties": {
              "SubnetIds": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "resource-ref-type": "AWS::EC2::Subnet",
                "description": "A list of at least two subnet IDs for the directory servers."
              },
              "VpcId": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::EC2::VPC",
                "description": "The VPC ID in which to create the Simple AD directory."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::DLM::LifecyclePolicy": {
    "type": "Object",
    "required": false,
    "description": "The AWS::DLM::LifecyclePolicy resource creates a lifecycle policy for Amazon Data Lifecycle Manager. ",
    "return-values": [
      {
        "name": "Arn",
        "description": "The Amazon Resource Name (ARN) of the policy."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::DLM::LifecyclePolicy resource creates a lifecycle policy for Amazon Data Lifecycle Manager. "
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ExecutionRoleArn": {
            "type": "String",
            "required": false,
            "description": "The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.",
            "resource-ref-type": "AWS::IAM::Role"
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "The description of the lifecycle policy."
          },
          "State": {
            "type": "String",
            "required": false,
            "description": "The activation state of the lifecycle policy."
          },
          "PolicyDetails": {
            "type": "Object",
            "required": false,
            "description": "The configuration of the lifecycle policy.",
            "properties": {
              "ResourceTypes": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The type of AWS resource.",
                "allowed-values": [
                  "*",
                  "VOLUME"
                ]
              },
              "Schedules": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "The schedule of policy-defined actions.",
                "properties": {
                  "TagsToAdd": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "The tags to apply to policy-created resources.",
                    "properties": {
                      "Value": {
                        "type": "String",
                        "required": false,
                        "description": "The value for the tag."
                      },
                      "Key": {
                        "type": "String",
                        "required": false,
                        "description": "The key name of the tag."
                      }
                    }
                  },
                  "CreateRule": {
                    "type": "Object",
                    "required": false,
                    "description": "The create rule for a policy.",
                    "properties": {
                      "IntervalUnit": {
                        "type": "String",
                        "required": true,
                        "description": "The time unit."
                      },
                      "Times": {
                        "type": "Array",
                        "array-type": "String",
                        "required": false,
                        "description": "The time, in UTC, to start the operation."
                      },
                      "Interval": {
                        "type": "Number",
                        "required": true,
                        "description": "The time interval between snapshots. Supported values are 12 and 24."
                      }
                    }
                  },
                  "RetainRule": {
                    "type": "Object",
                    "required": false,
                    "description": "The retention rule for a policy.",
                    "properties": {
                      "Count": {
                        "type": "Number",
                        "required": true,
                        "description": "The number of snapshots to keep for each volume, up to a maximum of 1000."
                      }
                    }
                  },
                  "Name": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the schedule."
                  },
                  "CopyTags": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Copy all user-defined tags on a source volume to snapshots of the volume created by a policy."
                  }
                }
              },
              "TargetTags": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "The single tag that identifies targeted resources for a policy.",
                "properties": {
                  "Value": {
                    "type": "String",
                    "required": false,
                    "description": "The value for the tag."
                  },
                  "Key": {
                    "type": "String",
                    "required": false,
                    "description": "The key name of the tag."
                  }
                }
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::DMS::Certificate": {
    "type": "Object",
    "required": false,
    "description": "The AWS::DMS::Certificate resource creates an SSL certificate that encrypts connections between AWS DMS endpoints and the replication instance.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::DMS::Certificate resource creates an SSL certificate that encrypts connections between AWS DMS endpoints and the replication instance."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CertificateIdentifier": {
            "type": "String",
            "required": false,
            "description": "The customer-assigned name of the certificate."
          },
          "CertificatePem": {
            "type": "String",
            "required": false,
            "description": "The contents of the .pem X.509 certificate file for the certificate."
          },
          "CertificateWallet": {
            "type": "String",
            "required": false,
            "description": "The location of the imported Oracle Wallet certificate for use with SSL."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::DMS::Endpoint": {
    "type": "Object",
    "required": false,
    "description": "The AWS::DMS::Endpoint resource creates an AWS DMS endpoint.",
    "return-values": [
      {
        "name": "ExternalId",
        "description": "Value returned by a call to CreateEndpoint that can be used for cross-account validation."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::DMS::Endpoint resource creates an AWS DMS endpoint."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "KmsKeyId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::KMS::Key",
            "description": "The KMS key identifier that will be used to encrypt the connection parameters."
          },
          "Port": {
            "type": "Number",
            "required": false,
            "description": "The port used by the endpoint database."
          },
          "DatabaseName": {
            "type": "String",
            "required": false,
            "description": "The name of the endpoint database."
          },
          "S3Settings": {
            "type": "Object",
            "required": false,
            "description": "Settings in JSON format for the target Amazon S3 endpoint.",
            "properties": {
              "ExternalTableDefinition": {
                "type": "String",
                "required": false,
                "description": "The definition of the external table."
              },
              "BucketName": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::S3::Bucket",
                "description": "The name of the Amazon S3 bucket."
              },
              "BucketFolder": {
                "type": "String",
                "required": false,
                "description": "An optional parameter to set a folder name in the S3 bucket."
              },
              "CsvRowDelimiter": {
                "type": "String",
                "required": false,
                "description": "The delimiter used to separate rows in the source files. The default is a carriage return (\n)."
              },
              "CsvDelimiter": {
                "type": "String",
                "required": false,
                "description": "The delimiter used to separate columns in the source files. The default is a comma."
              },
              "ServiceAccessRoleArn": {
                "type": "String",
                "required": false,
                "description": "The Amazon Resource Name (ARN) used by the service access IAM role."
              },
              "CompressionType": {
                "type": "String",
                "required": false,
                "description": "An optional parameter to use GZIP to compress the target files.",
                "allowed-values": [
                  "*",
                  "NONE",
                  "GZIP"
                ]
              }
            }
          },
          "EngineName": {
            "type": "String",
            "required": true,
            "description": "The type of engine for the endpoint.",
            "allowed-values": [
              "*",
              "MYSQL",
              "ORACLE",
              "POSTGRES",
              "MARIADB",
              "AURORA",
              "REDSHIFT",
              "S3",
              "SYBASE",
              "DYNAMODB",
              "MONGODB",
              "SQLSERVER"
            ]
          },
          "DynamoDbSettings": {
            "type": "Object",
            "required": false,
            "description": "Settings in JSON format for the target DynamoDB endpoint.",
            "properties": {
              "ServiceAccessRoleArn": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::IAM::Role",
                "description": "The Amazon Resource Name (ARN) used by the service access IAM role."
              }
            }
          },
          "Username": {
            "type": "String",
            "required": false,
            "description": "The user name to be used to login to the endpoint database."
          },
          "SslMode": {
            "type": "String",
            "required": false,
            "description": "The SSL mode to use for the SSL connection."
          },
          "ServerName": {
            "type": "String",
            "required": false,
            "description": "The name of the server where the endpoint database resides."
          },
          "ExtraConnectionAttributes": {
            "type": "String",
            "required": false,
            "description": "Additional attributes associated with the connection."
          },
          "EndpointType": {
            "type": "String",
            "required": true,
            "description": "The type of endpoint.",
            "allowed-values": [
              "*",
              "source",
              "target"
            ]
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach to the DMS endpoint.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          },
          "EndpointIdentifier": {
            "type": "String",
            "required": false,
            "description": "The database endpoint identifier."
          },
          "Password": {
            "type": "String",
            "required": false,
            "description": "The password to be used to login to the endpoint database."
          },
          "CertificateArn": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::CertificateManager::Certificate",
            "description": "The Amazon Resource Number (ARN) for the certificate."
          },
          "MongoDbSettings": {
            "type": "Object",
            "required": false,
            "description": "Settings in JSON format for the source MongoDB endpoint.",
            "properties": {
              "AuthSource": {
                "type": "String",
                "required": false,
                "description": "The authentication type you use to access the MongoDB source endpoint.",
                "allowed-values": [
                  "*",
                  "NO",
                  "PASSWORD"
                ]
              },
              "AuthMechanism": {
                "type": "String",
                "required": false,
                "description": "The authentication mechanism you use to access the MongoDB source endpoint.",
                "allowed-values": [
                  "*",
                  "DEFAULT",
                  "MONGODB_CR",
                  "SCRAM_SHA_1"
                ]
              },
              "Username": {
                "type": "String",
                "required": false,
                "description": "The user name you use to access the MongoDB source endpoint."
              },
              "DocsToInvestigate": {
                "type": "String",
                "required": false,
                "description": "Indicates the number of documents to preview to determine the document organization. "
              },
              "ServerName": {
                "type": "String",
                "required": false,
                "description": "The name of the server on the MongoDB source endpoint."
              },
              "Port": {
                "type": "Number",
                "required": false,
                "description": "The port value for the MongoDB source endpoint."
              },
              "ExtractDocId": {
                "type": "String",
                "required": false,
                "description": "Specifies the document ID."
              },
              "DatabaseName": {
                "type": "String",
                "required": false,
                "description": "The database name on the MongoDB source endpoint."
              },
              "AuthType": {
                "type": "String",
                "required": false,
                "description": "The authentication type you use to access the MongoDB source endpoint.",
                "allowed-values": [
                  "*",
                  "no",
                  "password"
                ]
              },
              "Password": {
                "type": "String",
                "required": false,
                "description": "The password for the user account you use to access the MongoDB source endpoint."
              },
              "NestingLevel": {
                "type": "String",
                "required": false,
                "description": "Specifies either document or table mode.",
                "allowed-values": [
                  "*",
                  "NONE",
                  "ONE"
                ]
              }
            }
          },
          "ElasticsearchSettings": {
            "type": "Object",
            "required": false,
            "description": "The settings for the Elasticsearch source endpoint.",
            "properties": {
              "EndpointUri": {
                "type": "String",
                "required": false,
                "description": "The endpoint for the ElasticSearch cluster."
              },
              "FullLoadErrorPercentage": {
                "type": "Number",
                "required": false,
                "description": "The maximum percentage of records that can fail to be written before a full load operation stops."
              },
              "ErrorRetryDuration": {
                "type": "Number",
                "required": false,
                "description": "The maximum number of seconds that DMS retries failed API requests to the Elasticsearch cluster."
              },
              "ServiceAccessRoleArn": {
                "type": "String",
                "required": false,
                "description": "The Amazon Resource Name (ARN) used by service to access the IAM role.",
                "resource-ref-type": "AWS::IAM::Role"
              }
            }
          },
          "KinesisSettings": {
            "type": "Object",
            "required": false,
            "description": "The settings for the Amazon Kinesis source endpoint.",
            "properties": {
              "MessageFormat": {
                "type": "String",
                "required": false,
                "description": "The output format for the records created on the endpoint."
              },
              "StreamArn": {
                "type": "String",
                "required": false,
                "description": "The Amazon Resource Name (ARN) for the Amazon Kinesis Data Streams endpoint.",
                "resource-ref-type": "AWS::Kinesis::Stream"
              },
              "ServiceAccessRoleArn": {
                "type": "String",
                "required": false,
                "description": "The Amazon Resource Name (ARN) for the IAM role that DMS uses to write to the Amazon Kinesis data stream.",
                "resource-ref-type": "AWS::IAM::Role"
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::DMS::EventSubscription": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS::DMS::EventSubscription resource to get notifications for AWS Database Migration Service events through the Amazon Simple Notification Service.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS::DMS::EventSubscription resource to get notifications for AWS Database Migration Service events through the Amazon Simple Notification Service."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "SourceType": {
            "type": "String",
            "required": false,
            "description": "The type of source for which AWS DMS provides notification events.",
            "allowed-values": [
              "*",
              "replication-instance",
              "migration-task"
            ]
          },
          "EventCategories": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "A list of event categories for a source type that you want to subscribe to."
          },
          "Enabled": {
            "type": "Boolean",
            "required": false,
            "description": "A Boolean value; set to true to activate the subscription, or set to false to create the subscription but not activate it."
          },
          "SubscriptionName": {
            "type": "String",
            "required": false,
            "description": "The name of the DMS event notification subscription."
          },
          "SnsTopicArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::SNS::Topic",
            "description": "The Amazon Resource Name (ARN) of the Amazon SNS topic created for event notification."
          },
          "SourceIds": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The list of identifiers of the event sources for which events will be returned."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A tag to be attached to the event subscription.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::DMS::ReplicationInstance": {
    "type": "Object",
    "required": false,
    "description": "he AWS::DMS::ReplicationInstance resource creates an AWS DMS replication instance.",
    "return-values": [
      {
        "name": "ReplicationInstancePublicIpAddresses",
        "description": ""
      },
      {
        "name": "ReplicationInstancePrivateIpAddresses",
        "description": ""
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "he AWS::DMS::ReplicationInstance resource creates an AWS DMS replication instance."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ReplicationInstanceIdentifier": {
            "type": "String",
            "required": false,
            "description": "A name for the replication instance. "
          },
          "EngineVersion": {
            "type": "String",
            "required": false,
            "description": "The engine version number of the replication instance."
          },
          "KmsKeyId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::KMS::Key",
            "description": "The KMS key identifier that will be used to encrypt the content on the replication instance."
          },
          "AvailabilityZone": {
            "type": "String",
            "required": false,
            "description": "The EC2 Availability Zone that the replication instance will be created in."
          },
          "PreferredMaintenanceWindow": {
            "type": "String",
            "required": false,
            "description": "The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC)."
          },
          "AutoMinorVersionUpgrade": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates that minor engine upgrades will be applied automatically to the replication instance during the maintenance window."
          },
          "ReplicationSubnetGroupIdentifier": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::DMS::ReplicationSubnetGroup",
            "description": "A subnet group to associate with the replication instance."
          },
          "AllocatedStorage": {
            "type": "Number",
            "required": false,
            "description": "The amount of storage (in gigabytes) to be initially allocated for the replication instance."
          },
          "VpcSecurityGroupIds": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "description": "Specifies the VPC security group to be used with the replication instance."
          },
          "AllowMajorVersionUpgrade": {
            "type": "Boolean",
            "required": false,
            "description": ""
          },
          "ReplicationInstanceClass": {
            "type": "String",
            "required": true,
            "description": "The compute and memory capacity of the replication instance as specified by the replication instance class."
          },
          "PubliclyAccessible": {
            "type": "Boolean",
            "required": false,
            "description": "Specifies the accessibility options for the replication instance."
          },
          "MultiAZ": {
            "type": "Boolean",
            "required": false,
            "description": "Specifies if the replication instance is a Multi-AZ deployment."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach to the DMS endpoint.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::DMS::ReplicationSubnetGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::DMS::ReplicationSubnetGroup resource creates an AWS DMS replication subnet group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::DMS::ReplicationSubnetGroup resource creates an AWS DMS replication subnet group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ReplicationSubnetGroupDescription": {
            "type": "String",
            "required": true,
            "description": "The description for the replication subnet group."
          },
          "ReplicationSubnetGroupIdentifier": {
            "type": "String",
            "required": false,
            "description": "The identifier for the replication subnet group."
          },
          "SubnetIds": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "resource-ref-type": "AWS::EC2::Subnet",
            "description": "The EC2 subnet IDs for the replication subnet group."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach to the AWS DMS replication subnet group.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::DMS::ReplicationTask": {
    "type": "Object",
    "required": false,
    "description": "The AWS::DMS::ReplicationTask resource creates an AWS DMS replication task.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::DMS::ReplicationTask resource creates an AWS DMS replication task."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ReplicationTaskSettings": {
            "type": "String",
            "required": false,
            "description": "Settings for the task, such as target metadata settings."
          },
          "TableMappings": {
            "type": "String",
            "required": true,
            "description": "The JSON that contains additional parameter values."
          },
          "ReplicationTaskIdentifier": {
            "type": "String",
            "required": false,
            "description": "The ARN string that uniquely identifies the endpoint."
          },
          "SourceEndpointArn": {
            "type": "String",
            "required": true,
            "description": "The ARN string that uniquely identifies the endpoint."
          },
          "MigrationType": {
            "type": "String",
            "required": true,
            "description": "The migration type.",
            "allowed-values": [
              "*",
              "full-load",
              "cdc",
              "full-load-and-cdc"
            ]
          },
          "TargetEndpointArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::DMS::Endpoint",
            "description": "The ARN string that uniquely identifies the endpoint."
          },
          "ReplicationInstanceArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::DMS::ReplicationInstance",
            "description": "The Amazon Resource Name (ARN) of the replication instance."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach to the migration task.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          },
          "CdcStartTime": {
            "type": "Number",
            "required": false,
            "description": "The start time for the Change Data Capture (CDC) operation."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::DocDB::DBCluster": {
    "type": "Object",
    "required": false,
    "description": "The AWS::DocDB::DBCluster Amazon DocumentDB (with MongoDB compatibility) resource describes a DBCluster. Amazon DocumentDB is a fully managed, MongoDB-compatible document database engine.",
    "return-values": [
      {
        "name": "ClusterResourceId",
        "description": "The resource id for the DB cluster; for example: cluster-ABCD1234EFGH5678IJKL90MNOP."
      },
      {
        "name": "Endpoint",
        "description": "\"The connection endpoint for the DB cluster, such as \"sample-cluster.cluster-cozrlsfrcjoc.us-east-1.docdb.amazonaws.com.\""
      },
      {
        "name": "Port",
        "description": "The port number on which the DB cluster accepts connections. For example: 27017."
      },
      {
        "name": "ReadEndpoint",
        "description": "The reader endpoint for the DB cluster. For example: sample-cluster.cluster-ro-cozrlsfrcjoc.us-east-1.docdb.amazonaws.com."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::DocDB::DBCluster Amazon DocumentDB (with MongoDB compatibility) resource describes a DBCluster. Amazon DocumentDB is a fully managed, MongoDB-compatible document database engine."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "StorageEncrypted": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the DB instances in the cluster are encrypted."
          },
          "EngineVersion": {
            "type": "String",
            "required": false,
            "description": "The version number of the database engine that you want to use."
          },
          "KmsKeyId": {
            "type": "String",
            "required": false,
            "description": "The Amazon Resource Name (ARN) of the AWS Key Management Service master key that is used to encrypt the DB instances in the DB cluster, such as arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.",
            "resource-ref-type": "AWS::KMS::Key"
          },
          "AvailabilityZones": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "A list of Availability Zones (AZs) in which DB instances in the cluster can be created."
          },
          "SnapshotIdentifier": {
            "type": "String",
            "required": false,
            "description": "The identifier for the DB cluster snapshot from which you want to restore."
          },
          "Port": {
            "type": "Number",
            "required": false,
            "description": "The port number on which the DB instances in the cluster can accept connections."
          },
          "DBClusterIdentifier": {
            "type": "String",
            "required": false,
            "description": "The DB cluster identifier. This parameter is stored as a lowercase string."
          },
          "PreferredMaintenanceWindow": {
            "type": "String",
            "required": false,
            "description": "The weekly time range (in UTC) during which system maintenance can occur."
          },
          "DBSubnetGroupName": {
            "type": "String",
            "required": false,
            "description": "A DB subnet group that you want to associate with this DB cluster."
          },
          "PreferredBackupWindow": {
            "type": "String",
            "required": false,
            "description": "If automated backups are enabled (see the BackupRetentionPeriod property), the daily time range in UTC during which automated backups are created."
          },
          "MasterUserPassword": {
            "type": "String",
            "required": false,
            "description": "The password for the master database user."
          },
          "VpcSecurityGroupIds": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "A list of VPC security groups to associate with this DB cluster."
          },
          "MasterUsername": {
            "type": "String",
            "required": false,
            "description": "The master user name for the DB instance."
          },
          "DBClusterParameterGroupName": {
            "type": "String",
            "required": false,
            "description": "A DB subnet group that you want to associate with this DB cluster."
          },
          "BackupRetentionPeriod": {
            "type": "Number",
            "required": false,
            "description": "The number of days for which automatic backups are retained."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A list of up to 50 tags.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::DocDB::DBClusterParameterGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::DocDB::DBClusterParameterGroup Amazon DocumentDB (with MongoDB compatibility) resource describes a DBClusterParameterGroup.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::DocDB::DBClusterParameterGroup Amazon DocumentDB (with MongoDB compatibility) resource describes a DBClusterParameterGroup."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": true,
            "description": "Provides the customer-specified description for this DB cluster parameter group."
          },
          "Parameters": {
            "type": "Json",
            "required": true,
            "description": "Provides the name of the DB cluster parameter group."
          },
          "Family": {
            "type": "String",
            "required": true,
            "description": "The DB cluster parameter group from which user created DB cluster parameter groups are created. For example, default.docdb3.6."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A list of up to 50 tags.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "Provides the name of the DB parameter group family that this DB cluster parameter group is compatible with."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::DocDB::DBInstance": {
    "type": "Object",
    "required": false,
    "description": "The AWS::DocDB::DBInstance Amazon DocumentDB (with MongoDB compatibility) resource describes a DBInstance.",
    "return-values": [
      {
        "name": "Endpoint",
        "description": "The connection endpoint for the DB instance. For example: sample-cluster.cluster-abcdefghijkl.us-east-1.docdb.amazonaws.com."
      },
      {
        "name": "Port",
        "description": "The port number on which the database accepts connections, such as 27017."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::DocDB::DBInstance Amazon DocumentDB (with MongoDB compatibility) resource describes a DBInstance."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DBInstanceClass": {
            "type": "String",
            "required": true,
            "description": "Contains the name of the compute and memory capacity class of the DB instance."
          },
          "DBClusterIdentifier": {
            "type": "String",
            "required": true,
            "description": "Specifies the DB cluster this DB instance is a member of."
          },
          "AvailabilityZone": {
            "type": "String",
            "required": false,
            "description": "Specifies the name of the Availability Zone the DB instance is located in."
          },
          "PreferredMaintenanceWindow": {
            "type": "String",
            "required": false,
            "description": "Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC)."
          },
          "AutoMinorVersionUpgrade": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates that minor version patches are applied automatically."
          },
          "DBInstanceIdentifier": {
            "type": "String",
            "required": false,
            "description": "The unique identifier for this DB instance."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A list of up to 50 tags.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::DocDB::DBSubnetGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::DocDB::DBSubnetGroup Amazon DocumentDB resource describes a DBSubnetGroup.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::DocDB::DBSubnetGroup Amazon DocumentDB resource describes a DBSubnetGroup."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DBSubnetGroupName": {
            "type": "String",
            "required": false,
            "description": "The name of the DB subnet group."
          },
          "DBSubnetGroupDescription": {
            "type": "String",
            "required": true,
            "description": "The description of the DB subnet group."
          },
          "SubnetIds": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "description": "List of subnet identifiers.",
            "resource-ref-type": "AWS::EC2::Subnet"
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A list of up to 50 tags.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::DynamoDB::Table": {
    "type": "Object",
    "required": false,
    "description": "Creates an Amazon DynamoDB table.",
    "return-values": [
      {
        "name": "StreamArn",
        "description": "The Amazon Resource Name (ARN) of the DynamoDB stream"
      },
      {
        "name": "Arn",
        "description": "The Amazon Resource Name (ARN) of the DynamoDB table, such as arn:aws:dynamodb:us-east-2:123456789012:table/myDynamoDBTable."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an Amazon DynamoDB table."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AttributeDefinitions": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "A list of AttributeName and AttributeValue objects that describe the key schema for the table and indexes.",
            "properties": {
              "AttributeName": {
                "type": "String",
                "required": true,
                "description": "The name of an attribute. Attribute names can be 1 � 255 characters long and have no character restrictions."
              },
              "AttributeType": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "S",
                  "N",
                  "B"
                ],
                "description": "The data type for the attribute. You can specify S for string data, N for numeric data, or B for binary data."
              }
            }
          },
          "GlobalSecondaryIndexes": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Global secondary indexes to be created on the table. You can create up to 5 global secondary indexes.",
            "properties": {
              "IndexName": {
                "type": "String",
                "required": true,
                "description": "The name of the global secondary index. The index name can be 3 � 255 characters long and have no character restrictions."
              },
              "KeySchema": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "The complete index key schema for the global secondary index, which consists of one or more pairs of attribute names and key types.",
                "properties": {
                  "AttributeName": {
                    "type": "String",
                    "required": true,
                    "description": "The attribute name that is used as the primary key for this Global Secondary Index. Primary key element names can be 1 � 255 characters long and have no character restrictions."
                  },
                  "KeyType": {
                    "type": "String",
                    "required": true,
                    "allowed-values": [
                      "HASH",
                      "RANGE"
                    ],
                    "description": "Represents the attribute data, consisting of the data type and the attribute value itself. You can specify HASH or RANGE."
                  }
                }
              },
              "Projection": {
                "type": "Object",
                "required": true,
                "description": "Attributes that are copied (projected) from the source table into the index. These attributes are additions to the primary key attributes and index key attributes, which are automatically projected.",
                "properties": {
                  "NonKeyAttributes": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "description": "The non-key attribute names that are projected into the index."
                  },
                  "ProjectionType": {
                    "type": "String",
                    "required": true,
                    "allowed-values": [
                      "KEYS_ONLY",
                      "INCLUDE",
                      "ALL"
                    ],
                    "description": "The set of attributes that are projected into the index."
                  }
                }
              },
              "ProvisionedThroughput": {
                "type": "Object",
                "required": true,
                "description": "The provisioned throughput settings for the index.",
                "properties": {
                  "ReadCapacityUnits": {
                    "type": "Number",
                    "required": true,
                    "description": "Sets the desired minimum number of consistent reads of items (of up to 1KB in size) per second for the specified index before Amazon DynamoDB balances the load."
                  },
                  "WriteCapacityUnits": {
                    "type": "Number",
                    "required": true,
                    "description": "Sets the desired minimum number of consistent writes of items (of up to 1KB in size) per second for the specified index before Amazon DynamoDB balances the load."
                  }
                }
              },
              "StreamSpecification": {
                "type": "Object",
                "required": false,
                "description": "The settings for the DynamoDB table stream, which capture changes to items stored in the table.",
                "properties": {
                  "StreamViewType": {
                    "type": "String",
                    "required": true,
                    "description": "The attribute name that is used as the primary key for this Global Secondary Index. Primary key element names can be 1 � 255 characters long and have no character restrictions.",
                    "allowed-values": [
                      "KEYS_ONLY",
                      "NEW_IMAGE",
                      "OLD_IMAGE",
                      "NEW_AND_OLD_IMAGES",
                      "*"
                    ]
                  }
                }
              }
            }
          },
          "KeySchema": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "The complete index key schema for the global secondary index, which consists of one or more pairs of attribute names and key types.",
            "properties": {
              "AttributeName": {
                "type": "String",
                "required": true,
                "description": "The attribute name that is used as the primary key for this Global Secondary Index. Primary key element names can be 1 � 255 characters long and have no character restrictions."
              },
              "KeyType": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "HASH",
                  "RANGE"
                ],
                "description": "Represents the attribute data, consisting of the data type and the attribute value itself. You can specify HASH or RANGE."
              }
            }
          },
          "LocalSecondaryIndexes": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Local secondary indexes to be created on the table. You can create up to 5 local secondary indexes. Each index is scoped to a given hash key value. The size of each hash key can be up to 10 gigabytes.",
            "properties": {
              "IndexName": {
                "type": "String",
                "required": true,
                "description": "The name of the local secondary index. The index name can be 3 � 255 characters long and have no character restrictions."
              },
              "KeySchema": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "The complete index key schema for the local secondary index, which consists of one or more pairs of attribute names and key types.",
                "properties": {
                  "AttributeName": {
                    "type": "String",
                    "required": true,
                    "description": "The attribute name that is used as the primary key for this local secondary index. Primary key element names can be 1 � 255 characters long and have no character restrictions."
                  },
                  "KeyType": {
                    "type": "String",
                    "required": true,
                    "allowed-values": [
                      "HASH",
                      "RANGE"
                    ],
                    "description": "Represents the attribute data, consisting of the data type and the attribute value itself. You can specify HASH or RANGE."
                  }
                }
              },
              "Projection": {
                "type": "Object",
                "required": true,
                "description": "Attributes that are copied (projected) from the source table into the index. These attributes are additions to the primary key attributes and index key attributes, which are automatically projected.",
                "properties": {
                  "NonKeyAttributes": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "description": "The non-key attribute names that are projected into the index."
                  },
                  "ProjectionType": {
                    "type": "String",
                    "required": true,
                    "allowed-values": [
                      "KEYS_ONLY",
                      "INCLUDE",
                      "ALL"
                    ],
                    "description": "The set of attributes that are projected into the index."
                  }
                }
              }
            }
          },
          "ProvisionedThroughput": {
            "type": "Object",
            "required": true,
            "description": "New throughput for the specified table, consisting of values for ReadCapacityUnits and WriteCapacityUnits.",
            "properties": {
              "ReadCapacityUnits": {
                "type": "Number",
                "required": true,
                "description": "Sets the desired minimum number of consistent reads of items (of up to 1KB in size) per second for the specified table before Amazon DynamoDB balances the load."
              },
              "WriteCapacityUnits": {
                "type": "Number",
                "required": true,
                "description": "Sets the desired minimum number of consistent writes of items (of up to 1KB in size) per second for the specified table before Amazon DynamoDB balances the load."
              }
            }
          },
          "StreamSpecification": {
            "type": "Object",
            "required": false,
            "description": "The settings for the DynamoDB table stream, which capture changes to items stored in the table.",
            "properties": {
              "StreamViewType": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "KEYS_ONLY",
                  "NEW_IMAGE",
                  "OLD_IMAGE",
                  "NEW_AND_OLD_IMAGES",
                  "*"
                ],
                "description": "Determines the information that the stream captures when an item in the table is modified."
              }
            }
          },
          "TableName": {
            "type": "String",
            "required": false,
            "description": "A name for the table. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the table name."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Specifies an arbitrary set of tags (key–value pairs) to associate with this table. Use tags to manage your resources.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          },
          "TimeToLiveSpecification": {
            "type": "Object",
            "required": false,
            "description": "Specifies the Time to Live (TTL) settings for the table.",
            "properties": {
              "AttributeName": {
                "type": "String",
                "required": true,
                "description": "The name of the TTL attribute that stores the expiration time for items in the table. The name can be 1–255 characters long, and has no character restrictions."
              },
              "Enabled": {
                "type": "Boolean",
                "required": true,
                "description": "Indicates whether to enable (by specifying true) or disable (by specifying false) TTL on the table."
              }
            }
          },
          "PointInTimeRecoverySpecification": {
            "type": "Object",
            "required": false,
            "description": "The settings used to enable point in time recovery.",
            "properties": {
              "PointInTimeRecoveryEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether point in time recovery is enabled (true) or disabled (false) on the table."
              }
            }
          },
          "SSESpecification": {
            "type": "Object",
            "required": false,
            "description": "Specifies the settings to enable server-side encryption.",
            "properties": {
              "SSEEnabled": {
                "type": "Boolean",
                "required": true,
                "description": "Whether server-side encryption is enabled or not."
              }
            }
          },
          "BillingMode": {
            "type": "String",
            "required": false,
            "description": "Specify how you are charged for read and write throughput and how you manage capacity.",
            "allowed-values": [
              "*",
              "PROVISIONED",
              "PAY_PER_REQUEST"
            ]
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::CustomerGateway": {
    "type": "Object",
    "required": false,
    "description": "Provides information to AWS about your VPN customer gateway device.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Provides information to AWS about your VPN customer gateway device."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Type": {
            "type": "String",
            "required": true,
            "description": "The type of VPN connection this customer gateway supports.  For example: ipsec.1"
          },
          "IpAddress": {
            "type": "String",
            "required": true,
            "description": "The Internet-routable IP address for the customer gateway's outside interface. The address must be static."
          },
          "BgpAsn": {
            "type": "Number",
            "required": true,
            "description": "The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN)."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::DHCPOptions": {
    "type": "Object",
    "required": false,
    "description": "Creates a set of DHCP options for your VPC.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a set of DHCP options for your VPC."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DomainName": {
            "type": "String",
            "required": true,
            "description": "A domain name of your choice.  Example: example.com"
          },
          "DomainNameServers": {
            "type": "Array",
            "array-type": "String",
            "allowed-values": [
              "AmazonProvidedDNS",
              "*"
            ],
            "required": true,
            "description": "The IP (IPv4) address of a domain name server. You can specify up to four addresses. Example: 10.0.0.1"
          },
          "NtpServers": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "description": "The IP address of a Network Time Protocol (NTP) server. You can specify up to four addresses. Example: 10.0.0.1"
          },
          "NetbiosNameServers": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "description": "The IP address (IPv4) of a NetBIOS name server. You can specify up to four addresses. Example: 10.0.0.1"
          },
          "NetbiosNodeType": {
            "type": "Array",
            "array-type": "Number",
            "allowed-values": [
              1,
              2,
              4,
              8,
              "*"
            ],
            "required": true,
            "description": "Value indicating the NetBIOS node type (1, 2, 4, or 8). We recommend you only use 2 at this time (broadcast and multicast are currently not supported)."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::EC2Fleet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::EC2Fleet resource specifies the configuration information to launch a fleet�or group�of instances.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::EC2Fleet resource specifies the configuration information to launch a fleet�or group�of instances."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "TargetCapacitySpecification": {
            "type": "Object",
            "required": true,
            "description": "The TotalTargetCapacity, OnDemandTargetCapacity, SpotTargetCapacity, and DefaultCapacityType structure.",
            "properties": {
              "DefaultTargetCapacityType": {
                "type": "String",
                "required": false,
                "description": "The default TotalTargetCapacity, which is either Spot or On-Demand."
              },
              "TotalTargetCapacity": {
                "type": "Number",
                "required": true,
                "description": "The number of units to request, filled using DefaultTargetCapacityType."
              },
              "OnDemandTargetCapacity": {
                "type": "Number",
                "required": false,
                "description": "The number of On-Demand units to request."
              },
              "SpotTargetCapacity": {
                "type": "Number",
                "required": false,
                "description": "The number of Spot units to request."
              }
            }
          },
          "OnDemandOptions": {
            "type": "Object",
            "required": false,
            "description": "The allocation strategy of On-Demand Instances in an EC2 Fleet.",
            "properties": {
              "AllocationStrategy": {
                "type": "String",
                "required": false,
                "description": "The order of the launch template overrides to use in fulfilling On-Demand capacity."
              }
            }
          },
          "Type": {
            "type": "String",
            "required": false,
            "description": "The type of the request.",
            "allowed-values": [
              "*",
              "instant",
              "request",
              "maintain"
            ]
          },
          "ExcessCapacityTerminationPolicy": {
            "type": "String",
            "required": false,
            "description": "Indicates whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet."
          },
          "TagSpecifications": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The key-value pair for tagging the EC2 Fleet request on creation. ",
            "properties": {
              "ResourceType": {
                "type": "String",
                "required": false,
                "description": "The type of resource to tag.",
                "allowed-values": [
                  "*",
                  "fleet",
                  "dedicated-host",
                  "instance",
                  "snapshot",
                  "volume"
                ]
              },
              "Tags": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "One or more tags.",
                "properties": {
                  "Value": {
                    "type": "String",
                    "required": false,
                    "description": "The value for the tag."
                  },
                  "Key": {
                    "type": "String",
                    "required": false,
                    "description": "The key name of the tag."
                  }
                }
              }
            }
          },
          "SpotOptions": {
            "type": "Object",
            "required": false,
            "description": "Describes the configuration of Spot Instances in an EC2 Fleet.",
            "properties": {
              "AllocationStrategy": {
                "type": "String",
                "required": false,
                "description": "Indicates how to allocate the target capacity across the Spot pools specified by the Spot Fleet request."
              },
              "InstanceInterruptionBehavior": {
                "type": "String",
                "required": false,
                "description": "The behavior when a Spot Instance is interrupted."
              },
              "InstancePoolsToUseCount": {
                "type": "Number",
                "required": false,
                "description": "The number of Spot pools across which to allocate your target Spot capacity."
              }
            }
          },
          "ValidFrom": {
            "type": "String",
            "required": false,
            "description": "The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately."
          },
          "ReplaceUnhealthyInstances": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether EC2 Fleet should replace unhealthy instances."
          },
          "LaunchTemplateConfigs": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "The configuration for the EC2 Fleet.",
            "properties": {
              "LaunchTemplateSpecification": {
                "type": "Object",
                "required": false,
                "description": "The launch template to use.",
                "properties": {
                  "LaunchTemplateName": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the launch template."
                  },
                  "Version": {
                    "type": "String",
                    "required": false,
                    "description": "The version number of the launch template."
                  },
                  "LaunchTemplateId": {
                    "type": "String",
                    "required": false,
                    "description": "The ID of the launch template.",
                    "resource-ref-type": "AWS::EC2::LaunchTemplate"
                  }
                }
              },
              "Overrides": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "Any parameters that you specify override the same parameters in the launch template.",
                "properties": {
                  "WeightedCapacity": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of units provided by the specified instance type."
                  },
                  "Priority": {
                    "type": "Number",
                    "required": false,
                    "description": "The priority for the launch template override."
                  },
                  "AvailabilityZone": {
                    "type": "String",
                    "required": false,
                    "description": "The Availability Zone in which to launch the instances."
                  },
                  "SubnetId": {
                    "type": "String",
                    "required": false,
                    "description": "The ID of the subnet in which to launch the instances.",
                    "resource-ref-type": "AWS::EC2::Subnet"
                  },
                  "InstanceType": {
                    "type": "String",
                    "required": false,
                    "description": "The instance type."
                  },
                  "MaxPrice": {
                    "type": "String",
                    "required": false,
                    "description": "The maximum price per unit hour that you are willing to pay for a Spot Instance."
                  }
                }
              }
            }
          },
          "TerminateInstancesWithExpiration": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether running instances should be terminated when the EC2 Fleet expires."
          },
          "ValidUntil": {
            "type": "String",
            "required": false,
            "description": "The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ)."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::EgressOnlyInternetGateway": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::EgressOnlyInternetGateway resource creates an egress-only Internet gateway for your VPC (over IPv6 only).",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::EgressOnlyInternetGateway resource creates an egress-only Internet gateway for your VPC (over IPv6 only)."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "VpcId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::EC2::Vpc",
            "description": "The ID of the VPC for which to create the egress-only Internet gateway."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::EIP": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::EIP resource allocates an Elastic IP (EIP) address and can, optionally, associate it with an Amazon EC2 instance.",
    "return-values": [
      {
        "name": "AllocationId",
        "description": "The ID that AWS assigns to represent the allocation of the address for use with Amazon VPC. THis is returned only for VPC elastic IP addresses. Example return value: eipalloc-5723d13e"
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::EIP resource allocates an Elastic IP (EIP) address and can, optionally, associate it with an Amazon EC2 instance."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "InstanceId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::Instance",
            "description": "The Instance ID of the Amazon EC2 instance that you want to associate with this Elastic IP address."
          },
          "Domain": {
            "type": "String",
            "required": false,
            "description": "Set to \"vpc\" to allocate the address to your Virtual Private Cloud (VPC). No other values are supported.",
            "allowed-values": [
              "*",
              "vpc"
            ]
          },
          "PublicIpv4Pool": {
            "type": "String",
            "required": false,
            "description": "Specifies the ID of an address pool that you own to let Amazon EC2 select an address from the address pool."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::EIPAssociation": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::EIPAssociation resource associates an Elastic IP address with an Amazon EC2 instance. The Elastic IP address can be an existing Elastic IP address or an Elastic IP address allocated through an AWS::EC2::EIP resource.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::EIPAssociation resource associates an Elastic IP address with an Amazon EC2 instance. The Elastic IP address can be an existing Elastic IP address or an Elastic IP address allocated through an AWS::EC2::EIP resource."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AllocationId": {
            "type": "String",
            "required": false,
            "description": "Allocation ID for the VPC Elastic IP address you want to associate with an Amazon EC2 instance in your VPC."
          },
          "EIP": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::EIP",
            "description": "Elastic IP address that you want to associate with the Amazon EC2 instance specified by the InstanceId property. You can specify an existing Elastic IP address or a reference to an Elastic IP address allocated with a AWS::EC2::EIP resource."
          },
          "InstanceId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::Instance",
            "description": "Instance ID of the Amazon EC2 instance that you want to associate with the Elastic IP address specified by the EIP property."
          },
          "NetworkInterfaceId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::NetworkInterface",
            "description": "The ID of the network interface to associate with the Elastic IP address (VPC only)."
          },
          "PrivateIpAddress": {
            "type": "String",
            "required": false,
            "description": "The private IP address that you want to associate with the Elastic IP address. The private IP address is restricted to the primary and secondary private IP addresses that are associated with the network interface. By default, the private IP address that is associated with the EIP is the primary private IP address of the network interface."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::FlowLog": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::FlowLog resource creates an Amazon Elastic Compute Cloud (Amazon EC2) flow log that captures IP traffic for a specified network interface, subnet, or VPC.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::FlowLog resource creates an Amazon Elastic Compute Cloud (Amazon EC2) flow log that captures IP traffic for a specified network interface, subnet, or VPC."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DeliverLogsPermissionArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account."
          },
          "LogGroupName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Logs::LogGroup",
            "description": "The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes your flow logs."
          },
          "ResourceId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "*",
            "description": "The ID of the subnet, network interface, or VPC for which you want to create a flow log."
          },
          "ResourceType": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "*",
              "VPC",
              "Subnet",
              "NetworkInterface"
            ],
            "description": "The type of resource that you specified in the ResourceId property. For example, if you specified a VPC ID for the ResourceId property, specify VPC for this property."
          },
          "TrafficType": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "*",
              "ACCEPT",
              "REJECT",
              "ALL"
            ],
            "description": "The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic."
          },
          "LogDestination": {
            "type": "String",
            "required": false,
            "description": "Specifies the destination to which the flow log data is to be published.",
            "allowed-values": [
              "*"
            ]
          },
          "LogDestinationType": {
            "type": "String",
            "required": false,
            "description": "Specifies the type of destination to which the flow log data is to be published. Flow log data can be published to CloudWatch Logs or Amazon S3.",
            "allowed-values": [
              "*",
              "cloud-watch-logs",
              "S3"
            ]
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::Host": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::Host resource allocates a fully dedicated physical server for launching EC2 instances.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::Host resource allocates a fully dedicated physical server for launching EC2 instances."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AutoPlacement": {
            "type": "String",
            "required": false,
            "description": "Indicates if the host accepts EC2 instances with only matching configurations or if instances must also specify the host ID."
          },
          "AvailabilityZone": {
            "type": "String",
            "required": true,
            "description": "The Availability Zone (AZ) in which to launch the dedicated host."
          },
          "InstanceType": {
            "type": "String",
            "required": false,
            "description": "The instance type that the dedicated host accepts.",
            "allowed-values": [
              "*",
              "t1.micro",
              "t2.nano",
              "t2.micro",
              "t2.small",
              "t2.medium",
              "t2.large",
              "m1.small",
              "m1.medium",
              "m1.large",
              "m1.xlarge",
              "m2.xlarge",
              "m2.2xlarge",
              "m2.4xlarge",
              "m3.medium",
              "m3.large",
              "m3.xlarge",
              "m3.2xlarge",
              "m4.large",
              "m4.xlarge",
              "m4.2xlarge",
              "m4.4xlarge",
              "m4.10xlarge",
              "m4.16xlarge",
              "c1.medium",
              "c1.xlarge",
              "cr1.8xlarge",
              "c3.large",
              "c3.xlarge",
              "c3.2xlarge",
              "c3.4xlarge",
              "c3.8xlarge",
              "c4.large",
              "c4.xlarge",
              "c4.2xlarge",
              "c4.4xlarge",
              "c4.8xlarge",
              "cc1.4xlarge",
              "cc2.8xlarge",
              "cg1.4xlarge",
              "d2.xlarge",
              "d2.2xlarge",
              "d2.4xlarge",
              "d2.8xlarge",
              "g2.2xlarge",
              "g2.8xlarge",
              "hi1.4xlarge",
              "hs1.8xlarge",
              "i2.xlarge",
              "i2.2xlarge",
              "i2.4xlarge",
              "i2.8xlarge",
              "p2.xlarge",
              "p2.8xlarge",
              "p2.16xlarge",
              "r3.large",
              "r3.xlarge",
              "r3.2xlarge",
              "r3.4xlarge",
              "r3.8xlarge",
              "x1.32xlarge"
            ]
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::Instance": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::Instance type creates an Amazon EC2 instance.",
    "return-values": [
      {
        "name": "AvailabilityZone",
        "description": "The availability zone where the specified instance is launched. For example: us-east-1b."
      },
      {
        "name": "PrivateDnsName",
        "description": "The private DNS name of the specified instance. For example: ip-10-24-34-0.ec2.internal"
      },
      {
        "name": "PublicDnsName",
        "description": "The public DNS name of the specified instance. For example: ec2-107-20-50-45.compute-1.amazonaws.com"
      },
      {
        "name": "PrivateIp",
        "description": "The private IP address of the specified instance. For example: 10.24.34.0"
      },
      {
        "name": "PublicIp",
        "description": "The public IP address of the specified instance. For example: 192.0.2.0"
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::Instance type creates an Amazon EC2 instance."
      },
      "CreationPolicy": {
        "type": "Object",
        "required": false,
        "description": "The CreationPolicy prevents the resource's status from reaching create complete until AWS CloudFormation receives a specified number of success signals or the timeout period is exceeded.",
        "properties": {
          "ResourceSignal": {
            "type": "Object",
            "required": true,
            "description": "Signal configuration.",
            "properties": {
              "Count": {
                "type": "Number",
                "required": false,
                "description": "The number of success signals AWS CloudFormation must receive before it sets the resource status as CREATE_COMPLETE."
              },
              "Timeout": {
                "type": "String",
                "required": false,
                "description": "The length of time that AWS CloudFormation waits for the number of signals that was specified in the Count property. The value must be in ISO8601 duration format, in the form: PT#H#M#S, where each # is the number of hours, minutes, and seconds, respectively. Default: PT5M (5 minutes)"
              }
            }
          }
        }
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Affinity": {
            "type": "String",
            "required": false,
            "description": "Indicates whether Amazon Elastic Compute Cloud (Amazon EC2) always associates the instance with a dedicated host."
          },
          "AvailabilityZone": {
            "type": "String",
            "required": false,
            "description": "Specifies the name of the availability zone in which the instance is located. If not specified, the default availability zone for the region will be used.",
            "allowed-values": [
              "us-east-1b",
              "us-east-1c",
              "us-east-1d",
              "us-east-1e",
              "us-west-1b",
              "us-west-1c",
              "us-west-2a",
              "us-west-2b",
              "us-west-2c",
              "ap-northeast-1a",
              "ap-northeast-1c",
              "ap-northeast-2a",
              "ap-northeast-2c",
              "ap-south-1a",
              "ap-south-1b",
              "ap-southeast-1a",
              "ap-southeast-1b",
              "ap-southeast-2a",
              "ap-southeast-2b",
              "ap-southeast-2c",
              "sa-east-1a",
              "sa-east-1b",
              "sa-east-1c",
              "eu-west-1a",
              "eu-west-1b",
              "eu-west-1c",
              "eu-central-1a",
              "eu-central-1b"
            ]
          },
          "BlockDeviceMappings": {
            "array-type": "Object",
            "type": "Array",
            "required": false,
            "description": "Defines a set of Amazon EC2 Elastic Block Store (EBS) block device mappings.",
            "properties": {
              "DeviceName": {
                "type": "String",
                "required": true,
                "description": "The name of the device within Amazon EC2."
              },
              "Ebs": {
                "type": "Object",
                "required": false,
                "description": "The EC2 EBS Block Device. You can specify either VirtualName or Ebs, but not both.",
                "properties": {
                  "DeleteOnTermination": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Determines whether to delete the volume on instance termination. The default value is \"true\"."
                  },
                  "Iops": {
                    "type": "String",
                    "required": false,
                    "description": "The number of I/O operations per second (IOPS) that the volume supports. This can be an integer from 100 to 2000. Required when the volume type is \"io1\"; not used with standard volumes."
                  },
                  "SnapshotId": {
                    "type": "String",
                    "required": false,
                    "description": "The snapshot ID of the volume to use to create a block device. If you specify both SnapshotId and VolumeSize, VolumeSize must be equal or greater than the size of the snapshot."
                  },
                  "VolumeSize": {
                    "type": "String",
                    "required": false,
                    "description": "The volume size, in gibibytes (GiB). This can be a number from 1 to 1024. If the volume type is \"io1\", the minimum value is 10. If you specify both SnapshotId and VolumeSize, VolumeSize must be equal or greater than the size of the snapshot."
                  },
                  "VolumeType": {
                    "type": "String",
                    "required": false,
                    "allowed-values": [
                      "*",
                      "standard",
                      "io1",
                      "gp2"
                    ],
                    "description": "The volume size, in gibibytes (GiB). This can be a number from 1 to 1024. If the volume type is \"io1\", the minimum value is 10."
                  },
                  "Encrypted": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether the volume is encrypted."
                  }
                }
              },
              "NoDevice": {
                "type": "Object",
                "required": false,
                "description": "This is set to empty map (\"{}\") that be used to unmap a defined device.",
                "properties": {}
              },
              "VirtualName": {
                "type": "String",
                "required": true,
                "description": "The name of the virtual device. The name must be in the form ephemeralX where X is a number starting from zero (0); for example, ephemeral0. You can specify either VirtualName or Ebs, but not both."
              }
            }
          },
          "DisableApiTermination": {
            "type": "Boolean",
            "required": false,
            "description": "Specifies whether the instance can be terminated through the API (specify \"true\"), or not (specify \"false\")."
          },
          "EbsOptimized": {
            "type": "Boolean",
            "required": false,
            "description": "This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance."
          },
          "HostId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::Host",
            "description": "If you specify host for the Affinity property, the ID of a dedicated host that the instance is associated with."
          },
          "IamInstanceProfile": {
            "type": "String",
            "resource-ref-type": "AWS::IAM::InstanceProfile",
            "required": false,
            "description": "A reference to an AWS::IAM::InstanceProfile type"
          },
          "ImageId": {
            "type": "String",
            "required": true,
            "description": "Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration."
          },
          "InstanceInitiatedShutdownBehavior": {
            "type": "String",
            "required": false,
            "description": "Indicates whether an instance stops or terminates when you shut down the instance from the instance's operating system shutdown command."
          },
          "InstanceType": {
            "type": "String",
            "required": true,
            "description": "The instance type. For example, \"m1.small\".",
            "allowed-values": [
              "*",
              "t1.micro",
              "t2.nano",
              "t2.micro",
              "t2.small",
              "t2.medium",
              "t2.large",
              "m1.small",
              "m1.medium",
              "m1.large",
              "m1.xlarge",
              "m2.xlarge",
              "m2.2xlarge",
              "m2.4xlarge",
              "m3.medium",
              "m3.large",
              "m3.xlarge",
              "m3.2xlarge",
              "m4.large",
              "m4.xlarge",
              "m4.2xlarge",
              "m4.4xlarge",
              "m4.10xlarge",
              "m4.16xlarge",
              "c1.medium",
              "c1.xlarge",
              "cr1.8xlarge",
              "c3.large",
              "c3.xlarge",
              "c3.2xlarge",
              "c3.4xlarge",
              "c3.8xlarge",
              "c4.large",
              "c4.xlarge",
              "c4.2xlarge",
              "c4.4xlarge",
              "c4.8xlarge",
              "cc1.4xlarge",
              "cc2.8xlarge",
              "cg1.4xlarge",
              "d2.xlarge",
              "d2.2xlarge",
              "d2.4xlarge",
              "d2.8xlarge",
              "g2.2xlarge",
              "g2.8xlarge",
              "hi1.4xlarge",
              "hs1.8xlarge",
              "i2.xlarge",
              "i2.2xlarge",
              "i2.4xlarge",
              "i2.8xlarge",
              "p2.xlarge",
              "p2.8xlarge",
              "p2.16xlarge",
              "r3.large",
              "r3.xlarge",
              "r3.2xlarge",
              "r3.4xlarge",
              "r3.8xlarge",
              "x1.32xlarge"
            ]
          },
          "Ipv6AddressCount": {
            "type": "Number",
            "required": false,
            "description": "The number of IPv6 addresses to associate with the instance's primary network interface."
          },
          "Ipv6Addresses": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet to associate with the instance's primary network interface.",
            "properties": {
              "Ipv6Address": {
                "type": "String",
                "required": true,
                "description": "The IPv6 address to associate with the network interface."
              }
            }
          },
          "KernelId": {
            "type": "String",
            "required": false,
            "description": "The kernel ID"
          },
          "KeyName": {
            "type": "String",
            "required": false,
            "description": "Provides the name of the EC2 key pair."
          },
          "Monitoring": {
            "type": "Boolean",
            "required": false,
            "description": "Specifies whether monitoring is enabled for the instance."
          },
          "NetworkInterfaces": {
            "type": "Array",
            "array-type": "Object",
            "properties": {
              "AssociatePublicIpAddress": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether the network interface receives a public IP address. You can associate a public IP address with a network interface only if it has a device index of eth0."
              },
              "DeleteOnTermination": {
                "type": "Boolean",
                "required": false,
                "description": "Determines whether to delete the network interface on instance termination."
              },
              "Description": {
                "type": "String",
                "required": false,
                "description": "The description of this network interface."
              },
              "DeviceIndex": {
                "type": "String",
                "required": true,
                "description": "The order in which the network interface should be attached."
              },
              "GroupSet": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "description": "A list of security group IDs associated with this network interface."
              },
              "NetworkInterfaceId": {
                "type": "String",
                "resource-ref-type": "AWS::EC2::NetworkInterface",
                "required": true,
                "description": "The ID of the network interface to attach."
              },
              "PrivateIpAddress": {
                "type": "String",
                "required": false,
                "description": "Assigns a single private IP address to the network interface, which is used as the primary private IP address. If you want to specify multiple private IP address, use the PrivateIpAddresses property."
              },
              "PrivateIpAddresses": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "Assigns a single private IP address to the network interface, which is used as the primary private IP address. If you want to specify multiple private IP address, use the PrivateIpAddresses property.",
                "properties": {
                  "PrivateIpAddress": {
                    "type": "String",
                    "required": true,
                    "description": "The private IP address of the network interface."
                  },
                  "Primary": {
                    "type": "Boolean",
                    "required": true,
                    "description": "Sets the private IP address as the primary private address. You can set only one primary private IP address."
                  }
                }
              },
              "SecondaryPrivateIpAddressCount": {
                "type": "Number",
                "required": false,
                "description": "The number of secondary private IP addresses that Amazon EC2 auto assigns to the network interface. Amazon EC2 uses the value of the PrivateIpAddress property as the primary private IP address."
              },
              "SubnetId": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::EC2::Subnet",
                "description": "The ID of the subnet to associate with the network interface."
              },
              "Ipv6AddressCount": {
                "type": "Number",
                "required": false,
                "description": "The number of IPv6 addresses to associate with the network interface."
              },
              "Ipv6Addresses": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet to associate with the network interface.",
                "properties": {
                  "Ipv6Address": {
                    "type": "String",
                    "required": true,
                    "description": "The IPv6 address to associate with the network interface."
                  }
                }
              }
            },
            "required": false,
            "description": "A list of network interfaces to associate with this instance."
          },
          "PlacementGroupName": {
            "type": "String",
            "required": false,
            "description": "The name of an existing placement group that you want to launch the instance into (for cluster instances)."
          },
          "PrivateIpAddress": {
            "type": "String",
            "required": false,
            "description": "If you're using an Amazon Virtual Private Cloud (VPC), you can optionally use this parameter to assign the instance a specific available IP address from the subnet (e.g., 10.0.0.25). By default, Amazon VPC selects an IP address from the subnet for the instance."
          },
          "RamdiskId": {
            "type": "String",
            "required": false,
            "description": "The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, refer to the AWS Resource Center and search for the kernel ID."
          },
          "SecurityGroupIds": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "A list that contains the security group IDs for VPC security groups to assign to the Amazon EC2 instance."
          },
          "SecurityGroups": {
            "array-type": "String",
            "type": "Array",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "Valid only for EC2 security groups. A list that contains the EC2 security groups to assign to the Amazon EC2 instance. The list can contain both the name of existing EC2 security groups or references to AWS::EC2::SecurityGroup resources created in the template."
          },
          "SourceDestCheck": {
            "type": "Boolean",
            "required": false,
            "description": "Controls whether source/destination checking is enabled on the instance. Also determines if an instance in a VPC will perform network address translation (NAT)."
          },
          "SsmAssociations": {
            "type": "Object",
            "required": false,
            "description": "The Amazon EC2 Simple Systems Manager (SSM) document and parameter values to associate with this instance.",
            "properties": {
              "AssociationParameters": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "The input parameter values to use with the associated SSM document.",
                "properties": {
                  "Key": {
                    "type": "String",
                    "required": true,
                    "description": "The name of an input parameter that is in the associated SSM document."
                  },
                  "Value": {
                    "type": "Array",
                    "array-type": "String",
                    "required": true,
                    "description": "The value of an input parameter."
                  }
                }
              },
              "DocumentName": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::SSM::Document",
                "description": "The name of an SSM document to associate with the instance."
              }
            }
          },
          "SubnetId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::Subnet",
            "description": "If you're using Amazon Virtual Private Cloud, this specifies the ID of the subnet that you want to launch the instance into."
          },
          "Tenancy": {
            "type": "String",
            "required": false,
            "description": "The tenancy of the instance that you want to launch. This value can be either \"default\" or \"dedicated\". An instance that has a tenancy value of \"dedicated\" runs on single-tenant hardware and can be launched only into a VPC."
          },
          "UserData": {
            "type": "String",
            "required": false,
            "description": "Base64-encoded MIME user data that is made available to the instances."
          },
          "Volumes": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The EBS volumes to attach to the instance.",
            "properties": {
              "Device": {
                "type": "String",
                "required": true,
                "description": "How the device is exposed to the instance (such as /dev/sdh, or xvdh)."
              },
              "VolumeId": {
                "type": "String",
                "resource-ref-type": "AWS::EC2::Volume",
                "required": true,
                "description": "The ID of the Amazon EBS volume. The volume and instance must be within the same Availability Zone and the instance must be running."
              }
            }
          },
          "AdditionalInfo": {
            "type": "String",
            "required": false,
            "description": "Reserved."
          },
          "ElasticGpuSpecifications": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "An elastic GPU to associate with the instance.",
            "properties": {
              "Type": {
                "type": "String",
                "required": true,
                "description": "The type of Elastic GPU."
              }
            }
          },
          "CreditSpecification": {
            "type": "Object",
            "required": false,
            "description": "Specifies the credit option for CPU usage of a T2 instance.",
            "properties": {
              "CPUCredits": {
                "type": "String",
                "required": false,
                "description": "The credit option for CPU usage of a T2 instance."
              }
            }
          },
          "LaunchTemplate": {
            "type": "Object",
            "required": false,
            "description": "The launch template to use.",
            "properties": {
              "LaunchTemplateId": {
                "type": "String",
                "required": false,
                "description": "The ID of the launch template. You must specify either a template ID or a template name.",
                "resource-ref-type": "AWS::EC2::LaunchTemplate"
              },
              "LaunchTemplateName": {
                "type": "String",
                "required": false,
                "description": "he name of the launch template. You must specify either a template name or a template ID.",
                "resource-ref-type": "AWS::EC2::LaunchTemplate"
              },
              "Version": {
                "type": "String",
                "required": true,
                "description": "The version number."
              }
            }
          },
          "ElasticInferenceAccelerators": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "An elastic inference accelerator.",
            "properties": {
              "Type": {
                "type": "String",
                "required": true,
                "description": "The type of elastic inference accelerator.",
                "allowed-values": [
                  "*",
                  "eia1.small",
                  "eia1.medium",
                  "eia1.large"
                ]
              }
            }
          },
          "LicenseSpecifications": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Associate a list of license configurations with the instance.",
            "properties": {
              "LicenseConfigurationArn": {
                "type": "String",
                "required": true,
                "description": "The Amazon Resource Name (ARN) of license configuration to associate with the instance.",
                "allowed-values": [
                  "*"
                ]
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::InternetGateway": {
    "type": "Object",
    "required": false,
    "description": "Creates a new Internet gateway in your AWS account. After creating the Internet gateway, you then attach it to a VPC.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a new Internet gateway in your AWS account. After creating the Internet gateway, you then attach it to a VPC."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::LaunchTemplate": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::LaunchTemplate resource creates a launch template for an Amazon EC2 instance.",
    "return-values": [
      {
        "name": "LatestVersionNumber",
        "description": "The latest version of the launch template, such as 5."
      },
      {
        "name": "DefaultVersionNumber",
        "description": "The default version of the launch template, such as 2."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::LaunchTemplate resource creates a launch template for an Amazon EC2 instance."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "LaunchTemplateName": {
            "type": "String",
            "required": false,
            "description": "A name for the launch template."
          },
          "LaunchTemplateData": {
            "type": "Object",
            "required": false,
            "description": "The information for the launch template.",
            "properties": {
              "SecurityGroups": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "One or more security group names.",
                "resource-ref-type": "AWS::EC2::SecurityGroup"
              },
              "TagSpecifications": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "The tags to apply to the resources during launch.",
                "properties": {
                  "ResourceType": {
                    "type": "String",
                    "required": false,
                    "description": "The type of resource to tag.",
                    "allowed-values": [
                      "*",
                      "instance",
                      "volume"
                    ]
                  },
                  "Tags": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "The tags to apply to the resource.",
                    "properties": {
                      "Key": {
                        "type": "String",
                        "required": true,
                        "description": "The key name of the tag."
                      },
                      "Value": {
                        "type": "String",
                        "required": true,
                        "description": "The value for the tag."
                      }
                    }
                  }
                }
              },
              "UserData": {
                "type": "String",
                "required": false,
                "description": "The Base64-encoded user data to make available to the instance."
              },
              "InstanceInitiatedShutdownBehavior": {
                "type": "String",
                "required": false,
                "description": "Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown)."
              },
              "BlockDeviceMappings": {
                "array-type": "Object",
                "type": "Array",
                "required": false,
                "description": "Defines a set of Amazon EC2 Elastic Block Store (EBS) block device mappings.",
                "properties": {
                  "DeviceName": {
                    "type": "String",
                    "required": true,
                    "description": "The name of the device within Amazon EC2."
                  },
                  "Ebs": {
                    "type": "Object",
                    "required": false,
                    "description": "The EC2 EBS Block Device. You can specify either VirtualName or Ebs, but not both.",
                    "properties": {
                      "DeleteOnTermination": {
                        "type": "Boolean",
                        "required": false,
                        "description": "Determines whether to delete the volume on instance termination. The default value is \"true\"."
                      },
                      "Iops": {
                        "type": "String",
                        "required": false,
                        "description": "The number of I/O operations per second (IOPS) that the volume supports. This can be an integer from 100 to 2000. Required when the volume type is \"io1\"; not used with standard volumes."
                      },
                      "SnapshotId": {
                        "type": "String",
                        "required": false,
                        "description": "The snapshot ID of the volume to use to create a block device. If you specify both SnapshotId and VolumeSize, VolumeSize must be equal or greater than the size of the snapshot."
                      },
                      "VolumeSize": {
                        "type": "String",
                        "required": false,
                        "description": "The volume size, in gibibytes (GiB). This can be a number from 1 to 1024. If the volume type is \"io1\", the minimum value is 10. If you specify both SnapshotId and VolumeSize, VolumeSize must be equal or greater than the size of the snapshot."
                      },
                      "VolumeType": {
                        "type": "String",
                        "required": false,
                        "allowed-values": [
                          "*",
                          "standard",
                          "io1",
                          "gp2"
                        ],
                        "description": "The volume size, in gibibytes (GiB). This can be a number from 1 to 1024. If the volume type is \"io1\", the minimum value is 10."
                      },
                      "Encrypted": {
                        "type": "Boolean",
                        "required": false,
                        "description": "Indicates whether the volume is encrypted."
                      },
                      "KmsKeyId": {
                        "type": "String",
                        "required": false,
                        "description": "The ARN of the AWS Key Management Service (AWS KMS) CMK used for encryption.",
                        "resource-ref-type": [
                          "*",
                          "AWS::KMS::Key"
                        ]
                      }
                    }
                  },
                  "NoDevice": {
                    "type": "Object",
                    "required": false,
                    "description": "This is set to empty map (\"{}\") that be used to unmap a defined device.",
                    "properties": {}
                  },
                  "VirtualName": {
                    "type": "String",
                    "required": true,
                    "description": "The name of the virtual device. The name must be in the form ephemeralX where X is a number starting from zero (0); for example, ephemeral0. You can specify either VirtualName or Ebs, but not both."
                  }
                }
              },
              "IamInstanceProfile": {
                "type": "Object",
                "required": false,
                "description": "The IAM instance profile.",
                "properties": {
                  "Arn": {
                    "type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::IAM::InstanceProfile",
                    "description": "The Amazon Resource Name (ARN) of the instance profile."
                  },
                  "Name": {
                    "type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::IAM::InstanceProfile",
                    "description": "The name of the instance profile."
                  }
                }
              },
              "KernelId": {
                "type": "String",
                "required": false,
                "description": "The ID of the kernel."
              },
              "SecurityGroupIds": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "One or more security group IDs.",
                "resource-ref-type": "AWS::EC2::SecurityGroup"
              },
              "EbsOptimized": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether the instance is optimized for Amazon EBS I/O."
              },
              "KeyName": {
                "type": "String",
                "required": false,
                "description": "The name of the key pair."
              },
              "DisableApiTermination": {
                "type": "Boolean",
                "required": false,
                "description": "If set to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API."
              },
              "ElasticGpuSpecifications": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "An elastic GPU to associate with the instance.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": false,
                    "description": "The type of Elastic GPU."
                  }
                }
              },
              "Placement": {
                "type": "Object",
                "required": false,
                "description": "The placement for the instance.",
                "properties": {
                  "GroupName": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the placement group for the instance."
                  },
                  "Tenancy": {
                    "type": "String",
                    "required": false,
                    "description": "The tenancy of the instance (if the instance is running in a VPC).",
                    "allowed-values": [
                      "*",
                      "default",
                      "dedicated",
                      "host"
                    ]
                  },
                  "AvailabilityZone": {
                    "type": "String",
                    "required": false,
                    "description": "The Availability Zone for the instance."
                  },
                  "Affinity": {
                    "type": "String",
                    "required": false,
                    "description": "The affinity setting for an instance on a Dedicated Host."
                  },
                  "HostId": {
                    "type": "String",
                    "required": false,
                    "description": "The ID of the Dedicated Host for the instance."
                  }
                }
              },
              "InstanceMarketOptions": {
                "type": "Object",
                "required": false,
                "description": "The InstanceMarketOptions property type specifies market (purchasing) option for instances in an Amazon EC2 launch template.",
                "properties": {
                  "SpotOptions": {
                    "type": "Object",
                    "required": false,
                    "description": "The options for Spot Instances.",
                    "properties": {
                      "SpotInstanceType": {
                        "type": "String",
                        "required": false,
                        "description": "The Spot Instance request type.",
                        "allowed-values": [
                          "*",
                          "one-time",
                          "persistent"
                        ]
                      },
                      "InstanceInterruptionBehavior": {
                        "type": "String",
                        "required": false,
                        "description": "The behavior when a Spot Instance is interrupted. The default is terminate.",
                        "allowed-values": [
                          "*",
                          "hibernate",
                          "stop",
                          "terminate"
                        ]
                      },
                      "MaxPrice": {
                        "type": "String",
                        "required": false,
                        "description": "The maximum hourly price you're willing to pay for the Spot Instances."
                      }
                    }
                  },
                  "MarketType": {
                    "type": "String",
                    "required": false,
                    "description": "The market type.",
                    "allowed-values": [
                      "*",
                      "spot"
                    ]
                  }
                }
              },
              "NetworkInterfaces": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "One or more network interfaces.",
                "properties": {
                  "Description": {
                    "type": "String",
                    "required": false,
                    "description": "A description for the network interface."
                  },
                  "PrivateIpAddress": {
                    "type": "String",
                    "required": false,
                    "description": "The primary private IPv4 address of the network interface."
                  },
                  "PrivateIpAddresses": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "One or more private IPv4 addresses.",
                    "properties": {
                      "PrivateIpAddress": {
                        "type": "String",
                        "required": false,
                        "description": "The private IPv4 address."
                      },
                      "Primary": {
                        "type": "Boolean",
                        "required": false,
                        "description": "Indicates whether the private IPv4 address is the primary private IPv4 address. Only one IPv4 address can be designated as primary."
                      }
                    }
                  },
                  "SecondaryPrivateIpAddressCount": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of secondary private IPv4 addresses to assign to a network interface."
                  },
                  "Ipv6AddressCount": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of IPv6 addresses to assign to a network interface."
                  },
                  "Groups": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "description": "The IDs of one or more security groups.",
                    "resource-ref-type": "AWS::EC2::SecurityGroup"
                  },
                  "DeviceIndex": {
                    "type": "Number",
                    "required": false,
                    "description": "The device index for the network interface attachment."
                  },
                  "SubnetId": {
                    "type": "String",
                    "required": false,
                    "description": "The ID of the subnet for the network interface.",
                    "resource-ref-type": "AWS::EC2::Subnet"
                  },
                  "Ipv6Addresses": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet.",
                    "properties": {
                      "Ipv6Address": {
                        "type": "String",
                        "required": false,
                        "description": "The IPv6 address."
                      }
                    }
                  },
                  "AssociatePublicIpAddress": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Associates a public IPv4 address with eth0 for a new network interface."
                  },
                  "NetworkInterfaceId": {
                    "type": "String",
                    "required": false,
                    "description": "The ID of the network interface.",
                    "resource-ref-type": "AWS::EC2::NetworkInterface"
                  },
                  "DeleteOnTermination": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether the network interface is deleted when the instance is terminated."
                  }
                }
              },
              "ImageId": {
                "type": "String",
                "required": false,
                "description": "The ID of the AMI."
              },
              "InstanceType": {
                "type": "String",
                "required": false,
                "description": "The instance type."
              },
              "RamDiskId": {
                "type": "String",
                "required": false,
                "description": "The ID of the RAM disk."
              },
              "Monitoring": {
                "type": "Object",
                "required": false,
                "description": "The monitoring for the instance.",
                "properties": {
                  "Enabled": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Specify true to enable detailed monitoring. Otherwise, basic monitoring is enabled."
                  }
                }
              },
              "CreditSpecification": {
                "type": "Object",
                "required": false,
                "description": "The credit option for CPU usage of the instance. Valid for T2 instances only.",
                "properties": {
                  "CpuCredits": {
                    "type": "String",
                    "required": false,
                    "description": "The credit option for CPU usage of a T2 instance.",
                    "allowed-values": [
                      "*",
                      "standard",
                      "unlimited"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::NatGateway": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::NatGateway resource creates a network address translation (NAT) gateway in the specified public subnet",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::NatGateway resource creates a network address translation (NAT) gateway in the specified public subnet"
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AllocationId": {
            "type": "String",
            "required": true,
            "description": "The allocation ID of an Elastic IP address to associate with the NAT gateway."
          },
          "SubnetId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::Subnet",
            "description": "The public subnet in which to create the NAT gateway."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Specifies an arbitrary set of tags (key�value pairs) to associate with this resource. Use tags to manage your resources.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::NetworkAcl": {
    "type": "Object",
    "required": false,
    "description": "Creates a new network ACL in a VPC.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a new network ACL in a VPC."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "VpcId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::EC2::VPC",
            "description": "The ID of the VPC where the network ACL will be created."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::NetworkAclEntry": {
    "type": "Object",
    "required": false,
    "description": "Creates an entry (i.e., rule) in a network ACL with a rule number you specify. Each network ACL has a set of numbered ingress rules and a separate set of numbered egress rules.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an entry (i.e., rule) in a network ACL with a rule number you specify. Each network ACL has a set of numbered ingress rules and a separate set of numbered egress rules."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "NetworkAclId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::NetworkAcl",
            "required": true,
            "description": "ID of the ACL where the entry will be created."
          },
          "RuleNumber": {
            "type": "Number",
            "required": true,
            "description": "Rule number to assign to the entry (e.g., 100). This must be a postive integer from 1 to 32766."
          },
          "Protocol": {
            "type": "Number",
            "required": true,
            "description": "IP protocol the rule applies to. You can use -1 to mean all protocols. This must be -1 or a protocol number."
          },
          "RuleAction": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "allow",
              "deny"
            ],
            "description": "ID of the ACL where the entry will be created."
          },
          "Egress": {
            "type": "Boolean",
            "required": true,
            "description": "Whether this rule applies to egress traffic from the subnet (\"true\") or ingress traffic to the subnet (\"false\")."
          },
          "CidrBlock": {
            "type": "String",
            "required": true,
            "description": "The CIDR range to allow or deny, in CIDR notation (e.g., 172.16.0.0/24)."
          },
          "Icmp": {
            "type": "Object",
            "required": false,
            "description": "The Internet Control Message Protocol (ICMP) code and type.  Required: Conditional, required if specifying 1 (ICMP) for the protocol parameter.",
            "properties": {
              "Code": {
                "type": "Number",
                "required": false,
                "description": "The Internet Control Message Protocol (ICMP) code. You can use -1 to specify all ICMP codes for the given ICMP type. Condition: Required if specifying 1 (ICMP) for the CreateNetworkAclEntry protocol parameter."
              },
              "Type": {
                "type": "Number",
                "required": false,
                "description": "The Internet Control Message Protocol (ICMP) type. You can use -1 to specify all ICMP types. Condition: Required if specifying 1 (ICMP) for the CreateNetworkAclEntry protocol parameter."
              }
            }
          },
          "Ipv6CidrBlock": {
            "type": "String",
            "required": false,
            "description": "The IPv6 CIDR range to allow or deny, in CIDR notation."
          },
          "PortRange": {
            "type": "Object",
            "required": false,
            "description": "The range of port numbers for the UDP/TCP protocol. Required: Conditional, required if specifying 6 (TCP) or 17 (UDP) for the protocol parameter.",
            "properties": {
              "From": {
                "type": "Number",
                "required": false,
                "description": "The first port in the range. Condition: Required if specifying 6 (TCP) or 17 (UDP) for the CreateNetworkAclEntry protocol parameter."
              },
              "To": {
                "type": "Number",
                "required": false,
                "description": "The last port in the range. Condition: Required if specifying 6 (TCP) or 17 (UDP) for the CreateNetworkAclEntry protocol parameter."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::NetworkInterface": {
    "return-values": [
      {
        "description": "The primary private IP address of the network interface that you specified. For example: 10.0.0.192",
        "name": "PrimaryPrivateIpAddress"
      },
      {
        "description": "The secondary private IP addresses of the network interface that you specified. For example:  [\"10.0.0.161\", \"10.0.0.162\", \"10.0.0.163\"]",
        "name": "SecondaryPrivateIpAddresses"
      }
    ],
    "type": "Object",
    "required": false,
    "description": "Describes a network interface in an Elastic Compute Cloud (EC2) instance for AWS CloudFormation. ",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Describes a network interface in an Elastic Compute Cloud (EC2) instance for AWS CloudFormation. "
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "The description of this network interface."
          },
          "GroupSet": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "A list of security group IDs associated with this network interface."
          },
          "Ipv6AddressCount": {
            "type": "Number",
            "required": false,
            "description": "The number of IPv6 addresses to associate with the network interface."
          },
          "Ipv6Addresses": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet to associate with the network interface.",
            "properties": {
              "Ipv6Address": {
                "type": "String",
                "required": true,
                "description": "The IPv6 address to associate with the network interface."
              }
            }
          },
          "PrivateIpAddress": {
            "type": "String",
            "required": false,
            "description": "IP address of the interface within the subnet."
          },
          "PrivateIpAddresses": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Assigns a list of private IP addresses to the network interface. You can specify a primary private IP address by setting the value of the Primary property to true in the PrivateIpAddressSpecification property. If you want Amazon EC2 to automatically assign private IP addresses, use the SecondaryPrivateIpAddressCount property and do not specify this property.",
            "properties": {
              "PrivateIpAddress": {
                "type": "String",
                "required": true,
                "description": "The private IP address of the network interface."
              },
              "Primary": {
                "type": "Boolean",
                "required": true,
                "description": "Sets the private IP address as the primary private address. You can set only one primary private IP address. If you don't specify a primary private IP address, Amazon EC2 automatically assigns a primary private IP address."
              }
            }
          },
          "SecondaryPrivateIpAddressCount": {
            "type": "Number",
            "required": false,
            "description": "The number of secondary private IP addresses that Amazon EC2 automatically assigns to the network interface. Amazon EC2 uses the value of the PrivateIpAddress property as the primary private IP address. If you don't specify that property, Amazon EC2 automatically assigns both the primary and secondary private IP addresses."
          },
          "SourceDestCheck": {
            "type": "Boolean",
            "required": false,
            "description": "Flag indicating whether traffic to or from the instance is validated."
          },
          "SubnetId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::Subnet",
            "required": true,
            "description": "The ID of the subnet to associate with the network interface."
          },
          "InterfaceType": {
            "type": "String",
            "required": false,
            "description": "The type of interface.",
            "allowed-values": [
              "*",
              "interface",
              "natGateway"
            ]
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::NetworkInterfaceAttachment": {
    "type": "Object",
    "required": false,
    "description": "Attaches an elastic network interface (ENI) to an Amazon EC2 instance. You can use this resource type to attach additional network interfaces to an instances without interruption.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Attaches an elastic network interface (ENI) to an Amazon EC2 instance. You can use this resource type to attach additional network interfaces to an instances without interruption."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DeleteOnTermination": {
            "type": "Boolean",
            "required": false,
            "description": "Whether to delete the network interface when the instance terminates. By default, this value is set to True."
          },
          "DeviceIndex": {
            "type": "String",
            "required": true,
            "description": "The network interface's position in the attachment order. For example, the first attached network interface has a DeviceIndex of 0."
          },
          "InstanceId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::EC2::Instance",
            "description": "The ID of the instance to which you will attach the ENI."
          },
          "NetworkInterfaceId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::EC2::NetworkInterface",
            "description": "The ID of the ENI that you want to attach."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::NetworkInterfacePermission": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::NetworkInterfacePermission resource specifies a permission for an Amazon EC2 network interface.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::NetworkInterfacePermission resource specifies a permission for an Amazon EC2 network interface."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AwsAccountId": {
            "type": "String",
            "required": true,
            "description": "The AWS account ID."
          },
          "NetworkInterfaceId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::EC2::NetworkInterface",
            "description": "The ID of the network interface."
          },
          "Permission": {
            "type": "String",
            "required": true,
            "description": "The type of permission to grant",
            "allowed-values": [
              "*",
              "INSTANCE-ATTACH",
              "EIP-ASSOCIATE"
            ]
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::PlacementGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::PlacementGroup resource is a logical grouping of instances within a single Availability Zone (AZ) that enables applications to participate in a low-latency, 10 Gbps network.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::PlacementGroup resource is a logical grouping of instances within a single Availability Zone (AZ) that enables applications to participate in a low-latency, 10 Gbps network."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Strategy": {
            "type": "String",
            "required": false,
            "description": "The placement strategy, which relates to the instance types that can be added to the placement group."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::Route": {
    "type": "Object",
    "required": false,
    "description": "Creates a new route in a route table within a VPC. The route's target can be either a gateway attached to the VPC or a NAT instance in the VPC.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a new route in a route table within a VPC. The route's target can be either a gateway attached to the VPC or a NAT instance in the VPC."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DestinationCidrBlock": {
            "type": "String",
            "required": true,
            "description": "The CIDR address block used for the destination match. For example, \"0.0.0.0/0\". Routing decisions are based on the most specific match."
          },
          "DestinationIpv6CidrBlock": {
            "type": "String",
            "required": false,
            "description": "The IPv6 CIDR address block used for the destination match."
          },
          "GatewayId": {
            "type": "String",
            "resource-ref-type": [
              "*",
              "AWS::EC2::InternetGateway",
              "AWS::EC2::VPNGateway"
            ],
            "required": false,
            "description": "The ID of a gateway attached to your VPC. For example: \"igw-eaad4883\". Required: Conditional. You must provide only one of the following: a GatewayID, InstanceID, or NetworkInterfaceId."
          },
          "InstanceId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::Instance",
            "required": false,
            "description": "The ID of a NAT instance in your VPC. For example, \"i-1a2b3c4d\". Required: Conditional. You must provide only one of the following: a GatewayID, InstanceID, or NetworkInterfaceId."
          },
          "NatGatewayId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::NatGateway",
            "required": false,
            "description": "The ID of a NAT gateway. For example, nat-0a12bc456789de0fg."
          },
          "NetworkInterfaceId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::NetworkInterface",
            "required": false,
            "description": "Allows the routing of network interface IDs. Required: Conditional. You must provide only one of the following: a GatewayID, InstanceID, or NetworkInterfaceId."
          },
          "RouteTableId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::RouteTable",
            "required": true,
            "description": "The ID of the route table where the route will be added."
          },
          "VpcPeeringConnectionId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::VPCPeeringConnection",
            "required": false,
            "description": "The ID of a VPC peering connection."
          },
          "EgressOnlyInternetGatewayId": {
            "type": "String",
            "required": false,
            "description": "The ID of an egress-only internet gateway that is attached to your VPC (over IPv6 only).",
            "resource-ref-type": [
              "*",
              "AWS::EC2::InternetGateway"
            ]
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::RouteTable": {
    "type": "Object",
    "required": false,
    "description": "Creates a new route table within a VPC. After you create a new route table, you can add routes and associate the table with a subnet.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a new route table within a VPC. After you create a new route table, you can add routes and associate the table with a subnet."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "VpcId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::VPC",
            "required": true,
            "description": "The ID of the VPC where the route table will be created."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::SecurityGroup": {
    "return-values": [
      {
        "description": "The group ID of the specified security group. For example: sg-94b3a1f6",
        "name": "GroupId"
      },
      {
        "name": "VpcId",
        "description": "The Vpc ID the group is assigned to."
      }
    ],
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::SecurityGroup type creates an Amazon EC2 security group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::SecurityGroup type creates an Amazon EC2 security group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "GroupName": {
            "type": "String",
            "required": false,
            "description": "The name of the security group."
          },
          "GroupDescription": {
            "type": "String",
            "required": false,
            "description": "Description of the security group."
          },
          "VpcId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::VPC",
            "description": "ID of the VPC."
          },
          "SecurityGroupIngress": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A list of EC2 security group ingress rules.",
            "properties": {
              "IpProtocol": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "*",
                  "tcp",
                  "udp",
                  "icmp"
                ],
                "description": "IP protocol name or number."
              },
              "CidrIp": {
                "type": "String",
                "required": false,
                "description": "The CIDR range. If you specify SourceSecurityGroupName, do not specify CidrIp."
              },
              "SourceSecurityGroupName": {
                "type": "String",
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "required": false,
                "description": "Specifies the name of the Amazon EC2 Security Group to allow access.  If you specify CidrIp, do not specify SourceSecurityGroupName."
              },
              "SourceSecurityGroupId": {
                "type": "String",
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "required": false,
                "description": "For VPC security groups only. Specifies the ID of the Amazon EC2 Security Group to allow access.  If you specify CidrIp, do not specify SourceSecurityGroupId."
              },
              "SourceSecurityGroupOwnerId": {
                "type": "String",
                "required": false,
                "description": "Specifies the AWS Account ID of the owner of the Amazon EC2 Security Group specified in the SourceSecurityGroupName property.\n\nIf you specify SourceSecurityGroupName and that security group is owned by a different account than the account creating the stack, you must specify the SourceSecurityGroupOwnerId; otherwise, this property is optional."
              },
              "FromPort": {
                "type": "String",
                "required": true,
                "description": "Start of port range for the TCP and UDP protocols, or an ICMP type number. An ICMP type number of -1 indicates a wildcard.",
                "allowed-values": [
                  "*",
                  {
                    "display-label": "SSH (22)",
                    "value": "22"
                  },
                  {
                    "display-label": "SMTP (25)",
                    "value": "25"
                  },
                  {
                    "display-label": "HTTP (80)",
                    "value": "80"
                  },
                  {
                    "display-label": "POP3 (110)",
                    "value": "110"
                  },
                  {
                    "display-label": "HTTPS (443)",
                    "value": "443"
                  },
                  {
                    "display-label": "MS_SQL (1433)",
                    "value": "1433"
                  },
                  {
                    "display-label": "RDP (3389)",
                    "value": "3389"
                  }
                ]
              },
              "ToPort": {
                "type": "String",
                "required": true,
                "description": "End of port range for the TCP and UDP protocols, or an ICMP code. An ICMP code of -1 indicates a wildcard.",
                "allowed-values": [
                  "*",
                  {
                    "display-label": "SSH (22)",
                    "value": "22"
                  },
                  {
                    "display-label": "SMTP (25)",
                    "value": "25"
                  },
                  {
                    "display-label": "HTTP (80)",
                    "value": "80"
                  },
                  {
                    "display-label": "POP3 (110)",
                    "value": "110"
                  },
                  {
                    "display-label": "HTTPS (443)",
                    "value": "443"
                  },
                  {
                    "display-label": "MS_SQL (1433)",
                    "value": "1433"
                  },
                  {
                    "display-label": "RDP (3389)",
                    "value": "3389"
                  }
                ]
              },
              "CidrIpv6": {
                "type": "String",
                "required": false,
                "description": "Specifies an IPv6 CIDR range."
              },
              "Description": {
                "type": "String",
                "required": false,
                "description": "Description of the security group rule."
              },
              "SourcePrefixListId": {
                "type": "String",
                "required": false,
                "description": "One or more prefix list IDs for an AWS service."
              }
            }
          },
          "SecurityGroupEgress": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A list of EC2 security group egress rules.",
            "properties": {
              "IpProtocol": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "*",
                  "tcp",
                  "udp",
                  "icmp"
                ],
                "description": "IP protocol name or number."
              },
              "CidrIp": {
                "type": "String",
                "required": false,
                "description": "The CIDR range. If you specify SourceSecurityGroupName, do not specify CidrIp."
              },
              "DestinationSecurityGroupId": {
                "type": "String",
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "required": false,
                "description": "Specifies the GroupId of the destination Amazon VPC security group."
              },
              "SourceSecurityGroupName": {
                "type": "String",
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "required": false,
                "description": "Specifies the name of the Amazon EC2 Security Group to allow access.  If you specify CidrIp, do not specify SourceSecurityGroupName."
              },
              "SourceSecurityGroupId": {
                "type": "String",
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "required": false,
                "description": "For VPC security groups only. Specifies the ID of the Amazon EC2 Security Group to allow access.  If you specify CidrIp, do not specify SourceSecurityGroupId."
              },
              "SourceSecurityGroupOwnerId": {
                "type": "String",
                "required": false,
                "description": "Specifies the AWS Account ID of the owner of the Amazon EC2 Security Group specified in the SourceSecurityGroupName property.\n\nIf you specify SourceSecurityGroupName and that security group is owned by a different account than the account creating the stack, you must specify the SourceSecurityGroupOwnerId; otherwise, this property is optional."
              },
              "FromPort": {
                "type": "String",
                "required": true,
                "description": "Start of port range for the TCP and UDP protocols, or an ICMP type number. An ICMP type number of -1 indicates a wildcard.",
                "allowed-values": [
                  "*",
                  {
                    "display-label": "SSH (22)",
                    "value": "22"
                  },
                  {
                    "display-label": "SMTP (25)",
                    "value": "25"
                  },
                  {
                    "display-label": "HTTP (80)",
                    "value": "80"
                  },
                  {
                    "display-label": "POP3 (110)",
                    "value": "110"
                  },
                  {
                    "display-label": "HTTPS (443)",
                    "value": "443"
                  },
                  {
                    "display-label": "MS_SQL (1433)",
                    "value": "1433"
                  },
                  {
                    "display-label": "RDP (3389)",
                    "value": "3389"
                  }
                ]
              },
              "ToPort": {
                "type": "String",
                "required": true,
                "description": "End of port range for the TCP and UDP protocols, or an ICMP code. An ICMP code of -1 indicates a wildcard.",
                "allowed-values": [
                  "*",
                  {
                    "display-label": "SSH (22)",
                    "value": "22"
                  },
                  {
                    "display-label": "SMTP (25)",
                    "value": "25"
                  },
                  {
                    "display-label": "HTTP (80)",
                    "value": "80"
                  },
                  {
                    "display-label": "POP3 (110)",
                    "value": "110"
                  },
                  {
                    "display-label": "HTTPS (443)",
                    "value": "443"
                  },
                  {
                    "display-label": "MS_SQL (1433)",
                    "value": "1433"
                  },
                  {
                    "display-label": "RDP (3389)",
                    "value": "3389"
                  }
                ]
              },
              "CidrIpv6": {
                "type": "String",
                "required": false,
                "description": "Specifies an IPv6 CIDR range."
              },
              "Description": {
                "type": "String",
                "required": false,
                "description": "Description of the security group rule."
              },
              "DestinationPrefixListId": {
                "type": "String",
                "required": false,
                "description": "The AWS service prefix of an Amazon VPC endpoint."
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::SecurityGroupEgress": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::SecurityGroupEgress type adds an egress rule to an Amazon VPC security group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::SecurityGroupEgress type adds an egress rule to an Amazon VPC security group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CidrIp": {
            "type": "String",
            "required": false,
            "description": "The CIDR range. Required: Conditional�cannot be used when specifying a destination security group."
          },
          "CidrIpv6": {
            "type": "String",
            "required": false,
            "description": "The AWS service prefix of an Amazon VPC endpoint."
          },
          "DestinationPrefixListId": {
            "type": "String",
            "required": false,
            "description": "The AWS service prefix of an Amazon VPC endpoint."
          },
          "DestinationSecurityGroupId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "For VPC security groups only. Specifies the ID of the Amazon EC2 Security Group to allow access.  If you specify CidrIp, do not specify SourceSecurityGroupId."
          },
          "FromPort": {
            "type": "String",
            "required": true,
            "description": "Start of port range for the TCP and UDP protocols, or an ICMP type number. An ICMP type number of -1 indicates a wildcard.",
            "allowed-values": [
              "*",
              {
                "display-label": "SSH (22)",
                "value": "22"
              },
              {
                "display-label": "SMTP (25)",
                "value": "25"
              },
              {
                "display-label": "HTTP (80)",
                "value": "80"
              },
              {
                "display-label": "POP3 (110)",
                "value": "110"
              },
              {
                "display-label": "HTTPS (443)",
                "value": "443"
              },
              {
                "display-label": "MS_SQL (1433)",
                "value": "1433"
              },
              {
                "display-label": "RDP (3389)",
                "value": "3389"
              }
            ]
          },
          "GroupId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": true,
            "description": "ID of the Amazon VPC security group to modify. This value can be a reference to an AWS::EC2::SecurityGroup resource that has a valid VpcId property or the ID of an existing Amazon VPC security group."
          },
          "IpProtocol": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "*",
              "tcp",
              "udp",
              "icmp"
            ],
            "description": "IP protocol name or number."
          },
          "ToPort": {
            "type": "String",
            "required": true,
            "description": "End of port range for the TCP and UDP protocols, or an ICMP code. An ICMP code of -1 indicates a wildcard.",
            "allowed-values": [
              "*",
              {
                "display-label": "SSH (22)",
                "value": "22"
              },
              {
                "display-label": "SMTP (25)",
                "value": "25"
              },
              {
                "display-label": "HTTP (80)",
                "value": "80"
              },
              {
                "display-label": "POP3 (110)",
                "value": "110"
              },
              {
                "display-label": "HTTPS (443)",
                "value": "443"
              },
              {
                "display-label": "MS_SQL (1433)",
                "value": "1433"
              },
              {
                "display-label": "RDP (3389)",
                "value": "3389"
              }
            ]
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "Description of the egress rule."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::SecurityGroupIngress": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::SecurityGroupIngress type adds an ingress rule to an Amazon EC2 or VPC security group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::SecurityGroupIngress type adds an ingress rule to an Amazon EC2 or VPC security group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "GroupName": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "Name of the EC2 security group to modify. This value can be a reference to an AWS::EC2::SecurityGroup resource or the name of an existing EC2 security group. Required: Can be used instead of GroupId for EC2 security groups."
          },
          "GroupId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "Name of the EC2 security group to modify. This value can be a reference to an AWS::EC2::SecurityGroup resource or the name of an existing EC2 security group. Required: Yes, for VPC security groups; can be used instead of GroupName for EC2 security groups."
          },
          "IpProtocol": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "*",
              "tcp",
              "udp",
              "icmp"
            ],
            "description": "IP protocol name or number."
          },
          "CidrIp": {
            "type": "String",
            "required": false,
            "description": "The CIDR range. If you specify SourceSecurityGroupName, do not specify CidrIp."
          },
          "CidrIpv6": {
            "type": "String",
            "required": false,
            "description": "The AWS service prefix of an Amazon VPC endpoint."
          },
          "SourceSecurityGroupName": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "Specifies the name of the Amazon EC2 Security Group to allow access.  If you specify CidrIp, do not specify SourceSecurityGroupName."
          },
          "SourceSecurityGroupId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "For VPC security groups only. Specifies the ID of the Amazon EC2 Security Group to allow access.  If you specify CidrIp, do not specify SourceSecurityGroupId."
          },
          "SourceSecurityGroupOwnerId": {
            "type": "String",
            "required": false,
            "description": "Specifies the AWS Account ID of the owner of the Amazon EC2 Security Group specified in the SourceSecurityGroupName property.\n\nIf you specify SourceSecurityGroupName and that security group is owned by a different account than the account creating the stack, you must specify the SourceSecurityGroupOwnerId; otherwise, this property is optional."
          },
          "FromPort": {
            "type": "String",
            "required": true,
            "description": "Start of port range for the TCP and UDP protocols, or an ICMP type number. An ICMP type number of -1 indicates a wildcard.",
            "allowed-values": [
              "*",
              {
                "display-label": "SSH (22)",
                "value": "22"
              },
              {
                "display-label": "SMTP (25)",
                "value": "25"
              },
              {
                "display-label": "HTTP (80)",
                "value": "80"
              },
              {
                "display-label": "POP3 (110)",
                "value": "110"
              },
              {
                "display-label": "HTTPS (443)",
                "value": "443"
              },
              {
                "display-label": "MS_SQL (1433)",
                "value": "1433"
              },
              {
                "display-label": "RDP (3389)",
                "value": "3389"
              }
            ]
          },
          "ToPort": {
            "type": "String",
            "required": true,
            "description": "End of port range for the TCP and UDP protocols, or an ICMP code. An ICMP code of -1 indicates a wildcard.",
            "allowed-values": [
              "*",
              {
                "display-label": "SSH (22)",
                "value": "22"
              },
              {
                "display-label": "SMTP (25)",
                "value": "25"
              },
              {
                "display-label": "HTTP (80)",
                "value": "80"
              },
              {
                "display-label": "POP3 (110)",
                "value": "110"
              },
              {
                "display-label": "HTTPS (443)",
                "value": "443"
              },
              {
                "display-label": "MS_SQL (1433)",
                "value": "1433"
              },
              {
                "display-label": "RDP (3389)",
                "value": "3389"
              }
            ]
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "Description of the ingress rule."
          },
          "SourcePrefixListId": {
            "type": "String",
            "required": false,
            "description": "One or more prefix list IDs for an AWS service."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::SpotFleet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::SpotFleet resource creates a request for a collection of Spot instances.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::SpotFleet resource creates a request for a collection of Spot instances."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "SpotFleetRequestConfigData": {
            "type": "Object",
            "required": true,
            "description": "The configuration for a Spot fleet request.",
            "properties": {
              "AllocationStrategy": {
                "type": "String",
                "required": false,
                "description": "Indicates how to allocate the target capacity across the Spot pools that you specified in the Spot fleet request."
              },
              "ExcessCapacityTerminationPolicy": {
                "type": "String",
                "required": false,
                "description": "Indicates whether running Spot instances are terminated if you decrease the target capacity of the Spot fleet request below the current size of the Spot fleet."
              },
              "IamFleetRole": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::IAM::Role",
                "description": "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants the Spot fleet the ability to bid on, launch, and terminate instances on your behalf."
              },
              "LaunchSpecifications": {
                "type": "Object",
                "required": true,
                "description": "Information about the launch specifications for the Spot fleet request.",
                "properties": {
                  "BlockDeviceMappings": {
                    "array-type": "Object",
                    "type": "Array",
                    "required": false,
                    "description": "Defines a set of Amazon EC2 Elastic Block Store (EBS) block device mappings.",
                    "properties": {
                      "DeviceName": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the device within Amazon EC2."
                      },
                      "Ebs": {
                        "type": "Object",
                        "required": false,
                        "description": "The EC2 EBS Block Device. You can specify either VirtualName or Ebs, but not both.",
                        "properties": {
                          "DeleteOnTermination": {
                            "type": "Boolean",
                            "required": false,
                            "description": "Determines whether to delete the volume on instance termination. The default value is \"true\"."
                          },
                          "Iops": {
                            "type": "String",
                            "required": false,
                            "description": "The number of I/O operations per second (IOPS) that the volume supports. This can be an integer from 100 to 2000. Required when the volume type is \"io1\"; not used with standard volumes."
                          },
                          "SnapshotId": {
                            "type": "String",
                            "required": false,
                            "description": "The snapshot ID of the volume to use to create a block device. If you specify both SnapshotId and VolumeSize, VolumeSize must be equal or greater than the size of the snapshot."
                          },
                          "VolumeSize": {
                            "type": "String",
                            "required": false,
                            "description": "The volume size, in gibibytes (GiB). This can be a number from 1 to 1024. If the volume type is \"io1\", the minimum value is 10. If you specify both SnapshotId and VolumeSize, VolumeSize must be equal or greater than the size of the snapshot."
                          },
                          "VolumeType": {
                            "type": "String",
                            "required": false,
                            "allowed-values": [
                              "*",
                              "standard",
                              "io1",
                              "gp2"
                            ],
                            "description": "The volume size, in gibibytes (GiB). This can be a number from 1 to 1024. If the volume type is \"io1\", the minimum value is 10."
                          },
                          "Encrypted": {
                            "type": "Boolean",
                            "required": false,
                            "description": "Indicates whether the EBS volume is encrypted. Encrypted Amazon EBS volumes can be attached only to instances that support Amazon EBS encryption."
                          }
                        }
                      },
                      "NoDevice": {
                        "type": "Object",
                        "required": false,
                        "description": "This is set to empty map (\"{}\") that be used to unmap a defined device.",
                        "properties": {}
                      },
                      "VirtualName": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the virtual device. The name must be in the form ephemeralX where X is a number starting from zero (0); for example, ephemeral0. You can specify either VirtualName or Ebs, but not both."
                      }
                    }
                  },
                  "EbsOptimized": {
                    "type": "Boolean",
                    "required": false,
                    "description": "This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance."
                  },
                  "IamInstanceProfile": {
                    "type": "Object",
                    "resource-ref-type": "AWS::IAM::InstanceProfile",
                    "required": false,
                    "description": "A reference to an AWS::IAM::InstanceProfile type",
                    "properties": {
                      "Arn": {
                        "type": "String",
                        "required": false,
                        "description": "The Amazon Resource Name (ARN) of the instance profile to associate with the instances. The instance profile contains the IAM role that is associated with the instances."
                      }
                    }
                  },
                  "ImageId": {
                    "type": "String",
                    "required": true,
                    "description": "Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration."
                  },
                  "InstanceType": {
                    "type": "String",
                    "required": true,
                    "description": "The instance type. For example, \"m1.small\".",
                    "allowed-values": [
                      "*",
                      "t1.micro",
                      "t2.nano",
                      "t2.micro",
                      "t2.small",
                      "t2.medium",
                      "t2.large",
                      "m1.small",
                      "m1.medium",
                      "m1.large",
                      "m1.xlarge",
                      "m2.xlarge",
                      "m2.2xlarge",
                      "m2.4xlarge",
                      "m3.medium",
                      "m3.large",
                      "m3.xlarge",
                      "m3.2xlarge",
                      "m4.large",
                      "m4.xlarge",
                      "m4.2xlarge",
                      "m4.4xlarge",
                      "m4.10xlarge",
                      "m4.16xlarge",
                      "c1.medium",
                      "c1.xlarge",
                      "cr1.8xlarge",
                      "c3.large",
                      "c3.xlarge",
                      "c3.2xlarge",
                      "c3.4xlarge",
                      "c3.8xlarge",
                      "c4.large",
                      "c4.xlarge",
                      "c4.2xlarge",
                      "c4.4xlarge",
                      "c4.8xlarge",
                      "cc1.4xlarge",
                      "cc2.8xlarge",
                      "cg1.4xlarge",
                      "d2.xlarge",
                      "d2.2xlarge",
                      "d2.4xlarge",
                      "d2.8xlarge",
                      "g2.2xlarge",
                      "g2.8xlarge",
                      "hi1.4xlarge",
                      "hs1.8xlarge",
                      "i2.xlarge",
                      "i2.2xlarge",
                      "i2.4xlarge",
                      "i2.8xlarge",
                      "p2.xlarge",
                      "p2.8xlarge",
                      "p2.16xlarge",
                      "r3.large",
                      "r3.xlarge",
                      "r3.2xlarge",
                      "r3.4xlarge",
                      "r3.8xlarge",
                      "x1.32xlarge"
                    ]
                  },
                  "KernelId": {
                    "type": "String",
                    "required": false,
                    "description": "The kernel ID"
                  },
                  "KeyName": {
                    "type": "String",
                    "required": false,
                    "description": "Provides the name of the EC2 key pair."
                  },
                  "Monitoring": {
                    "type": "Object",
                    "required": false,
                    "description": "Specifies whether monitoring is enabled for the instance.",
                    "properties": {
                      "Enabled": {
                        "type": "Boolean",
                        "required": false,
                        "description": "Indicates whether monitoring is enabled for the instances."
                      }
                    }
                  },
                  "NetworkInterfaces": {
                    "type": "Array",
                    "array-type": "Object",
                    "properties": {
                      "AssociatePublicIpAddress": {
                        "type": "Boolean",
                        "required": false,
                        "description": "Indicates whether the network interface receives a public IP address. You can associate a public IP address with a network interface only if it has a device index of eth0."
                      },
                      "DeleteOnTermination": {
                        "type": "Boolean",
                        "required": false,
                        "description": "Determines whether to delete the network interface on instance termination."
                      },
                      "Description": {
                        "type": "String",
                        "required": false,
                        "description": "The description of this network interface."
                      },
                      "DeviceIndex": {
                        "type": "String",
                        "required": true,
                        "description": "The order in which the network interface should be attached."
                      },
                      "Groups": {
                        "type": "Array",
                        "array-type": "String",
                        "required": false,
                        "resource-ref-type": "AWS::EC2::SecurityGroup",
                        "description": "A list of security group IDs associated with this network interface."
                      },
                      "Ipv6AddressCount": {
                        "type": "Number",
                        "required": false,
                        "description": "The number of IPv6 addresses to associate with the network interface."
                      },
                      "Ipv6Addresses": {
                        "type": "Array",
                        "array-type": "Object",
                        "required": false,
                        "description": "One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet to associate with the network interface.",
                        "properties": {
                          "Ipv6Address": {
                            "type": "String",
                            "required": true,
                            "description": "The IPv6 address to associate with the network interface."
                          }
                        }
                      },
                      "NetworkInterfaceId": {
                        "type": "String",
                        "resource-ref-type": "AWS::EC2::NetworkInterface",
                        "required": true,
                        "description": "The ID of the network interface to attach."
                      },
                      "PrivateIpAddress": {
                        "type": "String",
                        "required": false,
                        "description": "Assigns a single private IP address to the network interface, which is used as the primary private IP address. If you want to specify multiple private IP address, use the PrivateIpAddresses property."
                      },
                      "PrivateIpAddresses": {
                        "type": "Array",
                        "array-type": "Object",
                        "required": false,
                        "description": "Assigns a single private IP address to the network interface, which is used as the primary private IP address. If you want to specify multiple private IP address, use the PrivateIpAddresses property.",
                        "properties": {
                          "PrivateIpAddress": {
                            "type": "String",
                            "required": true,
                            "description": "The private IP address of the network interface."
                          },
                          "Primary": {
                            "type": "Boolean",
                            "required": true,
                            "description": "Sets the private IP address as the primary private address. You can set only one primary private IP address."
                          }
                        }
                      },
                      "SecondaryPrivateIpAddressCount": {
                        "type": "Number",
                        "required": false,
                        "description": "The number of secondary private IP addresses that Amazon EC2 auto assigns to the network interface. Amazon EC2 uses the value of the PrivateIpAddress property as the primary private IP address."
                      },
                      "SubnetId": {
                        "type": "String",
                        "required": false,
                        "resource-ref-type": "AWS::EC2::Subnet",
                        "description": "The ID of the subnet to associate with the network interface."
                      }
                    },
                    "required": false,
                    "description": "A list of network interfaces to associate with this instance."
                  },
                  "Placement": {
                    "type": "Object",
                    "required": false,
                    "description": "The name of an existing placement group that you want to launch the instance into (for cluster instances).",
                    "properties": {
                      "AvailabilityZone": {
                        "type": "String",
                        "required": false,
                        "description": "The Availability Zone (AZ) of the placement group."
                      },
                      "GroupName": {
                        "type": "String",
                        "required": false,
                        "description": "The name of the placement group (for cluster instances)."
                      },
                      "Tenancy": {
                        "type": "String",
                        "required": false,
                        "description": "The tenancy of the instance (if the instance is running in a VPC)."
                      }
                    }
                  },
                  "RamdiskId": {
                    "type": "String",
                    "required": false,
                    "description": "The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, refer to the AWS Resource Center and search for the kernel ID."
                  },
                  "SecurityGroupIds": {
                    "type": "Array",
                    "array-type": "String",
                    "resource-ref-type": "AWS::EC2::SecurityGroup",
                    "required": false,
                    "description": "A list that contains the security group IDs for VPC security groups to assign to the Amazon EC2 instance."
                  },
                  "SpotPrice": {
                    "type": "String",
                    "required": false,
                    "description": "The bid price per unit hour for the specified instance type."
                  },
                  "SubnetId": {
                    "type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::EC2::Subnet",
                    "description": "If you're using Amazon Virtual Private Cloud, this specifies the ID of the subnet that you want to launch the instance into."
                  },
                  "UserData": {
                    "type": "String",
                    "required": false,
                    "description": "Base64-encoded MIME user data that is made available to the instances."
                  },
                  "WeightedCapacity": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of units provided by the specified instance type."
                  },
                  "SecurityGroups": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "One or more security group IDs to associate with the instances.",
                    "properties": {
                      "GroupId": {
                        "type": "String",
                        "required": true,
                        "description": "The ID of a security group."
                      }
                    }
                  },
                  "TagSpecifications": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "The tags to apply during creation.",
                    "properties": {
                      "ResourceType": {
                        "type": "String",
                        "required": false,
                        "description": "The type of resource."
                      },
                      "Tags": {
                        "type": "array",
                        "array-type": "Object",
                        "required": false,
                        "description": "Specifies an arbitrary set of tags (key�value pairs) to associate with this spot fleet. Use tags to manage your resources.",
                        "properties": {
                          "Key": {
                            "type": "String",
                            "required": false,
                            "description": "The key name of the tag."
                          },
                          "Value": {
                            "type": "String",
                            "required": false,
                            "description": "The value for the tag."
                          }
                        }
                      }
                    }
                  }
                }
              },
              "SpotPrice": {
                "type": "String",
                "required": true,
                "description": "The bid price per unit hour."
              },
              "TargetCapacity": {
                "type": "Number",
                "required": true,
                "description": "The number of units to request."
              },
              "TerminateInstancesWithExpiration": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether running Spot instances are terminated when the Spot fleet request expires."
              },
              "ValidFrom": {
                "type": "String",
                "required": false,
                "description": "The start date and time of the request."
              },
              "ValidUntil": {
                "type": "String",
                "required": false,
                "description": "The end date and time of the request"
              },
              "ReplaceUnhealthyInstances": {
                "type": "Boolean",
                "required": false,
                "description": "ndicates whether the Spot fleet should replace unhealthy instances."
              },
              "Type": {
                "type": "String",
                "required": false,
                "description": "The type of request, which indicates whether the fleet will only request the target capacity or also attempt to maintain it.",
                "allowed-values": [
                  "*",
                  "request",
                  "maintain"
                ]
              },
              "InstanceInterruptionBehavior": {
                "type": "String",
                "required": false,
                "description": "The behavior when a Spot Instance is interrupted."
              },
              "LaunchTemplateConfigs": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "Describes a launch template and overrides.",
                "properties": {
                  "LaunchTemplateSpecification": {
                    "type": "Object",
                    "required": false,
                    "description": "The launch template.",
                    "properties": {
                      "LaunchTemplateId": {
                        "type": "String",
                        "required": false,
                        "description": "The ID of the launch template. You must specify either a template ID or a template name.",
                        "resource-ref-type": "AWS::EC2::LaunchTemplate"
                      },
                      "LaunchTemplateName": {
                        "type": "String",
                        "required": false,
                        "description": "The name of the launch template. You must specify either a template name or a template ID.",
                        "resource-ref-type": "AWS::EC2::LaunchTemplate"
                      },
                      "Version": {
                        "type": "String",
                        "required": false,
                        "description": "The version number. By default, the default version of the launch template is used."
                      }
                    }
                  },
                  "Overrides": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "Any parameters that you specify override the same parameters in the launch template.",
                    "properties": {
                      "AvailabilityZone": {
                        "type": "String",
                        "required": false,
                        "description": "The Availability Zone in which to launch the instances."
                      },
                      "InstanceType": {
                        "type": "String",
                        "required": false,
                        "description": "The instance type."
                      },
                      "SpotPrice": {
                        "type": "String",
                        "required": false,
                        "description": "The maximum price per unit hour that you are willing to pay for a Spot Instance."
                      },
                      "SubnetId": {
                        "type": "String",
                        "required": false,
                        "description": "The ID of the subnet in which to launch the instances.",
                        "resource-ref-type": "AWS::EC2::Subnet"
                      },
                      "WeightedCapacity": {
                        "type": "Number",
                        "required": false,
                        "description": "The number of units provided by the specified instance type."
                      }
                    }
                  }
                }
              },
              "LoadBalancersConfig": {
                "type": "Object",
                "required": false,
                "description": "One or more Classic Load Balancers and target groups to attach to the Spot Fleet request.",
                "properties": {
                  "ClassicLoadBalancersConfig": {
                    "type": "Object",
                    "required": false,
                    "description": "The Classic Load Balancers to attach to the SpotFleet request.",
                    "properties": {
                      "ClassicLoadBalancers": {
                        "type": "Array",
                        "array-type": "Object",
                        "required": true,
                        "description": "One or more Classic Load Balancers to attach to the Spot Fleet.",
                        "properties": {
                          "Name": {
                            "type": "String",
                            "required": true,
                            "description": "The name of the load balancer.",
                            "resource-ref-type": "AWS::ElasticLoadBalancing::LoadBalancer"
                          }
                        }
                      }
                    }
                  },
                  "TargetGroupsConfig": {
                    "type": "Object",
                    "required": false,
                    "description": "The target groups to attach to the SpotFleet request.",
                    "properties": {
                      "TargetGroups": {
                        "type": "Array",
                        "array-type": "Object",
                        "required": true,
                        "description": "One or more target groups.",
                        "properties": {
                          "Arn": {
                            "type": "String",
                            "required": true,
                            "description": "The Amazon Resource Name (ARN) of the target group.",
                            "resource-ref-type": "AWS::ElasticLoadBalancingV2::TargetGroup"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::Subnet": {
    "type": "Object",
    "required": false,
    "description": "Creates a subnet in an existing VPC.",
    "return-values": [
      {
        "name": "AvailabilityZone",
        "description": "Returns the availability zone (for example, \"us-east-1a\") of this subnet."
      },
      {
        "name": "Ipv6CidrBlocks",
        "description": "A list of IPv6 CIDR blocks that are associated with the subnet"
      },
      {
        "name": "NetworkAclAssociationId",
        "description": "The ID of the network ACL that is associated with the subnet's VPC, such as acl-5fb85d36."
      },
      {
        "name": "VpcId",
        "description": "The ID of the subnet's VPC, such as vpc-11ad4878."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a subnet in an existing VPC."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AvailabilityZone": {
            "type": "String",
            "required": false,
            "description": "The availability zone you want the subnet in. Default: AWS selects a zone for you (recommended)."
          },
          "CidrBlock": {
            "type": "String",
            "required": true,
            "description": "The CIDR block you want the subnet to cover (for example, \"10.0.0.0/24\")."
          },
          "MapPublicIpOnLaunch": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether instances that are launched in this subnet receive a public IP address. By default, the value is false."
          },
          "VpcId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::VPC",
            "required": true,
            "description": "A Ref structure containing the ID of the VPC where you want to create the subnet. The VPC ID is provided as the value of the \"Ref\" property, as: { \"Ref\": \"VPCID\" }."
          },
          "AssignIpv6AddressOnCreation": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether a network interface created in this subnet receives an IPv6 address."
          },
          "Ipv6CidrBlock": {
            "type": "String",
            "required": false,
            "description": "The IPv6 network range for the subnet, in CIDR notation. The subnet size must use a /64 prefix length."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::SubnetCidrBlock": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::SubnetCidrBlock resource associates a single IPv6 CIDR block with an Amazon VPC subnet.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::SubnetCidrBlock resource associates a single IPv6 CIDR block with an Amazon VPC subnet."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Ipv6CidrBlock": {
            "type": "String",
            "required": true,
            "description": "The IPv6 CIDR block for the subnet. The CIDR block must have a prefix length of /64."
          },
          "SubnetId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::EC2::Subnet",
            "description": "The ID of the subnet to associate the IPv6 CIDR block with."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::SubnetNetworkAclAssociation": {
    "type": "Object",
    "required": false,
    "description": "Associates a subnet with a network ACL.",
    "return-values": [
      {
        "name": "AssociationId",
        "description": "Returns the value of this object's SubnetId property."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Associates a subnet with a network ACL."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "SubnetId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::Subnet",
            "required": true,
            "description": "The ID representing the current association between the original network ACL and the subnet."
          },
          "NetworkAclId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::NetworkAcl",
            "required": true,
            "description": "The ID of the new ACL to associate with the subnet."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::SubnetRouteTableAssociation": {
    "type": "Object",
    "required": false,
    "description": "Associates a subnet with a route table.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Associates a subnet with a route table."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "RouteTableId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::RouteTable",
            "required": true,
            "description": "The ID of the route table. This is commonly written as a reference to a route table declared elsewhere in the template. For example:"
          },
          "SubnetId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::Subnet",
            "required": true,
            "description": "The ID of the subnet. This is commonly written as a reference to a subnet declared elsewhere in the template."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::TransitGateway": {
    "type": "Object",
    "required": false,
    "description": "Creates a transit gateway.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a transit gateway."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DefaultRouteTablePropagation": {
            "type": "String",
            "required": false,
            "description": "Enable or disable automatic propagation of routes to the default propagation route table."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the transit gateway."
          },
          "AutoAcceptSharedAttachments": {
            "type": "String",
            "required": false,
            "description": "Indicates whether attachment requests are automatically accepted."
          },
          "DefaultRouteTableAssociation": {
            "type": "String",
            "required": false,
            "description": "Enable or disable automatic propagation of routes to the default propagation route table."
          },
          "VpnEcmpSupport": {
            "type": "String",
            "required": false,
            "description": "Enable or disable Equal Cost Multipath Protocol."
          },
          "DnsSupport": {
            "type": "String",
            "required": false,
            "description": "Enable or disable DNS support."
          },
          "AmazonSideAsn": {
            "type": "Number",
            "required": false,
            "description": "A private Autonomous System Number (ASN) for the Amazon side of a BGP session."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags to apply to the transit gateway.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::TransitGatewayAttachment": {
    "type": "Object",
    "required": false,
    "description": "Creates an attachment between a VPC and a transit gateway.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an attachment between a VPC and a transit gateway."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "TransitGatewayId": {
            "type": "String",
            "required": true,
            "description": "The ID of the transit gateway.",
            "resource-ref-type": "AWS::EC2::TransitGateway"
          },
          "VpcId": {
            "type": "String",
            "required": true,
            "description": "The ID of the VPC.",
            "resource-ref-type": "AWS::EC2::Vpc"
          },
          "SubnetIds": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "description": "The IDs of one or more subnets.",
            "resource-ref-type": "AWS::EC2::Subnet"
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags to apply to the VPC attachment.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::TransitGatewayRoute": {
    "type": "Object",
    "required": false,
    "description": "Creates a static route for a transit gateway route table.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a static route for a transit gateway route table."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "TransitGatewayRouteTableId": {
            "type": "String",
            "required": true,
            "description": "The ID of the transit gateway route table.",
            "resource-ref-type": "AWS::EC2::TransitGatewayRouteTable"
          },
          "DestinationCidrBlock": {
            "type": "String",
            "required": false,
            "description": "The CIDR range used for destination matches. Routing decisions are based on the most specific match."
          },
          "Blackhole": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether to drop traffic if the target isn't available."
          },
          "TransitGatewayAttachmentId": {
            "type": "String",
            "required": false,
            "description": "The ID of the attachment.",
            "resource-ref-type": "AWS::EC2::TransitGatewayAttachment"
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::TransitGatewayRouteTable": {
    "type": "Object",
    "required": false,
    "description": "Creates a route table for a transit gateway.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a route table for a transit gateway."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "TransitGatewayId": {
            "type": "String",
            "required": true,
            "description": "The ID of the transit gateway.",
            "resource-ref-type": "AWS::EC2::TransitGateway"
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags to apply to the transit gateway route table.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::TransitGatewayRouteTableAssociation": {
    "type": "Object",
    "required": false,
    "description": "Associate an attachment with a transit gateway route table.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Associate an attachment with a transit gateway route table."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "TransitGatewayRouteTableId": {
            "type": "String",
            "required": true,
            "description": "The ID of the transit gateway route table.",
            "resource-ref-type": "AWS::EC2::TransitGatewayRouteTable"
          },
          "TransitGatewayAttachmentId": {
            "type": "String",
            "required": true,
            "description": "The ID of the attachment.",
            "resource-ref-type": "AWS::EC2::TransitGatewayAttachment"
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::TransitGatewayRouteTablePropagation": {
    "type": "Object",
    "required": false,
    "description": "Enables an attachment to propagate routes.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Enables an attachment to propagate routes."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "TransitGatewayRouteTableId": {
            "type": "String",
            "required": true,
            "description": "The ID of the propagation route table.",
            "resource-ref-type": "AWS::EC2::TransitGatewayRouteTable"
          },
          "TransitGatewayAttachmentId": {
            "type": "String",
            "required": true,
            "description": "The ID of the attachment.",
            "resource-ref-type": "AWS::EC2::TransitGatewayAttachment"
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::Volume": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::Volume type creates a new Elastic Block Store volume. You can set a deletion policy for your volume to control how AWS CloudFormation handles the volume when the stack is deleted. For Elastic Block Store volumes, you can choose to retain the volume, to delete the volume, or to create a snapshot of the volume.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::Volume type creates a new Elastic Block Store volume. You can set a deletion policy for your volume to control how AWS CloudFormation handles the volume when the stack is deleted. For Elastic Block Store volumes, you can choose to retain the volume, to delete the volume, or to create a snapshot of the volume."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain",
          "Snapshot"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AutoEnableIO": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the volume is auto-enabled for I/O operations."
          },
          "AvailabilityZone": {
            "type": "String",
            "required": true,
            "description": "The Availability Zone in which to create the new volume.",
            "allowed-values": [
              "us-east-1b",
              "us-east-1c",
              "us-east-1d",
              "us-east-1e",
              "us-west-1b",
              "us-west-1c",
              "us-west-2a",
              "us-west-2b",
              "us-west-2c",
              "ap-northeast-1a",
              "ap-northeast-1c",
              "ap-northeast-2a",
              "ap-northeast-2c",
              "ap-south-1a",
              "ap-south-1b",
              "ap-southeast-1a",
              "ap-southeast-1b",
              "ap-southeast-2a",
              "ap-southeast-2b",
              "ap-southeast-2c",
              "sa-east-1a",
              "sa-east-1b",
              "sa-east-1c",
              "eu-west-1a",
              "eu-west-1b",
              "eu-west-1c",
              "eu-central-1a",
              "eu-central-1b"
            ]
          },
          "Encrypted": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the volume is encrypted. Encrypted Amazon EBS volumes can only be attached to instance types that support Amazon EBS encryption."
          },
          "Iops": {
            "type": "Number",
            "required": false,
            "description": "The number of I/O operations per second (IOPS) that the volume supports. This can be any value from 1-1000. Required: Conditional. Required when the volume type is \"io1\"; not used with standard volumes."
          },
          "KmsKeyId": {
            "type": "String",
            "required": false,
            "description": "The Amazon Resource Name (ARN) of the AWS Key Management Service master key that is used to create the encrypted volume."
          },
          "Size": {
            "type": "String",
            "required": false,
            "description": "The size of the volume, in gibibytes (GiBs). This can be any value from 1�1024. Required: Conditional. Required if you are not creating a volume from a snapshot. If you specify Size, do not specify SnapshotId."
          },
          "SnapshotId": {
            "type": "String",
            "required": false,
            "description": "The snapshot from which to create the new volume. Required: Conditional. Required if you are creating a volume from a snapshot. If you do not specify a value for SnapshotId, you should specify a value for Size."
          },
          "VolumeType": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "standard",
              "io1",
              "gp2",
              "sc1",
              "st1"
            ],
            "description": "The volume type. This can be either \"standard\" or \"io1\". If no value is specified, \"standard\" will be used."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      }
    }
  }
,
  "AWS::EC2::VolumeAttachment": {
    "type": "Object",
    "required": false,
    "description": "Attaches a volume to an EC2 instance.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a new route table within a VPC. After you create a new route table, you can add routes and associate the table with a subnet."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Device": {
            "type": "String",
            "required": true,
            "description": "How the device is exposed to the instance (e.g., /dev/sdh, or xvdh)."
          },
          "InstanceId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::Instance",
            "required": true,
            "description": "The ID of the instance to which the volume attaches. This value can be a reference to an AWS::EC2::Instance resource, or it can be the instance ID of an existing EC2 instance."
          },
          "VolumeId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::Volume",
            "required": true,
            "description": "The ID of the Amazon EBS volume. The volume and instance must be within the same Availability Zone. This value can be a reference to an AWS::EC2::Volume resource, or it can be the volume ID of an existing Amazon EBS volume."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::VPC": {
    "type": "Object",
    "required": false,
    "description": "Creates a Virtual Private Cloud (VPC) with the CIDR block that you specify.",
    "return-values": [
      {
        "name": "CidrBlock",
        "description": "he set of IP addresses for the VPC"
      },
      {
        "name": "DefaultNetworkAcl",
        "description": "The default network ACL ID that is associated with the VPC, which AWS creates when you create a VPC."
      },
      {
        "name": "DefaultSecurityGroup",
        "description": "The default security group ID that is associated with the VPC, which AWS creates when you create a VPC."
      },
      {
        "name": "Ipv6CidrBlocks",
        "description": "A list of IPv6 CIDR blocks that are associated with the VPC"
      },
      {
        "name": "CidrBlockAssociations",
        "description": "A list of IPv4 CIDR block association IDs for the VPC. For example, [ vpc-cidr-assoc-0280ab6b ]."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a Virtual Private Cloud (VPC) with the CIDR block that you specify."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CidrBlock": {
            "type": "String",
            "required": true,
            "description": "The CIDR block you want the VPC to cover. For example: \"10.0.0.0/16\"."
          },
          "EnableDnsSupport": {
            "type": "Boolean",
            "required": false,
            "description": "Specifies whether DNS resolution is supported for the VPC. If this attribute is true, the Amazon DNS server resolves DNS hostnames for your instances to their corresponding IP addresses; otherwise, it does not. By default the value is set to true."
          },
          "EnableDnsHostnames": {
            "type": "Boolean",
            "required": false,
            "description": "Specifies whether the instances launched in the VPC get DNS hostnames. If this attribute is true, instances in the VPC get DNS hostnames; otherwise, they do not. You can only set EnableDnsHostnames to true if you also set the EnableDnsSupport attribute to true. By default, the value is set to false."
          },
          "InstanceTenancy": {
            "type": "String",
            "allowed-values": [
              "default",
              "dedicated"
            ],
            "required": false,
            "description": "The allowed tenancy of instances launched into the VPC. A value of \"default\" means instances can be launched with any tenancy; a value of \"dedicated\" means instances must be launched with tenancy as dedicated."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::VPCCidrBlock": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::VPCCidrBlock resource associates a single Amazon-provided IPv6 CIDR block with an Amazon VPC VPC.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::VPCCidrBlock resource associates a single Amazon-provided IPv6 CIDR block with an Amazon VPC VPC."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AmazonProvidedIpv6CidrBlock": {
            "type": "Boolean",
            "required": false,
            "description": "Whether to request an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC."
          },
          "VpcId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::EC2::VPC",
            "description": "The ID of the VPC to associate the Amazon-provided IPv6 CIDR block with."
          },
          "CidrBlock": {
            "type": "String",
            "required": false,
            "description": "An IPv4 CIDR block to associate with the VPC."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::VPCDHCPOptionsAssociation": {
    "type": "Object",
    "required": false,
    "description": "Associates a set of DHCP options (that you've previously created) with the specified VPC.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Associates a set of DHCP options (that you've previously created) with the specified VPC."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "VpcId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::VPC",
            "required": true,
            "description": "The ID of the VPC to associate with this DHCP options set."
          },
          "DhcpOptionsId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::DHCPOptions",
            "required": true,
            "description": "The ID of the DHCP options you want to associate with the VPC, or \"default\" if you want the VPC to use no DHCP options."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::VPCEndpoint": {
    "type": "Object",
    "required": false,
    "description": "Creates a VPC endpoint that you can use to establish a private connection between your VPC and another AWS service without requiring access over the Internet, a VPN connection, or AWS Direct Connect.",
    "return-values": [
      {
        "name": "CreationTimestamp",
        "description": "The date and time the VPC endpoint was created. For example: Fri Sep 28 23:34:36 UTC 2018"
      },
      {
        "name": "DnsEntries",
        "description": "The DNS entries for the endpoint. Each entry is a combination of the hosted zone ID and the DNS name."
      },
      {
        "name": "NetworkInterfaceIds",
        "description": "One or more network interfaces for the endpoint."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a VPC endpoint that you can use to establish a private connection between your VPC and another AWS service without requiring access over the Internet, a VPN connection, or AWS Direct Connect."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "PolicyDocument": {
            "type": "Json",
            "required": false,
            "description": "A policy to attach to the endpoint that controls access to the service."
          },
          "RouteTableIds": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::RouteTable",
            "description": "One or more route table IDs that are used by the VPC to reach the endpoint."
          },
          "ServiceName": {
            "type": "String",
            "required": true,
            "description": "The AWS service to which you want to establish a connection. Specify the service name in the form of com.amazonaws.region.service."
          },
          "VpcId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::VPC",
            "required": true,
            "description": "The ID of the VPC in which the endpoint is used."
          },
          "IsPrivateDnsEnabled": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether to associate a private hosted zone with the specified VPC."
          },
          "SubnetIds": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The ID of one or more subnets in which to create an endpoint network interface.",
            "resource-ref-type": "AWS::EC2::Subnet"
          },
          "SecurityGroupIds": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The ID of one or more security groups to associate with the endpoint network interface.",
            "resource-ref-type": "AWS::EC2::SecurityGroup"
          },
          "VpcEndpointType": {
            "type": "String",
            "required": false,
            "description": "The type of endpoint.",
            "allowed-values": [
              "*",
              "Interface",
              "Gateway"
            ]
          },
          "PrivateDnsEnabled": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether to associate a private hosted zone with the specified VPC."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::VPCEndpointConnectionNotification": {
    "type": "Object",
    "required": false,
    "description": "Creates a connection notification for the specified VPC endpoint or VPC endpoint service.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a connection notification for the specified VPC endpoint or VPC endpoint service."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ConnectionEvents": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "description": "One or more endpoint events for which to receive notifications.",
            "allowed-values": [
              "*",
              "Accept",
              "Connect",
              "Delete",
              "Reject"
            ]
          },
          "VPCEndpointId": {
            "type": "String",
            "required": false,
            "description": "The ID of the endpoint."
          },
          "ServiceId": {
            "type": "String",
            "required": false,
            "description": "The ID of the endpoint service.",
            "resource-ref-type": [
              "*"
            ]
          },
          "ConnectionNotificationArn": {
            "type": "String",
            "required": true,
            "description": "The ARN of the SNS topic for the notifications.",
            "resource-ref-type": [
              "*",
              "AWS::SNS::Topic"
            ]
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::VPCEndpointServicePermissions": {
    "type": "Object",
    "required": false,
    "description": "Grant or revoke permissions for service consumers (IAM users, IAM roles, and AWS accounts) to connect to the VPC endpoint service.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Grant or revoke permissions for service consumers (IAM users, IAM roles, and AWS accounts) to connect to the VPC endpoint service."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AllowedPrincipals": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The Amazon Resource Names (ARN) of one or more principals (IAM users, IAM roles, and AWS accounts).",
            "resource-ref-type": "*"
          },
          "ServiceId": {
            "type": "String",
            "required": true,
            "description": "The ID of the VPC endpoint service."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::VPCGatewayAttachment": {
    "type": "Object",
    "required": false,
    "description": "Attaches a gateway to a VPC.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Attaches a gateway to a VPC."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "VpcId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::VPC",
            "required": true,
            "description": "The ID of the VPC to associate with this gateway."
          },
          "InternetGatewayId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::InternetGateway",
            "required": true,
            "description": "The ID of the Internet gateway. Required: Conditional. You must specify either InternetGatewayId or VpnGatewayId, but not both."
          },
          "VpnGatewayId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::VPNGateway",
            "required": true,
            "description": "The ID of the virtual private network (VPN) gateway to attach to the VPC. Required: Conditional. You must specify either InternetGatewayId or VpnGatewayId, but not both."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::VPCPeeringConnection": {
    "type": "Object",
    "required": false,
    "description": "A VPC peering connection enables a network connection between two virtual private clouds (VPCs) so that you can route traffic between them by means of a private IP addresses.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "A VPC peering connection enables a network connection between two virtual private clouds (VPCs) so that you can route traffic between them by means of a private IP addresses."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "PeerOwnerId": {
            "type": "String",
            "required": false,
            "description": "The AWS account ID of the owner of the VPC that you want to peer with."
          },
          "PeerRoleArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The Amazon Resource Name (ARN) of the VPC peer role for the peering connection in another AWS account."
          },
          "PeerVpcId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::EC2::VPC",
            "description": "The ID of the VPC with which you are creating the peering connection."
          },
          "VpcId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::EC2::VPC",
            "description": "The ID of the VPC that is requesting a peering connection."
          },
          "PeerRegion": {
            "type": "String",
            "required": false,
            "description": "The region code for the accepter VPC, if the accepter VPC is located in a region other than the region in which you make the request."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::VPNConnection": {
    "type": "Object",
    "required": false,
    "description": "Creates a new VPN connection between an existing virtual private gateway and a VPN customer gateway.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a new VPN connection between an existing virtual private gateway and a VPN customer gateway."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Type": {
            "type": "String",
            "required": true,
            "description": "The type of VPN connection this virtual private gateway supports. Example: \"ipsec.1\""
          },
          "CustomerGatewayId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::CustomerGateway",
            "required": true,
            "description": "The ID of the customer gateway. This can either be an embedded JSON object or a reference to a Gateway ID."
          },
          "StaticRoutesOnly": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the VPN connection requires static routes."
          },
          "VpnGatewayId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::VPNGateway",
            "required": true,
            "description": "The ID of the virtual private gateway. This can either be an embedded JSON object or a reference to a Gateway ID."
          },
          "VpnTunnelOptionsSpecifications": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tunnel options for the VPN connection.",
            "properties": {
              "PreSharedKey": {
                "type": "String",
                "required": false,
                "description": "The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and customer gateway."
              },
              "TunnelInsideCidr": {
                "type": "String",
                "required": false,
                "description": "The range of inside IP addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same virtual private gateway."
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::VPNConnectionRoute": {
    "type": "Object",
    "required": false,
    "description": "A static route that is associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "A static route that is associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DestinationCidrBlock": {
            "type": "DestinationCidrBlock",
            "required": true,
            "description": "The CIDR block that is associated with the local subnet of the customer network."
          },
          "VpnConnectionId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::VPNConnection",
            "required": true,
            "description": "The ID of the VPN connection."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::VPNGateway": {
    "type": "Object",
    "required": false,
    "description": "Creates a new virtual private gateway. A virtual private gateway is the VPC-side endpoint for your VPN connection.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a new virtual private gateway. A virtual private gateway is the VPC-side endpoint for your VPN connection."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Type": {
            "type": "String",
            "required": true,
            "description": "The type of VPN connection this customer gateway supports.  For example: ipsec.1",
            "allowed-values": [
              "ipsec.1"
            ]
          },
          "AmazonSideAsn": {
            "type": "Number",
            "required": false,
            "description": "The private Autonomous System Number (ASN) for the Amazon side of a BGP session."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::VPNGatewayRoutePropagation": {
    "type": "Object",
    "required": false,
    "description": "Enables a virtual private gateway (VGW) to propagate routes to the routing tables of a VPC.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Enables a virtual private gateway (VGW) to propagate routes to the routing tables of a VPC."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "RouteTableIds": {
            "type": "Array",
            "array-type": "Object",
            "resource-ref-type": "AWS::EC2::RouteTable",
            "required": false,
            "description": "A list of routing table IDs that are associated with a VPC. The routing tables must be associated with the same VPC that the virtual private gateway is attached to."
          },
          "VpnGatewayId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::VPNGateway",
            "required": true,
            "description": "The ID of the virtual private gateway that is attached to a VPC. The virtual private gateway must be attached to the same VPC that the routing tables are associated with."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ECR::Repository": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ECR::Repository resource creates an Amazon EC2 Container Registry (Amazon ECR) repository, where users can push and pull Docker images.",
    "return-values": [
      {
        "name": "Arn",
        "description": "Arn of the ECR Repository"
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ECR::Repository resource creates an Amazon EC2 Container Registry (Amazon ECR) repository, where users can push and pull Docker images."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "RepositoryName": {
            "type": "String",
            "required": false,
            "description": "A name for the image repository."
          },
          "RepositoryPolicyText": {
            "type": "Json",
            "required": false,
            "description": "A policy that controls who has access to the repository and which actions they can perform on it."
          },
          "LifecyclePolicy": {
            "type": "Object",
            "required": false,
            "description": "A lifecycle policy for the repository.",
            "properties": {
              "LifecyclePolicyText": {
                "type": "String",
                "required": false,
                "description": "The JSON repository policy text to apply to the repository. The length must be between 100 and 10,240 characters."
              },
              "RegistryId": {
                "type": "String",
                "required": false,
                "description": "The AWS account ID that's associated with the registry that contains the repository. If you do?n't specify a registry, the default registry is used."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ECS::Cluster": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ECS::Cluster resource creates an Amazon EC2 Container Service (Amazon ECS) cluster. ",
    "return-values": [
      {
        "name": "Arn",
        "description": "The Amazon Resource Name (ARN) of the Amazon ECS cluster, such as arn:aws:ecs:us-east-2:123456789012:cluster/MyECSCluster."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ECS::Cluster resource creates an Amazon EC2 Container Service (Amazon ECS) cluster. "
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ClusterName": {
            "type": "String",
            "required": false,
            "description": "A name for the cluster."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags to apply to the cluster.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ECS::Service": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ECS::Service resource creates an Amazon EC2 Container Service (Amazon ECS) service that runs and maintains the desired number of tasks and associated load balancers.",
    "return-values": [
      {
        "name": "Name",
        "description": "The name of the Amazon ECS service, such as sample-webapp."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ECS::Service resource creates an Amazon EC2 Container Service (Amazon ECS) service that runs and maintains the desired number of tasks and associated load balancers."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Cluster": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::ECS::Cluster",
            "description": "The name or Amazon Resource Name (ARN) of the cluster that you want to run your service on. If you do not specify a cluster, Amazon ECS uses the default cluster."
          },
          "DeploymentConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Configures how many tasks run during a deployment.",
            "properties": {
              "MaximumPercent": {
                "type": "Number",
                "required": false,
                "description": "The maximum number of tasks, specified as a percentage of the Amazon ECS service's DesiredCount value, that can run in a service during a deployment."
              },
              "MinimumHealthyPercent": {
                "type": "Number",
                "required": false,
                "description": "The minimum number of tasks, specified as a percentage of the Amazon ECS service's DesiredCount value, that must continue to run and remain healthy during a deployment."
              }
            }
          },
          "DesiredCount": {
            "type": "Number",
            "required": false,
            "description": "The number of simultaneous tasks, which you specify by using the TaskDefinition property, that you want to run on the cluster."
          },
          "LoadBalancers": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A list of load balancer objects to associate with the cluster.",
            "properties": {
              "ContainerName": {
                "type": "String",
                "required": false,
                "description": "The name of a container to use with the load balancer."
              },
              "ContainerPort": {
                "type": "Number",
                "required": false,
                "description": "The port number on the container to direct load balancer traffic to. Your container instances must allow ingress traffic on this port."
              },
              "LoadBalancerName": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::ElasticLoadBalancing::LoadBalancer",
                "description": "The name of the load balancer to associated with the Amazon ECS service."
              },
              "TargetGroupArn": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::ElasticLoadBalancingV2::TargetGroup",
                "description": "An Application load balancer target group Amazon Resource Name (ARN) to associate with the Amazon ECS service."
              }
            }
          },
          "PlacementConstraints": {
            "type": "Object",
            "required": false,
            "description": "The placement constraints for the tasks in the service.",
            "properties": {
              "Type": {
                "type": "String",
                "required": false,
                "description": "The type of constraint: distinctInstance or memberOf.",
                "allowed-values": [
                  "*",
                  "distinctInstance",
                  "memberOf"
                ]
              },
              "Expression": {
                "type": "String",
                "required": false,
                "description": "A cluster query language expression to apply to the constraint."
              }
            }
          },
          "PlacementStrategies": {
            "type": "Object",
            "required": false,
            "description": "The placement strategies that determine how tasks for the service are placed.",
            "properties": {
              "Type": {
                "type": "String",
                "required": false,
                "description": "The type of placement strategy. Can be one of the following values: random, spread, or binpack.",
                "allowed-values": [
                  "*",
                  "random",
                  "spread",
                  "binpack"
                ]
              },
              "Field": {
                "type": "String",
                "required": false,
                "description": "The field to apply the placement strategy against."
              }
            }
          },
          "Role": {
            "type": "String",
            "resource-ref-type": "AWS::IAM::Role",
            "required": false,
            "description": "The name or ARN of an AWS Identity and Access Management (IAM) role that allows your Amazon ECS container agent to make calls to your load balancer."
          },
          "ServiceName": {
            "type": "String",
            "required": false,
            "description": "The name of your service."
          },
          "TaskDefinition": {
            "type": "String",
            "resource-ref-type": "AWS::ECS::TaskDefinition",
            "required": true,
            "description": "The ARN of the task definition that you want to run on the cluster."
          },
          "LaunchType": {
            "type": "String",
            "required": false,
            "description": "The launch type on which to run your service. If one is not specified, EC2 will be used by default. Valid values include EC2 and FARGATE.",
            "allowed-values": [
              "*",
              "EC2",
              "FARGATE"
            ]
          },
          "NetworkConfiguration": {
            "type": "Object",
            "required": false,
            "description": "The network configuration for the service. This parameter is required for task definitions that use the awsvpc network mode to receive their own Elastic Network Interface, and it is not supported for other network modes.",
            "properties": {
              "AwsvpcConfiguration": {
                "type": "Object",
                "required": false,
                "description": "The VPC subnets and security groups associated with a task.",
                "properties": {
                  "AssignPublicIp": {
                    "type": "String",
                    "required": false,
                    "description": "Valid values include ENABLED and DISABLED.",
                    "allowed-values": [
                      "*",
                      "ENABLED",
                      "DISABLED"
                    ]
                  },
                  "SecurityGroups": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::EC2::SecurityGroups",
                    "description": "The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used."
                  },
                  "Subnets": {
                    "type": "Array",
                    "array-type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::EC2::Subnet",
                    "description": "The subnets associated with the Amazon ECS task or service."
                  }
                }
              }
            }
          },
          "PlatformVersion": {
            "type": "String",
            "required": false,
            "description": "The platform version on which to run your service. If one is not specified, the latest version will be used by default."
          },
          "HealthCheckGracePeriodSeconds": {
            "type": "Number",
            "required": false,
            "description": "The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started."
          },
          "ServiceRegistries": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Details of the service registry.",
            "properties": {
              "Port": {
                "type": "Number",
                "required": false,
                "description": "The port value used if your service discovery service specified an SRV record."
              },
              "RegistryArn": {
                "type": "String",
                "required": false,
                "description": "The Amazon Resource Name (ARN) of the service registry.",
                "resource-ref-type": [
                  "*"
                ]
              },
              "ContainerName": {
                "type": "String",
                "required": false,
                "description": "The container name value, already specified in the task definition, to be used for your service discovery service."
              },
              "ContainerPort": {
                "type": "Number",
                "required": false,
                "description": "The port value, already specified in the task definition, to be used for your service discovery service."
              }
            }
          },
          "SchedulingStrategy": {
            "type": "String",
            "required": false,
            "description": "The scheduling strategy to use for the service.",
            "allowed-values": [
              "*",
              "REPLICA",
              "DAEMON"
            ]
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags to apply to the service.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ECS::TaskDefinition": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ECS::TaskDefinition resource describes the container and volume definitions of an Amazon EC2 Container Service (Amazon ECS) task.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ECS::TaskDefinition resource describes the container and volume definitions of an Amazon EC2 Container Service (Amazon ECS) task."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ContainerDefinitions": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "A list of container definitions in JSON format that describe the containers that make up your task.",
            "properties": {
              "Command": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The CMD value to pass to the container."
              },
              "Cpu": {
                "type": "Number",
                "required": false,
                "description": "The minimum number of CPU units to reserve for the container."
              },
              "DisableNetworking": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether networking is disabled within the container."
              },
              "DnsSearchDomains": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "A list of DNS search domains that are provided to the container."
              },
              "DnsServers": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "A list of DNS servers that Amazon ECS provides to the container."
              },
              "DockerLabels": {
                "type": "String",
                "required": "Json",
                "description": "A key-value map of labels for the container."
              },
              "DockerSecurityOptions": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "A list of custom labels for SELinux and AppArmor multi-level security systems."
              },
              "EntryPoint": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The ENTRYPOINT value to pass to the container."
              },
              "Environment": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "The environment variables to pass to the container.",
                "properties": {
                  "Name": {
                    "type": "String",
                    "required": true,
                    "description": "The name of the environment variable."
                  },
                  "Value": {
                    "type": "String",
                    "required": true,
                    "description": "The value of the environment variable."
                  }
                }
              },
              "Essential": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether the task stops if this container fails."
              },
              "Hostname": {
                "type": "String",
                "required": false,
                "description": "The name that Docker will use for the container's hostname."
              },
              "Image": {
                "type": "String",
                "required": true,
                "description": "The image to use for a container, which is passed directly to the Docker daemon."
              },
              "Links": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The name of another container to connect to. With links, containers can communicate with each other without using port mappings."
              },
              "LogConfiguration": {
                "type": "Object",
                "required": false,
                "description": "Configures a custom log driver for the container.",
                "properties": {
                  "LogDriver": {
                    "type": "String",
                    "required": true,
                    "allowed-values": [
                      "*",
                      "json-file",
                      "syslog",
                      "journald",
                      "gelf",
                      "fluentd",
                      "awslogs",
                      "splunk"
                    ],
                    "description": "The log driver to use for the container."
                  },
                  "Options": {
                    "type": "Json",
                    "required": true,
                    "description": "The configuration options to send to the log driver."
                  }
                }
              },
              "Memory": {
                "type": "Number",
                "required": true,
                "description": "The number of MiB of memory to reserve for the container. If your container attempts to exceed the allocated memory, the container is killed."
              },
              "MemoryReservation": {
                "type": "Number",
                "required": false,
                "description": "The number of MiB of memory to reserve for the container. When system memory is under contention, Docker attempts to keep the container memory within the limit."
              },
              "MountPoints": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "The mount points for data volumes in the container.",
                "properties": {
                  "ContainerPath": {
                    "type": "String",
                    "required": true,
                    "description": "The path on the container that indicates where you want to mount the volume."
                  },
                  "SourceVolume": {
                    "type": "String",
                    "required": true,
                    "description": "The name of the volume to mount."
                  },
                  "ReadOnly": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether the container can write to the volume."
                  }
                }
              },
              "Name": {
                "type": "String",
                "required": true,
                "description": "A name for the container."
              },
              "PortMappings": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "A mapping of the container port to a host port. Port mappings enable containers to access ports on the host container instance to send or receive traffic.",
                "properties": {
                  "ContainerPort": {
                    "type": "Number",
                    "required": true,
                    "description": "The port number on the container that is bound to the host port."
                  },
                  "HostPort": {
                    "type": "Number",
                    "required": true,
                    "description": "The host port number on the container instance that you want to reserve for your container. "
                  },
                  "Protocol": {
                    "type": "String",
                    "required": false,
                    "description": "The protocol used for the port mapping.",
                    "allowed-values": [
                      "*",
                      "tcp",
                      "udp"
                    ]
                  }
                }
              },
              "Privileged": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether the container is given full access to the host container instance."
              },
              "ReadonlyRootFilesystem": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether the container's root file system is mounted as read only."
              },
              "Ulimits": {
                "type": "String",
                "array-type": "Object",
                "required": false,
                "description": "Indicates whether the container's root file system is mounted as read only.",
                "properties": {
                  "HardLimit": {
                    "type": "Number",
                    "required": true,
                    "description": "The hard limit for the ulimit type."
                  },
                  "Name": {
                    "type": "String",
                    "required": true,
                    "allowed-values": [
                      "*",
                      "core",
                      "cpu",
                      "data",
                      "fsize",
                      "locks",
                      "memlock",
                      "msgqueue",
                      "nice",
                      "nofile",
                      "nproc",
                      "rss",
                      "rtprio",
                      "rttime",
                      "sigpending",
                      "stack"
                    ],
                    "description": "The type of ulimit."
                  },
                  "SoftLimit": {
                    "type": "Number",
                    "required": true,
                    "description": "The soft limit for the ulimit type."
                  }
                }
              },
              "User": {
                "type": "String",
                "required": false,
                "description": "The user name to use inside the container."
              },
              "VolumesFrom": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "Data volumes to mount from another container.",
                "properties": {
                  "SourceContainer": {
                    "type": "String",
                    "required": true,
                    "description": "The name of the container that has the volumes to mount."
                  },
                  "HostPort": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether the container can write to the volume."
                  },
                  "ReadOnly": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether the container can write to the volume."
                  }
                }
              },
              "WorkingDirectory": {
                "type": "String",
                "required": false,
                "description": "The working directory in the container in which to run commands."
              },
              "ExtraHosts": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "A list of hostnames and IP address mappings to append to the /etc/hosts file on the container.",
                "properties": {
                  "Hostname": {
                    "type": "String",
                    "required": true,
                    "description": "The hostname to use in the /etc/hosts file."
                  },
                  "IpAddress": {
                    "type": "String",
                    "required": true,
                    "description": "The IP address to use in the /etc/hosts file."
                  }
                }
              },
              "LinuxParameters": {
                "type": "Object",
                "required": false,
                "description": "The Linux-specific options that are applied to the container.",
                "properties": {
                  "Capabilities": {
                    "type": "Object",
                    "required": false,
                    "description": "The Linux capabilities for the container that are added to or dropped from the default configuration provided by Docker.",
                    "properties": {
                      "Add": {
                        "type": "Array",
                        "array-type": "String",
                        "required": false,
                        "description": "he Linux capabilities to add to the default Docker configuration."
                      },
                      "Drop": {
                        "type": "Array",
                        "array-type": "String",
                        "required": false,
                        "description": "The Linux capabilities to remove from the default Docker configuration."
                      }
                    }
                  },
                  "Devices": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "Any host devices to expose to the container.",
                    "properties": {
                      "ContainerPath": {
                        "type": "String",
                        "required": false,
                        "description": "The path inside the container to expose the host device to."
                      },
                      "HostPath": {
                        "type": "String",
                        "required": true,
                        "description": "The path for the device on the host container instance."
                      },
                      "Permissions": {
                        "type": "Array",
                        "array-type": "String",
                        "required": false,
                        "description": "The explicit permissions to provide to the container for the device. By default, the container is able to read, write, and mknod the device."
                      }
                    }
                  },
                  "InitProcessEnabled": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether to run an init process inside the container that forwards signals and reaps processes."
                  },
                  "SharedMemorySize": {
                    "type": "Number",
                    "required": false,
                    "description": "The value for the size (in MiB) of the /dev/shm volume."
                  },
                  "Tmpfs": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "The container path, mount options, and size (in MiB) of the tmpfs mount.",
                    "properties": {
                      "ContainerPath": {
                        "type": "String",
                        "required": false,
                        "description": "The absolute file path where the tmpfs volume is to be mounted."
                      },
                      "MountOptions": {
                        "type": "Array",
                        "array-type": "String",
                        "required": false,
                        "description": "The list of tmpfs volume mount options."
                      },
                      "Size": {
                        "type": "Number",
                        "required": false,
                        "description": "The size (in MiB) of the tmpfs volume."
                      }
                    }
                  }
                }
              },
              "HealthCheck": {
                "type": "Object",
                "required": false,
                "description": "A container health check.",
                "properties": {
                  "Command": {
                    "type": "Array",
                    "array-type": "String",
                    "required": true,
                    "description": "A string array representing the command that the container runs to determine if it is healthy."
                  },
                  "Interval": {
                    "type": "Number",
                    "required": false,
                    "description": "The time period in seconds between each health check execution."
                  },
                  "Retries": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of times to retry a failed health check before the container is considered unhealthy. "
                  },
                  "StartPeriod": {
                    "type": "Number",
                    "required": false,
                    "description": "The optional grace period within which to provide containers time to bootstrap before failed health checks count towards the maximum number of retries."
                  },
                  "Timeout": {
                    "type": "Number",
                    "required": false,
                    "description": "The time period in seconds to wait for a health check to succeed before it is considered a failure. "
                  }
                }
              },
              "RepositoryCredentials": {
                "type": "Object",
                "required": false,
                "description": "The repository credentials for private registry authentication.",
                "properties": {
                  "CredentialsParameter": {
                    "type": "String",
                    "required": false,
                    "description": "The Amazon Resource Name (ARN) of the secret containing the private repository credentials."
                  }
                }
              }
            }
          },
          "Family": {
            "type": "String",
            "required": true,
            "description": "The name of a family that this task definition is registered to."
          },
          "NetworkMode": {
            "type": "String",
            "required": false,
            "description": "The Docker networking mode to use for the containers in the task, such as none, bridge, or host.",
            "allowed-values": [
              "*",
              "bridge",
              "host",
              "none"
            ]
          },
          "PlacementConstraints": {
            "type": "Object",
            "required": false,
            "description": "The placement constraints for the tasks in the service.",
            "properties": {
              "Type": {
                "type": "String",
                "required": false,
                "description": "The type of constraint: distinctInstance or memberOf.",
                "allowed-values": [
                  "*",
                  "distinctInstance",
                  "memberOf"
                ]
              },
              "Expression": {
                "type": "String",
                "required": false,
                "description": "A cluster query language expression to apply to the constraint."
              }
            }
          },
          "TaskRoleArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
          },
          "Volumes": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "A list of volume definitions in JSON format for volumes that you can use in your container definitions.",
            "properties": {
              "Name": {
                "type": "String",
                "required": true,
                "description": "The name of the volume. To specify mount points in your container definitions, use the value of this property."
              },
              "Host": {
                "type": "Object",
                "required": false,
                "description": "Determines whether your data volume persists on the host container instance and at the location where it is stored.",
                "properties": {
                  "SourcePath": {
                    "type": "String",
                    "required": false,
                    "description": "Determines whether your data volume persists on the host container instance and at the location where it is stored."
                  }
                }
              },
              "DockerVolumeConfiguration": {
                "type": "Object",
                "required": false,
                "description": "Specifies the configuration of a Docker volume.",
                "properties": {
                  "Autoprovision": {
                    "type": "Boolean",
                    "required": false,
                    "description": "If true, the Docker volume is created if it does not already exist."
                  },
                  "Driver": {
                    "type": "String",
                    "required": false,
                    "description": "The Docker volume driver to use."
                  },
                  "DriverOpts": {
                    "type": "Json",
                    "required": false,
                    "description": "A map of Docker driver specific options passed through."
                  },
                  "Labels": {
                    "type": "Json",
                    "required": false,
                    "description": "Custom metadata to add to your Docker volume."
                  },
                  "Scope": {
                    "type": "String",
                    "required": false,
                    "description": "The scope for the Docker volume which determines it's lifecycle."
                  }
                }
              }
            }
          },
          "Cpu": {
            "type": "String",
            "required": false,
            "description": "The number of cpu units used by the task."
          },
          "ExecutionRoleArn": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The Amazon Resource Name (ARN) of the task execution role that containers in this task can assume."
          },
          "Memory": {
            "type": "String",
            "required": false,
            "description": "The amount (in MiB) of memory used by the task."
          },
          "RequiresCompatibilities": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The launch type the task requires. If no value is specified, it will default to EC2. Valid values include EC2 and FARGATE.",
            "allowed-values": [
              "*",
              "EC2",
              "FARGATE"
            ]
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags to apply to the task definition.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EFS::FileSystem": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EFS::FileSystem resource creates a new, empty file system in Amazon Elastic File System (Amazon EFS).",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EFS::FileSystem resource creates a new, empty file system in Amazon Elastic File System (Amazon EFS)."
      },
      "Properties": {
        "type": "Object",
        "required": false,
        "properties": {
          "PerformanceMode": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "generalPurpose",
              "maxIO"
            ],
            "description": "The performance mode of the file system."
          },
          "Encrypted": {
            "type": "Boolean",
            "required": false,
            "description": "A boolean value that, if true, creates an encrypted file system."
          },
          "KmsKeyId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::KMS::Key",
            "description": "The ID of the AWS KMS customer master key (CMK) to use to protect the encrypted file system."
          },
          "ProvisionedThroughputInMibps": {
            "type": "Number",
            "required": false,
            "description": "The throughput, measured in MiB/s, that you want to provision for a file system that you're creating. "
          },
          "ThroughputMode": {
            "type": "String",
            "required": false,
            "description": "The throughput mode for the file system to be created.",
            "allowed-values": [
              "*",
              "bursting",
              "provisioned"
            ]
          },
          "FileSystemTags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EFS::MountTarget": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EFS::MountTarget resource creates a mount target for an Amazon Elastic File System (Amazon EFS) file system (AWS::EFS::FileSystem).",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EFS::MountTarget resource creates a mount target for an Amazon Elastic File System (Amazon EFS) file system (AWS::EFS::FileSystem)."
      },
      "Properties": {
        "type": "Object",
        "required": false,
        "properties": {
          "FileSystemId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::EFS::FileSystem",
            "description": "The ID of the file system for which you want to create the mount target."
          },
          "IpAddress": {
            "type": "String",
            "required": false,
            "description": "An IPv4 address that is within the address range of the subnet that is specified in the SubnetId property."
          },
          "SecurityGroups": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "description": "A maximum of five VPC security group IDs that are in the same VPC as the subnet that is specified in the SubnetId property."
          },
          "SubnetId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::EC2::Subnet",
            "description": "The ID of the subnet in which you want to add the mount target."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EKS::Cluster": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EKS::Cluster resource creates an Amazon EKS cluster control plane.",
    "return-values": [
      {
        "name": "Endpoint",
        "description": "The endpoint for your Kubernetes API server, such as https://5E1D0CEXAMPLEA591B746AFC5AB30262.yl4.us-west-2.eks.amazonaws.com"
      },
      {
        "name": "Arn",
        "description": "The ARN of the cluster, such as arn:aws:eks:us-west-2:666666666666:cluster/prod."
      },
      {
        "name": "CertificateAuthorityData",
        "description": "The certificate-authority-data for your cluster."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EKS::Cluster resource creates an Amazon EKS cluster control plane."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Version": {
            "type": "String",
            "required": false,
            "description": "The Kubernetes server version for the cluster."
          },
          "RoleArn": {
            "type": "String",
            "required": true,
            "description": "The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control plane to make calls to AWS API operations on your behalf.",
            "resource-ref-type": "AWS::IAM::Role"
          },
          "ResourcesVpcConfig": {
            "type": "Object",
            "required": true,
            "description": "The VPC subnets and security groups used by the cluster control plane.",
            "properties": {
              "SecurityGroupIds": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "Specify one or more security groups for the cross-account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane.",
                "resource-ref-type": "AWS::EC2::SecurityGroup"
              },
              "SubnetIds": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "description": "Specify at least 2 subnets for your Amazon EKS worker nodes.",
                "resource-ref-type": "AWS::EC2::Subnet"
              }
            }
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "The name of the cluster."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElastiCache::CacheCluster": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ElastiCache::CacheCluster type creates an Amazon ElastiCache cache cluster.",
    "return-values": [
      {
        "name": "ConfigurationEndpoint.Address",
        "description": "The DNS address of the configuration endpoint for the Memcached cache cluster."
      },
      {
        "name": "ConfigurationEndpoint.Port",
        "description": "The port number of the configuration endpoint for the Memcached cache cluster."
      },
      {
        "name": "RedisEndpoint.Address",
        "description": "The DNS address of the configuration endpoint for the Redis cache cluster."
      },
      {
        "name": "RedisEndpoint.Port",
        "description": "The port number of the configuration endpoint for the Redis cache cluster."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ElastiCache::CacheCluster type creates an Amazon ElastiCache cache cluster."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AutoMinorVersionUpgrade": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates that minor engine upgrades will be applied automatically to the cache cluster during the maintenance window."
          },
          "AZMode": {
            "type": "String",
            "required": false,
            "description": "For Memcached cache clusters, indicates whether the nodes are created in a single Availability Zone or across multiple Availability Zones in the cluster's region."
          },
          "CacheNodeType": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "*",
              "cache.t2.micro",
              "cache.t2.small",
              "cache.t2.medium",
              "cache.t1.micro",
              "cache.m1.medium",
              "cache.m1.large",
              "cache.m1.xlarge",
              "cache.m3.medium",
              "cache.m3.large",
              "cache.m3.xlarge",
              "cache.m3.2xlarge",
              "cache.m1.small",
              "cache.m1.large",
              "cache.m1.xlarge",
              "cache.m2.xlarge",
              "cache.m2.2xlarge",
              "cache.m2.4xlarge",
              "cache.c1.xlarge",
              "cache.r3.large",
              "cache.r3.xlarge",
              "cache.r3.2xlarge",
              "cache.r3.4xlarge",
              "cache.r3.8xlarge",
              "cache.m4.large",
              "cache.m4.xlarge",
              "cache.m4.2xlarge",
              "cache.m4.4xlarge",
              "cache.m4.10xlarge"
            ],
            "description": "The compute and memory capacity of nodes in a cache cluster."
          },
          "CacheParameterGroupName": {
            "type": "String",
            "resource-ref-type": "AWS::ElastiCache::ParameterGroup",
            "required": false,
            "description": "The name of the cache parameter group associated with this cache cluster."
          },
          "CacheSecurityGroupNames": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": "AWS::ElastiCache::SecurityGroup",
            "required": false,
            "description": "A list of cache security group names associated with this cache cluster."
          },
          "CacheSubnetGroupName": {
            "type": "String",
            "resource-ref-type": "AWS::ElastiCache::SubnetGroup",
            "required": false,
            "description": "The cache subnet group that you associate with a cache cluster."
          },
          "ClusterName": {
            "type": "String",
            "required": false,
            "description": "A name for the cache cluster. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the cache cluster."
          },
          "Engine": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "memcached",
              "redis"
            ],
            "description": "The name of the cache engine to be used for this cache cluster."
          },
          "EngineVersion": {
            "type": "String",
            "required": false,
            "description": "The version of the cache engine to be used for this cluster."
          },
          "NotificationTopicArn": {
            "type": "String",
            "resource-ref-type": "AWS::SNS::Topic",
            "required": false,
            "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications will be sent."
          },
          "NumCacheNodes": {
            "type": "String",
            "required": false,
            "description": "The number of cache nodes the cache cluster should have."
          },
          "Port": {
            "type": "Number",
            "required": false,
            "description": "The port number on which each of the cache nodes will accept connections."
          },
          "PreferredAvailabilityZone": {
            "type": "String",
            "required": false,
            "description": "The EC2 Availability Zone that the cache cluster will be created in.",
            "allowed-values": [
              "us-east-1b",
              "us-east-1c",
              "us-east-1d",
              "us-east-1e",
              "us-west-1b",
              "us-west-1c",
              "us-west-2a",
              "us-west-2b",
              "us-west-2c",
              "ap-northeast-1a",
              "ap-northeast-1c",
              "ap-northeast-2a",
              "ap-northeast-2c",
              "ap-south-1a",
              "ap-south-1b",
              "ap-southeast-1a",
              "ap-southeast-1b",
              "ap-southeast-2a",
              "ap-southeast-2b",
              "ap-southeast-2c",
              "sa-east-1a",
              "sa-east-1b",
              "sa-east-1c",
              "eu-west-1a",
              "eu-west-1b",
              "eu-west-1c",
              "eu-central-1a",
              "eu-central-1b"
            ]
          },
          "PreferredMaintenanceWindow": {
            "type": "String",
            "required": false,
            "description": "The weekly time range (in UTC) during which system maintenance can occur. Example: sun:05:00-sun:09:00"
          },
          "SnapshotArns": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "description": "A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file will be used to populate the Redis cache in the new cache cluster. The Amazon S3 object name in the ARN cannot contain any commas."
          },
          "SnapshotName": {
            "type": "String",
            "required": false,
            "description": "The name of a snapshot from which to restore data into a new Redis cache cluster."
          },
          "SnapshotRetentionLimit": {
            "type": "Number",
            "required": false,
            "description": "For Redis cache clusters, the number of days for which ElastiCache retains automatic snapshots before deleting them."
          },
          "SnapshotWindow": {
            "type": "String",
            "required": false,
            "description": "For Redis cache clusters, the daily time range (in UTC) during which ElastiCache will begin taking a daily snapshot of your node group. For example, you can specify 05:00-09:00."
          },
          "VpcSecurityGroupIds": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "One or more VPC security groups associated with the cache cluster."
          },
          "PreferredAvailabilityZones": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "For Memcached cache clusters, the list of Availability Zones in which cache nodes are created."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElastiCache::ParameterGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ElastiCache::ParameterGroup type creates a new cache parameter group. Cache parameter groups control the parameters for a cache cluster.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ElastiCache::ParameterGroup type creates a new cache parameter group. Cache parameter groups control the parameters for a cache cluster."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CacheParameterGroupFamily": {
            "type": "String",
            "required": true,
            "description": "The name of the cache parameter group family that the cache parameter group can be used with."
          },
          "Description": {
            "type": "String",
            "required": true,
            "description": "The description for the Cache Parameter Group."
          },
          "Properties": {
            "type": "String",
            "required": false,
            "description": "A comma-delimited list of parameter name/value pairs."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElastiCache::ReplicationGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ElastiCache::ReplicationGroup resource creates an Amazon ElastiCache replication group.",
    "return-values": [
      {
        "name": "ConfigurationEndPoint.Address",
        "description": "The DNS hostname of the cache node."
      },
      {
        "name": "ConfigurationEndPoint.Port",
        "description": "The port number that the cache engine is listening on."
      },
      {
        "name": "PrimaryEndPoint.Address",
        "description": "The DNS address of the primary read-write cache node."
      },
      {
        "name": "PrimaryEndPoint.Port",
        "description": "The number of the port that the primary read-write cache engine is listening on."
      },
      {
        "name": "ReadEndPoint.Addresses",
        "description": "A string with a list of endpoints for the read-only replicas. The order of the addresses map to the order of the ports from the ReadEndPoint.Ports attribute."
      },
      {
        "name": "ReadEndPoint.Ports",
        "description": "A string with a list of ports for the read-only replicas. The order of the ports map to the order of the addresses from the ReadEndPoint.Addresses attribute."
      },
      {
        "name": "ReadEndPoint.Addresses.List",
        "description": "A list of endpoints for the read-only replicas. The order of the addresses map to the order of the ports from the ReadEndPoint.Ports.List attribute."
      },
      {
        "name": "ReadEndPoint.Ports.List",
        "description": "A list of ports for the read-only replicas. The order of the ports map to the order of the addresses from the ReadEndPoint.Addresses.List attribute."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ElastiCache::ReplicationGroup resource creates an Amazon ElastiCache replication group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AutomaticFailoverEnabled": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether Multi-AZ is enabled."
          },
          "AutoMinorVersionUpgrade": {
            "type": "Boolean",
            "required": false,
            "description": "Currently, this property isn't used by ElastiCache."
          },
          "CacheNodeType": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "*",
              "cache.t2.micro",
              "cache.t2.small",
              "cache.t2.medium",
              "cache.t1.micro",
              "cache.m1.medium",
              "cache.m1.large",
              "cache.m1.xlarge",
              "cache.m3.medium",
              "cache.m3.large",
              "cache.m3.xlarge",
              "cache.m3.2xlarge",
              "cache.m1.small",
              "cache.m1.large",
              "cache.m1.xlarge",
              "cache.m2.xlarge",
              "cache.m2.2xlarge",
              "cache.m2.4xlarge",
              "cache.c1.xlarge",
              "cache.r3.large",
              "cache.r3.xlarge",
              "cache.r3.2xlarge",
              "cache.r3.4xlarge",
              "cache.r3.8xlarge",
              "cache.m4.large",
              "cache.m4.xlarge",
              "cache.m4.2xlarge",
              "cache.m4.4xlarge",
              "cache.m4.10xlarge"
            ],
            "description": "The compute and memory capacity of nodes in the node group."
          },
          "CacheParameterGroupName": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::ElastiCache::ParameterGroup",
            "description": "The name of the parameter group to associate with this replication group."
          },
          "CacheSecurityGroupNames": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::ElastiCache::SecurityGroup",
            "description": "A list of cache security group names to associate with this replication group."
          },
          "CacheSubnetGroupName": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::ElastiCache::SubnetGroup",
            "description": "The name of a cache subnet group to use for this replication group."
          },
          "Engine": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "*",
              "redis"
            ],
            "description": "The name of the cache engine to use for the cache clusters in this replication group. "
          },
          "EngineVersion": {
            "type": "String",
            "required": false,
            "description": "The version number of the cache engine to use for the cache clusters in this replication group."
          },
          "NodeGroupConfiguration": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Configuration options for the node group (shard).",
            "properties": {
              "PrimaryAvailabilityZone": {
                "type": "String",
                "required": false,
                "description": "The Availability Zone where ElastiCache launches the node group's primary node.",
                "allowed-values": [
                  "us-east-1b",
                  "us-east-1c",
                  "us-east-1d",
                  "us-east-1e",
                  "us-west-1b",
                  "us-west-1c",
                  "us-west-2a",
                  "us-west-2b",
                  "us-west-2c",
                  "ap-northeast-1a",
                  "ap-northeast-1c",
                  "ap-northeast-2a",
                  "ap-northeast-2c",
                  "ap-south-1a",
                  "ap-south-1b",
                  "ap-southeast-1a",
                  "ap-southeast-1b",
                  "ap-southeast-2a",
                  "ap-southeast-2b",
                  "ap-southeast-2c",
                  "sa-east-1a",
                  "sa-east-1b",
                  "sa-east-1c",
                  "eu-west-1a",
                  "eu-west-1b",
                  "eu-west-1c",
                  "eu-central-1a",
                  "eu-central-1b"
                ]
              },
              "ReplicaAvailabilityZones": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "A list of Availability Zones where ElastiCache launches the read replicas."
              },
              "ReplicaCount": {
                "type": "Number",
                "required": false,
                "description": "The number of read replica nodes in the node group."
              },
              "Slots": {
                "type": "String",
                "required": false,
                "description": "A string of comma-separated values where the first set of values are the slot numbers (zero based), and the second set of values are the keyspaces for each slot."
              },
              "NodeGroupId": {
                "type": "String",
                "required": false,
                "description": "Either the ElastiCache for Redis supplied 4-digit id or a user supplied id for the node group these configuration values apply to."
              }
            }
          },
          "NotificationTopicArn": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::SNS::Topic",
            "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications will be sent."
          },
          "NumCacheClusters": {
            "type": "Number",
            "required": true,
            "description": "The number of cache clusters this replication group will initially have. If Multi-AZ is enabled, the value of this parameter must be at least 2."
          },
          "NumNodeGroups": {
            "type": "Number",
            "required": true,
            "description": "The number of node groups (shards) for this Redis (clustered mode enabled) replication group. For Redis (clustered mode disabled), omit this property."
          },
          "Port": {
            "type": "Number",
            "required": false,
            "description": "The port number on which each member of the replication group accepts connections."
          },
          "PreferredCacheClusterAZs": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "A list of Availability Zones (AZs) in which the cache clusters in this replication group are created.",
            "allowed-values": [
              "us-east-1b",
              "us-east-1c",
              "us-east-1d",
              "us-east-1e",
              "us-west-1b",
              "us-west-1c",
              "us-west-2a",
              "us-west-2b",
              "us-west-2c",
              "ap-northeast-1a",
              "ap-northeast-1c",
              "ap-northeast-2a",
              "ap-northeast-2c",
              "ap-south-1a",
              "ap-south-1b",
              "ap-southeast-1a",
              "ap-southeast-1b",
              "ap-southeast-2a",
              "ap-southeast-2b",
              "ap-southeast-2c",
              "sa-east-1a",
              "sa-east-1b",
              "sa-east-1c",
              "eu-west-1a",
              "eu-west-1b",
              "eu-west-1c",
              "eu-central-1a",
              "eu-central-1b"
            ]
          },
          "PreferredMaintenanceWindow": {
            "type": "String",
            "required": false,
            "description": "The weekly time range during which system maintenance can occur. Use the following format to specify a time range: ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). For example, you can specify sun:22:00-sun:23:30 for Sunday from 10 PM to 11:30 PM."
          },
          "PrimaryClusterId": {
            "type": "String",
            "required": false,
            "description": "The cache cluster that ElastiCache uses as the primary cluster for the replication group. The cache cluster must have a status of available."
          },
          "ReplicasPerNodeGroup": {
            "type": "Number",
            "required": false,
            "description": "The number of replica nodes in each node group (shard)."
          },
          "ReplicationGroupDescription": {
            "type": "String",
            "required": true,
            "description": "The description of the replication group."
          },
          "ReplicationGroupId": {
            "type": "String",
            "required": false,
            "description": "An ID for the replication group."
          },
          "SecurityGroupIds": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "description": "A list of Amazon Virtual Private Cloud (Amazon VPC) security groups to associate with this replication group. Use this property only when you are creating a replication group in a VPC. If you specify the CacheSecurityGroupNames property, do not specify this property; you can specify only one."
          },
          "SnapshotArns": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "A single-element string list that specifies an ARN of a Redis .rdb snapshot file that is stored in Amazon Simple Storage Service (Amazon S3). The snapshot file populates the node group. The Amazon S3 object name in the ARN cannot contain commas. For example, you can specify arn:aws:s3:::my_bucket/snapshot1.rdb."
          },
          "SnapshotRetentionLimit": {
            "type": "Number",
            "required": false,
            "description": "The number of days that ElastiCache retains automatic snapshots before deleting them."
          },
          "SnapshottingClusterId": {
            "type": "String",
            "required": false,
            "description": "The ID of the cache cluster that ElastiCache uses as the daily snapshot source for the replication group."
          },
          "SnapshotWindow": {
            "type": "String",
            "required": false,
            "description": "The time range (in UTC) when ElastiCache takes a daily snapshot of your node group. For example, you can specify 05:00-09:00."
          },
          "AtRestEncryptionEnabled": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether to enable encryption at rest."
          },
          "AuthToken": {
            "type": "String",
            "required": false,
            "description": "The password that's used to access a password-protected server."
          },
          "SnapshotName": {
            "type": "String",
            "required": false,
            "description": "The name of a snapshot from which to restore data into the replication group."
          },
          "TransitEncryptionEnabled": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether to enable in-transit encryption."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElastiCache::SecurityGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ElastiCache::SecurityGroup type creates a cache security group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ElastiCache::SecurityGroup type creates a cache security group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": true,
            "description": "The description property of the new cache security group."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElastiCache::SecurityGroupIngress": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ElastiCache::SecurityGroupIngress type authorizes ingress to a cache security group from hosts in specified EC2 security groups.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ElastiCache::SecurityGroupIngress type authorizes ingress to a cache security group from hosts in specified EC2 security groups."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CacheSecurityGroupName": {
            "type": "String",
            "resource-ref-type": "AWS::ElastiCache::SecurityGroup",
            "required": true,
            "description": "The name of the Cache Security Group to authorize."
          },
          "EC2SecurityGroupName": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": true,
            "description": "Name of the EC2 Security Group to include in the authorization."
          },
          "EC2SecurityGroupOwnerId": {
            "type": "String",
            "required": true,
            "description": "Specifies the AWS Account ID of the owner of the EC2 security group specified in the EC2SecurityGroupName property. The AWS Access Key ID is not an acceptable value."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElastiCache::SubnetGroup": {
    "type": "Object",
    "required": false,
    "description": "Creates a cache subnet group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a cache subnet group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CacheSubnetGroupName": {
            "type": "String",
            "required": false,
            "description": "A name for the cache subnet group. If you don't specify a name, AWS CloudFormation generates a unique physical ID."
          },
          "Description": {
            "type": "String",
            "required": true,
            "description": "The description for the cache subnet group."
          },
          "SubnetIds": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::Subnet",
            "required": true,
            "description": "The Amazon EC2 subnet IDs for the cache subnet group."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElasticBeanstalk::Application": {
    "type": "Object",
    "required": false,
    "description": "Creates an application within AWS Elastic Beanstalk.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an application within AWS Elastic Beanstalk."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ApplicationName": {
            "type": "String",
            "required": false,
            "description": "A name for the AWS Elastic Beanstalk application. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the application name."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "Describes the application."
          },
          "ApplicationVersions": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Application versions associated with this application. An application version is a specific, labeled iteration of deployable code.",
            "properties": {
              "Description": {
                "type": "String",
                "required": false,
                "description": "Describes the application version."
              },
              "VersionLabel": {
                "type": "String",
                "required": true,
                "description": "A label uniquely identifying the version for the associated application."
              },
              "SourceBundle": {
                "type": "Object",
                "required": false,
                "description": "The location where the source bundle is located for this version.",
                "properties": {
                  "S3Bucket": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::S3::Bucket",
                    "description": "The Amazon S3 bucket where the data is located."
                  },
                  "S3Key": {
                    "type": "String",
                    "required": true,
                    "description": "The Amazon S3 key where the data is located."
                  }
                }
              }
            }
          },
          "ConfigurationTemplates": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Configuration templates associated with this application. You can use templates to deploy different versions of an application using the configuration settings defined in the template.",
            "properties": {
              "TemplateName": {
                "type": "String",
                "required": true,
                "description": "The name of the configuration template."
              },
              "Description": {
                "type": "String",
                "required": false,
                "description": "An optional description for this configuration."
              },
              "OptionSettings": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "An array of OptionSettings for this Elastic Beanstalk configuration.",
                "properties": {
                  "Namespace": {
                    "type": "String",
                    "required": true,
                    "description": "A unique namespace identifying the option's associated AWS resource."
                  },
                  "OptionName": {
                    "type": "String",
                    "required": true,
                    "description": "The name of the configuration option."
                  },
                  "Value": {
                    "type": "String",
                    "required": true,
                    "description": "The value of the setting."
                  }
                }
              },
              "SolutionStackName": {
                "type": "String",
                "required": false,
                "description": "The name of an existing Elastic Beanstalk solution stack used by this configuration. A solution stack specifies the operating system, architecture, and application server for a configuration template. It also defines configuration options, their possible and default values. If SolutionStackName is not specified, the default Elastic Beanstalk solution stack will be used."
              }
            }
          },
          "ResourceLifecycleConfig": {
            "type": "Object",
            "required": false,
            "description": "Defines lifecycle settings for resources that belong to the application, and the service role that Elastic Beanstalk assumes in order to apply lifecycle settings.",
            "properties": {
              "ServiceRole": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::IAM::Role",
                "description": "The ARN of an IAM service role that Elastic Beanstalk has permission to assume."
              },
              "VersionLifecycleConfig": {
                "type": "Object",
                "required": false,
                "description": "Defines lifecycle settings for application versions.",
                "properties": {
                  "MaxAgeRule": {
                    "type": "Object",
                    "required": false,
                    "description": "Specifies a max age rule to restrict the length of time that application versions are retained for an application.",
                    "properties": {
                      "DeleteSourceFromS3": {
                        "type": "Boolean",
                        "required": false,
                        "description": "Set to true to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application version."
                      },
                      "Enabled": {
                        "type": "Boolean",
                        "required": false,
                        "description": "Specify true to apply the rule, or false to disable it."
                      },
                      "MaxAgeInDays": {
                        "type": "Number",
                        "required": false,
                        "description": "Specify the number of days to retain an application versions."
                      }
                    }
                  },
                  "MaxCountRule": {
                    "type": "Object",
                    "required": false,
                    "description": "Specifies a max count rule to restrict the number of application versions that are retained for an application.",
                    "properties": {
                      "DeleteSourceFromS3": {
                        "type": "Boolean",
                        "required": false,
                        "description": "Set to true to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application version."
                      },
                      "Enabled": {
                        "type": "Boolean",
                        "required": false,
                        "description": "Specify true to apply the rule, or false to disable it."
                      },
                      "MaxCount": {
                        "type": "Number",
                        "required": false,
                        "description": "Specify the maximum number of application versions to retain."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElasticBeanstalk::ApplicationVersion": {
    "type": "Object",
    "required": false,
    "description": "Creates an application version, an iteration of deployable code, for an Elastic Beanstalk application.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an application version, an iteration of deployable code, for an Elastic Beanstalk application."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ApplicationName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ElasticBeanstalk::Application",
            "description": "Name of the Elastic Beanstalk application that is associated with this application version."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of this application version."
          },
          "SourceBundle": {
            "type": "Object",
            "required": false,
            "description": "The location where the source bundle is located for this version.",
            "properties": {
              "S3Bucket": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::S3::Bucket",
                "description": "The Amazon S3 bucket where the data is located."
              },
              "S3Key": {
                "type": "String",
                "required": true,
                "description": "The Amazon S3 key where the data is located."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElasticBeanstalk::ConfigurationTemplate": {
    "type": "Object",
    "required": false,
    "description": "Creates a configuration template for an Elastic Beanstalk application.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a configuration template for an Elastic Beanstalk application."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ApplicationName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ElasticBeanstalk::Application",
            "description": "Name of the Elastic Beanstalk application that is associated with this configuration template."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "An optional description for this configuration."
          },
          "EnvironmentId": {
            "type": "String",
            "required": false,
            "description": "An environment whose settings you want to use to create the configuration template."
          },
          "OptionSettings": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "An array of OptionSettings for this Elastic Beanstalk configuration.",
            "properties": {
              "Namespace": {
                "type": "String",
                "required": true,
                "description": "A unique namespace identifying the option's associated AWS resource."
              },
              "OptionName": {
                "type": "String",
                "required": true,
                "description": "The name of the configuration option."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "The value of the setting."
              },
              "ResourceName": {
                "type": "String",
                "required": false,
                "description": "A unique resource name for the option setting. Use this property for a time�based scaling configuration option."
              }
            }
          },
          "SolutionStackName": {
            "type": "String",
            "required": false,
            "description": "The name of an existing Elastic Beanstalk solution stack used by this configuration. A solution stack specifies the operating system, architecture, and application server for a configuration template. It also defines configuration options, their possible and default values. If SolutionStackName is not specified, the default Elastic Beanstalk solution stack will be used."
          },
          "SourceConfiguration": {
            "type": "Object",
            "required": false,
            "description": "A configuration template that is associated with another Elastic Beanstalk application.",
            "properties": {
              "ApplicationName": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::ElasticBeanstalk::Application",
                "description": "The name of the Elastic Beanstalk application that contains the configuration template that you want to use."
              },
              "TemplateName": {
                "type": "String",
                "required": true,
                "description": "The name of the configuration template."
              }
            }
          },
          "PlatformArn": {
            "type": "String",
            "required": false,
            "description": "The Amazon Resource Name (ARN) of the custom platform."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElasticBeanstalk::Environment": {
    "type": "Object",
    "required": false,
    "description": "Creates an environment within AWS Elastic Beanstalk.",
    "return-values": [
      {
        "name": "EndpointURL",
        "description": "The URL to the LoadBalancer for this environment."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an environment within AWS Elastic Beanstalk."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "Describes the environment."
          },
          "ApplicationName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ElasticBeanstalk::Application",
            "description": "The name of the application associated with this environment."
          },
          "CNAMEPrefix": {
            "type": "String",
            "required": false,
            "description": "The URL to the CNAME for this environment."
          },
          "EnvironmentName": {
            "type": "String",
            "required": false,
            "description": "A name for the AWS Elastic Beanstalk environment. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the environment name."
          },
          "OptionSettings": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The option settings to add.",
            "properties": {
              "Namespace": {
                "type": "String",
                "required": true,
                "description": "A unique namespace identifying the option's associated AWS resource."
              },
              "OptionName": {
                "type": "String",
                "required": true,
                "description": "The name of the configuration option."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "The value of the setting."
              },
              "ResourceName": {
                "type": "String",
                "required": false,
                "description": "A unique resource name for the option setting. Use this property for a time�based scaling configuration option."
              }
            }
          },
          "OptionsToRemove": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The option settings to remove.",
            "properties": {
              "NameSpace": {
                "type": "String",
                "required": true,
                "description": "A unique namespace identifying the option's associated AWS resource."
              },
              "OptionName": {
                "type": "String",
                "required": true,
                "description": "The name of the configuration option."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value of the setting."
              }
            }
          },
          "SolutionStackName": {
            "type": "String",
            "required": false,
            "description": "Stack name associated with the environment."
          },
          "TemplateName": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::ElasticBeanstalk::ConfigurationTemplate",
            "description": "Name of the template to use with the environment."
          },
          "Tier": {
            "type": "Object",
            "required": false,
            "description": "Specifies the tier to use in creating this environment. The environment tier that you choose determines whether AWS Elastic Beanstalk provisions resources to support a web application that handles HTTP(S) requests or a web application that handles background-processing tasks.",
            "properties": {
              "Name": {
                "type": "String",
                "required": false,
                "description": "The name of the environment tier. You can specify WebServer or Worker.",
                "allowed-values": [
                  "WebServer",
                  "Worker"
                ]
              },
              "Type": {
                "type": "String",
                "required": false,
                "description": "The type of this environment tier. You can specify Standard for the WebServer tier or SQS/HTTP for the Worker tier.",
                "allowed-values": [
                  "WebServer",
                  "SQS/HTTP"
                ]
              },
              "Version": {
                "type": "String",
                "required": false,
                "description": "The version of this environment tier."
              }
            }
          },
          "VersionLabel": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::ElasticBeanstalk::ApplicationVersion",
            "description": "Version to associate with the environment"
          },
          "PlatformArn": {
            "type": "String",
            "required": false,
            "description": "The Amazon Resource Name (ARN) of the custom platform."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElasticLoadBalancing::LoadBalancer": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ElasticLoadBalancing::LoadBalancer type creates a LoadBalancer.",
    "return-values": [
      {
        "name": "CanonicalHostedZoneName",
        "description": "The name of the Route 53 hosted zone that is associated with the LoadBalancer."
      },
      {
        "name": "CanonicalHostedZoneNameID",
        "description": "The ID of the Route 53 hosted zone name that is associated with the LoadBalancer."
      },
      {
        "name": "DNSName",
        "description": "The DNS name for the LoadBalancer."
      },
      {
        "name": "SourceSecurityGroup.GroupName",
        "description": "The security group that you can use as part of your inbound rules for your LoadBalancer's back-end Amazon EC2 application instances."
      },
      {
        "name": "SourceSecurityGroup.OwnerAlias",
        "description": "Owner of the source security group."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SNS::TopicPolicy type applies a policy to SNS topics."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AccessLoggingPolicy": {
            "type": "Object",
            "required": false,
            "description": "Captures detailed information for all requests made to your load balancer, such as the time a request was received, client�s IP address, latencies, request path, and server responses.",
            "properties": {
              "EmitInterval": {
                "type": "String",
                "required": false,
                "description": "The interval for publishing access logs in minutes. You can specify an interval of either 5 minutes or 60 minutes."
              },
              "Enabled": {
                "type": "Boolean",
                "required": true,
                "description": "Whether logging is enabled for the load balancer."
              },
              "S3BucketName": {
                "type": "String",
                "required": false,
                "description": "The name of an Amazon S3 bucket where access log files are stored."
              },
              "S3BucketPrefix": {
                "type": "String",
                "required": false,
                "description": "A prefix for the all log object keys, such as my-load-balancer-logs/prod. If you store log files from multiple sources in a single bucket, you can use a prefix to distinguish each log file and its source."
              }
            }
          },
          "AppCookieStickinessPolicy": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Generates one or more stickiness policies with sticky session lifetimes that follow that of an application-generated cookie. These policies can be associated only with HTTP/HTTPS listeners.",
            "properties": {
              "CookieName": {
                "type": "String",
                "required": true,
                "description": "Name of the application cookie used for stickiness."
              },
              "ApplicationName": {
                "type": "String",
                "required": true,
                "description": "The name of the policy being created. The name must be unique within the set of policies for this Load Balancer."
              },
              "PolicyName": {
                "type": "String",
                "required": true,
                "description": "The name of the policy being created. The name must be unique within the set of policies for this Load Balancer."
              }
            }
          },
          "AvailabilityZones": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The Availability Zones in which to create the load balancer. You can specify either AvailabilityZones or Subnets, but not both.",
            "allowed-values": [
              "us-east-1b",
              "us-east-1c",
              "us-east-1d",
              "us-east-1e",
              "us-west-1b",
              "us-west-1c",
              "us-west-2a",
              "us-west-2b",
              "us-west-2c",
              "ap-northeast-1a",
              "ap-northeast-1c",
              "ap-northeast-2a",
              "ap-northeast-2c",
              "ap-south-1a",
              "ap-south-1b",
              "ap-southeast-1a",
              "ap-southeast-1b",
              "ap-southeast-2a",
              "ap-southeast-2b",
              "ap-southeast-2c",
              "sa-east-1a",
              "sa-east-1b",
              "sa-east-1c",
              "eu-west-1a",
              "eu-west-1b",
              "eu-west-1c",
              "eu-central-1a",
              "eu-central-1b"
            ]
          },
          "ConnectionDrainingPolicy": {
            "type": "Object",
            "required": false,
            "description": "Whether deregistered or unhealthy instances can complete all in-flight requests.",
            "properties": {
              "Enabled": {
                "type": "Boolean",
                "required": true,
                "description": "Whether or not connection draining is enabled for the load balancer."
              },
              "Timeout": {
                "type": "Number",
                "required": false,
                "description": "The time in seconds after the load balancer closes all connections to a deregistered or unhealthy instance."
              }
            }
          },
          "ConnectionSettings": {
            "type": "Object",
            "required": false,
            "description": "Specifies how long front-end and back-end connections of your load balancer can remain idle.",
            "properties": {
              "IdleTimeout": {
                "type": "Number",
                "required": false,
                "description": "The time (in seconds) that a connection to the load balancer can remain idle, which means no data is sent over the connection. After the specified time, the load balancer closes the connection."
              }
            }
          },
          "CrossZone": {
            "type": "Boolean",
            "required": false,
            "description": "Specifies whether cross-zone load balancing is enabled for the load balancer. With cross-zone load balancing, your load balancer nodes route traffic to the back-end instances across all Availability Zones. By default the CrossZone property is false."
          },
          "HealthCheck": {
            "type": "Object",
            "required": false,
            "description": "When specified, declares an application health check for the instances.",
            "properties": {
              "HealthyThreshold": {
                "type": "String",
                "required": true,
                "description": "Specifies the number of consecutive health probe successes required before moving the instance to the Healthy state."
              },
              "Interval": {
                "type": "String",
                "required": true,
                "description": "Specifies the approximate interval, in seconds, between health checks of an individual instance."
              },
              "Target": {
                "type": "String",
                "required": true,
                "description": "Specifies the instance being checked. The protocol is either TCP or HTTP. The range of valid ports is 1 through 65535."
              },
              "Timeout": {
                "type": "String",
                "required": true,
                "description": "Specifies the amount of time, in seconds, during which no response means a failed health probe. This value must be less than the value for Interval."
              },
              "UnhealthyThreshold": {
                "type": "String",
                "required": true,
                "description": "Specifies the number of consecutive health probe failures required before moving the instance to the Unhealthy state."
              }
            }
          },
          "Instances": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": "AWS::EC2::Instance",
            "required": false,
            "description": "Provides a list of EC2 instance IDs for the LoadBalancer."
          },
          "LoadBalancerName": {
            "type": "String",
            "required": false,
            "description": "A name for the load balancer. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the load balancer. The name must be unique within your set of load balancers."
          },
          "LBCookieStickinessPolicy": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Generates a stickiness policy with sticky session lifetimes controlled by the lifetime of the browser (user-agent), or by a specified expiration period. This policy can be associated only with HTTP/HTTPS listeners.",
            "properties": {
              "CookieExpirationPeriod": {
                "type": "String",
                "required": false,
                "description": "The time period, in seconds, after which the cookie should be considered stale. If this parameter isn't specified, the sticky session will last for the duration of the browser session."
              },
              "PolicyName": {
                "type": "String",
                "required": true,
                "description": "The name of the policy being created. The name must be unique within the set of policies for this load balancer."
              }
            }
          },
          "Listeners": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "One or more listeners for this load balancer. Each listener must be registered for a specific port, and you can not have more than one listener for a given port.",
            "properties": {
              "InstancePort": {
                "type": "String",
                "required": true,
                "description": "Specifies the TCP port on which the instance server is listening. This property cannot be modified for the life of the LoadBalancer."
              },
              "InstanceProtocol": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "HTTP",
                  "HTTPS",
                  "TCP",
                  "SSL"
                ],
                "description": "Specifies the protocol to use for routing traffic to back-end instances�HTTP, HTTPS, TCP, or SSL. This property cannot be modified for the life of the load balancer."
              },
              "LoadBalancerPort": {
                "type": "String",
                "required": true,
                "description": "Specifies the external LoadBalancer port number. This property cannot be modified for the life of the LoadBalancer."
              },
              "PolicyNames": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "A list of ElasticLoadBalancing policy names to associate with the listener."
              },
              "Protocol": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "HTTP",
                  "HTTPS",
                  "TCP",
                  "SSL"
                ],
                "description": "Specifies the LoadBalancer transport protocol to use for routing � TCP or HTTP. This property cannot be modified for the life of the LoadBalancer."
              },
              "SSLCertificateId": {
                "type": "String",
                "required": false,
                "description": "The ARN of the SSL certificate to use."
              }
            }
          },
          "Policies": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A list of elastic load balancing policies to apply to this elastic load balancer.",
            "properties": {
              "Attributes": {
                "type": "Array",
                "array-type": "Json",
                "required": false,
                "description": "A list of arbitrary attributes for this policy."
              },
              "InstancePorts": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "A list of instance ports for the policy. These are the ports associated with the back-end server."
              },
              "LoadBalancerPorts": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "description": "A list of external load balancer ports for the policy."
              },
              "PolicyName": {
                "type": "String",
                "required": true,
                "description": "A name for this policy that is unique to the load balancer."
              },
              "PolicyType": {
                "type": "String",
                "required": true,
                "description": "The name of the policy type for this policy."
              }
            }
          },
          "Scheme": {
            "type": "String",
            "required": false,
            "description": "For LoadBalancers attached to an Apazon VPC, this parameter can be used to specify the type of LoadBalancer to use. Specify \"internal\" to create an internal LoadBalancer with a DNS name that resolves to private IP addresses."
          },
          "SecurityGroups": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "Security groups assigned to your load balancer within your virtual private cloud (VPC)."
          },
          "Subnets": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": "AWS::EC2::Subnet",
            "required": false,
            "description": "A list of subnet IDs in your virtual private cloud (VPC) to attach to your load balancer. You can specify either AvailabilityZones or Subnets, but not both."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElasticLoadBalancingV2::Listener": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ElasticLoadBalancingV2::Listener resource creates a listener for an Elastic Load Balancing Application load balancer.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ElasticLoadBalancingV2::Listener resource creates a listener for an Elastic Load Balancing Application load balancer."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Certificates": {
            "type": "Object",
            "required": false,
            "description": "The SSL server certificate for the listener. With a certificate, you can encrypt traffic between the load balancer and the clients that initiate HTTPS sessions, and traffic between the load balancer and your targets.",
            "properties": {
              "CertificateArn": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::CertificateManager::Certificate",
                "description": "The Amazon Resource Name (ARN) of the certificate to associate with the listener."
              }
            }
          },
          "DefaultActions": {
            "type": "Object",
            "required": true,
            "description": "The default actions that the listener takes when handling incoming requests.",
            "properties": {
              "TargetGroupArn": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::ElasticLoadBalancingV2::TargetGroup",
                "description": "The Amazon Resource Name (ARN) of the target group to which Elastic Load Balancing routes the traffic."
              },
              "Type": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "*",
                  "forward"
                ],
                "description": "The type of action."
              },
              "AuthenticateCognitoConfig": {
                "type": "Object",
                "required": false,
                "description": "Information for using Amazon Cognito to authenticate users.",
                "properties": {
                  "AuthenticationRequestExtraParams": {
                    "type": "Json",
                    "required": false,
                    "description": "The query parameters (up to 10) to include in the redirect request to the authorization endpoint."
                  },
                  "OnUnauthenticatedRequest": {
                    "type": "String",
                    "required": false,
                    "description": "The behavior if the user is not authenticated.",
                    "allowed-values": [
                      "*",
                      "deny",
                      "allow",
                      "authenticate"
                    ]
                  },
                  "Scope": {
                    "type": "String",
                    "required": false,
                    "description": "The set of user claims to be requested from the IdP."
                  },
                  "SessionCookieName": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the cookie used to maintain session information."
                  },
                  "SessionTimeout": {
                    "type": "Number",
                    "required": false,
                    "description": "The maximum duration of the authentication session, in seconds."
                  },
                  "UserPoolArn": {
                    "type": "String",
                    "required": true,
                    "description": "The Amazon Resource Name (ARN) of the Amazon Cognito user pool.",
                    "resource-ref-type": "AWS::Cognito::UserPool"
                  },
                  "UserPoolClientId": {
                    "type": "String",
                    "required": true,
                    "description": "The ID of the Amazon Cognito user pool client."
                  },
                  "UserPoolDomain": {
                    "type": "String",
                    "required": true,
                    "description": "The domain prefix or fully-qualified domain name of the Amazon Cognito user pool."
                  }
                }
              },
              "AuthenticateOidcConfig": {
                "type": "Object",
                "required": false,
                "description": "Information about an identity provider that is compliant with OpenID Connect (OIDC).",
                "properties": {
                  "AuthenticationRequestExtraParams": {
                    "type": "Json",
                    "required": false,
                    "description": "The query parameters (up to 10) to include in the redirect request to the authorization endpoint."
                  },
                  "AuthorizationEndpoint": {
                    "type": "String",
                    "required": true,
                    "description": "The authorization endpoint of the IdP."
                  },
                  "ClientId": {
                    "type": "String",
                    "required": true,
                    "description": "The OAuth 2.0 client identifier."
                  },
                  "ClientSecret": {
                    "type": "String",
                    "required": true,
                    "description": "The OAuth 2.0 client secret."
                  },
                  "Issuer": {
                    "type": "String",
                    "required": true,
                    "description": "The OIDC issuer identifier of the IdP."
                  },
                  "OnUnauthenticatedRequest": {
                    "type": "String",
                    "required": false,
                    "description": "The behavior if the user is not authenticated.",
                    "allowed-values": [
                      "*",
                      "deny",
                      "allow",
                      "authenticate"
                    ]
                  },
                  "Scope": {
                    "type": "String",
                    "required": false,
                    "description": "The set of user claims to be requested from the IdP."
                  },
                  "SessionCookieName": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the cookie used to maintain session information."
                  },
                  "SessionTimeout": {
                    "type": "Number",
                    "required": false,
                    "description": "The maximum duration of the authentication session, in seconds."
                  },
                  "TokenEndpoint": {
                    "type": "String",
                    "required": true,
                    "description": "The maximum duration of the authentication session, in seconds."
                  },
                  "UserInfoEndpoint": {
                    "type": "String",
                    "required": true,
                    "description": "The maximum duration of the authentication session, in seconds."
                  }
                }
              },
              "FixedResponseConfig": {
                "type": "Object",
                "required": false,
                "description": "Information for creating an action that returns a custom HTTP response.",
                "properties": {
                  "ContentType": {
                    "type": "String",
                    "required": false,
                    "description": "The content type."
                  },
                  "MessageBody": {
                    "type": "String",
                    "required": false,
                    "description": "The message."
                  },
                  "StatusCode": {
                    "type": "String",
                    "required": true,
                    "description": "The HTTP response code (2XX, 4XX, or 5XX)."
                  }
                }
              },
              "Order": {
                "type": "Number",
                "required": false,
                "description": "The order for the action."
              },
              "RedirectConfig": {
                "type": "Object",
                "required": false,
                "description": "Information for creating a redirect action. Specify only when Type is redirect.",
                "properties": {
                  "Host": {
                    "type": "String",
                    "required": false,
                    "description": "The hostname. This component is not percent-encoded."
                  },
                  "Path": {
                    "type": "String",
                    "required": false,
                    "description": "The absolute path, starting with the leading /."
                  },
                  "Port": {
                    "type": "String",
                    "required": false,
                    "description": "The port. You can specify a value from 1 to 65535 or #{port}."
                  },
                  "Protocol": {
                    "type": "String",
                    "required": false,
                    "description": "The protocol.",
                    "allowed-values": [
                      "*",
                      "HTTP",
                      "HTTPS"
                    ]
                  },
                  "Query": {
                    "type": "String",
                    "required": false,
                    "description": "The query parameters, URL-encoded when necessary, but not percent-encoded."
                  },
                  "StatusCode": {
                    "type": "String",
                    "required": true,
                    "description": "The HTTP redirect code."
                  }
                }
              }
            }
          },
          "LoadBalancerArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "description": "The Amazon Resource Name (ARN) of the load balancer to associate with the listener."
          },
          "Port": {
            "type": "Number",
            "required": true,
            "description": "The port on which the listener listens for requests."
          },
          "Protocol": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "*",
              "HTTP",
              "HTTPS"
            ],
            "description": "The protocol that clients must use to send requests to the listener."
          },
          "SslPolicy": {
            "type": "String",
            "required": false,
            "description": "The security policy that defines the ciphers and protocols that the load balancer supports."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElasticLoadBalancingV2::ListenerCertificate": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ElasticLoadBalancingV2::ListenerCertificate resource specifies certificates for an Elastic Load Balancing secure listener.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ElasticLoadBalancingV2::ListenerCertificate resource specifies certificates for an Elastic Load Balancing secure listener."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Certificates": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "Certificates specified for the listener. Duplicates not allowed.",
            "properties": {
              "CertificateArn": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::CertificateManager::Certificate",
                "description": "The Amazon Resource Name (ARN) of the certificate."
              }
            }
          },
          "ListenerArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ElasticLoadBalancingV2::Listener",
            "description": "The Amazon Resource Name (ARN) of the listener."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElasticLoadBalancingV2::ListenerRule": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ElasticLoadBalancingV2::ListenerRule resource defines which requests an Elastic Load Balancing listener takes action on and the action that it takes.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ElasticLoadBalancingV2::ListenerRule resource defines which requests an Elastic Load Balancing listener takes action on and the action that it takes."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Actions": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "The action that the listener takes when a request meets the specified condition.",
            "properties": {
              "TargetGroupArn": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::ElasticLoadBalancingV2::TargetGroup",
                "description": "The Amazon Resource Name (ARN) of the target group to which Elastic Load Balancing routes the traffic."
              },
              "Type": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "*",
                  "forward"
                ],
                "description": "The type of action."
              },
              "AuthenticateCognitoConfig": {
                "type": "Object",
                "required": false,
                "description": "Information for using Amazon Cognito to authenticate users.",
                "properties": {
                  "AuthenticationRequestExtraParams": {
                    "type": "Json",
                    "required": false,
                    "description": "The query parameters (up to 10) to include in the redirect request to the authorization endpoint."
                  },
                  "OnUnauthenticatedRequest": {
                    "type": "String",
                    "required": false,
                    "description": "The behavior if the user is not authenticated.",
                    "allowed-values": [
                      "*",
                      "deny",
                      "allow",
                      "authenticate"
                    ]
                  },
                  "Scope": {
                    "type": "String",
                    "required": false,
                    "description": "The set of user claims to be requested from the IdP."
                  },
                  "SessionCookieName": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the cookie used to maintain session information."
                  },
                  "SessionTimeout": {
                    "type": "Number",
                    "required": false,
                    "description": "The maximum duration of the authentication session, in seconds."
                  },
                  "UserPoolArn": {
                    "type": "String",
                    "required": true,
                    "description": "The Amazon Resource Name (ARN) of the Amazon Cognito user pool.",
                    "resource-ref-type": "AWS::Cognito::UserPool"
                  },
                  "UserPoolClientId": {
                    "type": "String",
                    "required": true,
                    "description": "The ID of the Amazon Cognito user pool client."
                  },
                  "UserPoolDomain": {
                    "type": "String",
                    "required": true,
                    "description": "The domain prefix or fully-qualified domain name of the Amazon Cognito user pool."
                  }
                }
              },
              "AuthenticateOidcConfig": {
                "type": "Object",
                "required": false,
                "description": "Information about an identity provider that is compliant with OpenID Connect (OIDC).",
                "properties": {
                  "AuthenticationRequestExtraParams": {
                    "type": "Json",
                    "required": false,
                    "description": "The query parameters (up to 10) to include in the redirect request to the authorization endpoint."
                  },
                  "AuthorizationEndpoint": {
                    "type": "String",
                    "required": true,
                    "description": "The authorization endpoint of the IdP."
                  },
                  "ClientId": {
                    "type": "String",
                    "required": true,
                    "description": "The OAuth 2.0 client identifier."
                  },
                  "ClientSecret": {
                    "type": "String",
                    "required": true,
                    "description": "The OAuth 2.0 client secret."
                  },
                  "Issuer": {
                    "type": "String",
                    "required": true,
                    "description": "The OIDC issuer identifier of the IdP."
                  },
                  "OnUnauthenticatedRequest": {
                    "type": "String",
                    "required": false,
                    "description": "The behavior if the user is not authenticated.",
                    "allowed-values": [
                      "*",
                      "deny",
                      "allow",
                      "authenticate"
                    ]
                  },
                  "Scope": {
                    "type": "String",
                    "required": false,
                    "description": "The set of user claims to be requested from the IdP."
                  },
                  "SessionCookieName": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the cookie used to maintain session information."
                  },
                  "SessionTimeout": {
                    "type": "Number",
                    "required": false,
                    "description": "The maximum duration of the authentication session, in seconds."
                  },
                  "TokenEndpoint": {
                    "type": "String",
                    "required": true,
                    "description": "The maximum duration of the authentication session, in seconds."
                  },
                  "UserInfoEndpoint": {
                    "type": "String",
                    "required": true,
                    "description": "The maximum duration of the authentication session, in seconds."
                  }
                }
              },
              "FixedResponseConfig": {
                "type": "Object",
                "required": false,
                "description": "Information for creating an action that returns a custom HTTP response.",
                "properties": {
                  "ContentType": {
                    "type": "String",
                    "required": false,
                    "description": "The content type."
                  },
                  "MessageBody": {
                    "type": "String",
                    "required": false,
                    "description": "The message."
                  },
                  "StatusCode": {
                    "type": "String",
                    "required": true,
                    "description": "The HTTP response code (2XX, 4XX, or 5XX)."
                  }
                }
              },
              "Order": {
                "type": "Number",
                "required": false,
                "description": "The order for the action."
              },
              "RedirectConfig": {
                "type": "Object",
                "required": false,
                "description": "Information for creating a redirect action. Specify only when Type is redirect.",
                "properties": {
                  "Host": {
                    "type": "String",
                    "required": false,
                    "description": "The hostname. This component is not percent-encoded."
                  },
                  "Path": {
                    "type": "String",
                    "required": false,
                    "description": "The absolute path, starting with the leading /."
                  },
                  "Port": {
                    "type": "String",
                    "required": false,
                    "description": "The port. You can specify a value from 1 to 65535 or #{port}."
                  },
                  "Protocol": {
                    "type": "String",
                    "required": false,
                    "description": "The protocol.",
                    "allowed-values": [
                      "*",
                      "HTTP",
                      "HTTPS"
                    ]
                  },
                  "Query": {
                    "type": "String",
                    "required": false,
                    "description": "The query parameters, URL-encoded when necessary, but not percent-encoded."
                  },
                  "StatusCode": {
                    "type": "String",
                    "required": true,
                    "description": "The HTTP redirect code."
                  }
                }
              }
            }
          },
          "Conditions": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "The conditions under which a rule takes effect.",
            "properties": {
              "Field": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "*",
                  "path-pattern"
                ],
                "description": "The name of the condition that you want to define, such as path-pattern (which forwards requests based on the URL of the request)."
              },
              "Values": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The value for the field that you specified in the Field property."
              }
            }
          },
          "ListenerArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ElasticLoadBalancingV2::Listener",
            "description": "The Amazon Resource Name (ARN) of the listener that the rule applies to."
          },
          "Priority": {
            "type": "Number",
            "required": true,
            "description": "The priority for the rule."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElasticLoadBalancingV2::LoadBalancer": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ElasticLoadBalancingV2::LoadBalancer resource creates an Elastic Load Balancing Application load balancer that distributes incoming application traffic across multiple targets (such as EC2 instances) in multiple Availability Zones.",
    "return-values": [
      {
        "name": "DNSName",
        "description": "The DNS name for the Application load balancer, for example my-load-balancer-424835706.us-west-2.elb.amazonaws.com."
      },
      {
        "name": "CanonicalHostedZoneID",
        "description": "The ID of the Amazon Route 53 hosted zone associated with the load balancer, for example Z2P70J7EXAMPLE."
      },
      {
        "name": "LoadBalancerFullName",
        "description": "The full name of the Application load balancer, for example app/my-load-balancer/50dc6c495c0c9188."
      },
      {
        "name": "LoadBalancerName",
        "description": "The name of the Application load balancer, for example my-load-balancer."
      },
      {
        "name": "SecurityGroups",
        "description": "The IDs of the security groups for the Application load balancer, for example sg-123456a."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ElasticLoadBalancingV2::LoadBalancer resource creates an Elastic Load Balancing Application load balancer that distributes incoming application traffic across multiple targets (such as EC2 instances) in multiple Availability Zones."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "LoadBalancerAttributes": {
            "type": "Object",
            "array-type": "String",
            "required": false,
            "description": "Specifies the load balancer configuration.",
            "properties": {
              "Key": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "*",
                  "access_logs.s3.enabled",
                  "access_logs.s3.bucket",
                  "access_logs.s3.prefix ",
                  "deletion_protection.enabled",
                  "idle_timeout.timeout_seconds"
                ],
                "description": "The name of an attribute that you want to configure."
              },
              "Value": {
                "type": "String",
                "required": false,
                "description": "A value for the attribute."
              }
            }
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "Specifies a name for the load balancer. This name must be unique within your AWS account and can have a maximum of 32 alphanumeric characters and hyphens. A name can't begin or end with a hyphen."
          },
          "Scheme": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "internet-facing",
              "internal"
            ],
            "description": "Specifies whether the load balancer is internal or Internet-facing."
          },
          "SecurityGroups": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "description": "Specifies a list of the IDs of the security groups to assign to the load balancer."
          },
          "Subnets": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::Subnet",
            "description": "Specifies a list of at least two IDs of the subnets to associate with the load balancer. The subnets must be in different Availability Zones."
          },
          "IpAddressType": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "ipv4",
              "dualstack"
            ],
            "description": "The type of IP addresses that are used by the load balancer's subnets, such as ipv4 (for IPv4 addresses) or dualstack (for IPv4 and IPv6 addresses)."
          },
          "SubnetMappings": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The subnets to attach to the load balancer, specified as a list of SubnetMapping property types.",
            "properties": {
              "AllocationId": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::EC2::EIP",
                "description": "[Network Load Balancer] The ID that represents the allocation of the Elastic IP address."
              },
              "SubnetId": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::EC2::Subnet",
                "description": "The ID of the subnet."
              }
            }
          },
          "Type": {
            "type": "String",
            "required": false,
            "description": "Specifies the type of load balancer to create. Valid values are application and network.",
            "allowed-values": [
              "*",
              "application",
              "network"
            ]
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElasticLoadBalancingV2::TargetGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ElasticLoadBalancingV2::TargetGroup resource creates an Elastic Load Balancing target group that routes requests to one or more registered targets, such as EC2 instances.",
    "return-values": [
      {
        "name": "LoadBalancerArns",
        "description": "A list of Amazon Resource Names (ARNs) of the load balancers that route traffic to this target group."
      },
      {
        "name": "TargetGroupFullName",
        "description": "The full name of the target group, such as targetgroup/my-target-group/cbf133c568e0d028."
      },
      {
        "name": "TargetGroupName",
        "description": "The name of the target group, such as my-target-group. This is the value of the target group's Name property."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ElasticLoadBalancingV2::TargetGroup resource creates an Elastic Load Balancing target group that routes requests to one or more registered targets, such as EC2 instances."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "HealthCheckIntervalSeconds": {
            "type": "Number",
            "required": false,
            "description": "The approximate number of seconds between health checks for an individual target."
          },
          "HealthCheckPath": {
            "type": "String",
            "required": false,
            "description": "The ping path destination where Elastic Load Balancing sends health check requests."
          },
          "HealthCheckPort": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "traffic-port"
            ],
            "description": "The port that the load balancer uses when performing health checks on the targets."
          },
          "HealthCheckProtocol": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "HTTP",
              "HTTPS"
            ],
            "description": "The protocol that the load balancer uses when performing health checks on the targets, such as HTTP or HTTPS."
          },
          "HealthCheckTimeoutSeconds": {
            "type": "Number",
            "required": false,
            "description": "The number of seconds to wait for a response before considering that a health check has failed."
          },
          "HealthyThresholdCount": {
            "type": "Number",
            "required": false,
            "description": "The number of consecutive successful health checks that are required before an unhealthy target is considered healthy."
          },
          "Matcher": {
            "type": "Object",
            "required": false,
            "description": "The HTTP codes that a healthy target uses when responding to a health check.",
            "properties": {
              "HttpCode": {
                "type": "String",
                "required": false,
                "description": "The HTTP codes that a healthy target must use when responding to a health check, such as 200,202 or 200-299."
              }
            }
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "A name for the target group."
          },
          "Port": {
            "type": "Number",
            "required": true,
            "description": "The port on which the targets receive traffic."
          },
          "Protocol": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "*",
              "HTTP",
              "HTTPS"
            ],
            "description": "The protocol to use for routing traffic to the targets."
          },
          "TargetGroupAttributes": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "Target group configurations.",
            "properties": {
              "Key": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "*",
                  "deregistration_delay.timeout_seconds",
                  "stickiness.enabled",
                  "stickiness.type",
                  "stickiness.lb_cookie.duration_seconds"
                ],
                "description": "The name of an attribute that you want to configure."
              },
              "Value": {
                "type": "String",
                "required": false,
                "description": "A value for the attribute."
              }
            }
          },
          "TargetGroupFullName": {
            "type": "String",
            "required": false,
            "description": "The full name of the target group."
          },
          "Targets": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "The targets to add to this target group.",
            "properties": {
              "Id": {
                "type": "String",
                "required": true,
                "description": "The ID of the target, such as an EC2 instance ID.",
                "resource-ref-type": [
                  "*",
                  "AWS::EC2::Instance"
                ]
              },
              "Port": {
                "type": "Number",
                "required": false,
                "description": "The port number on which the target is listening for traffic."
              },
              "AvailabilityZone": {
                "type": "String",
                "required": false,
                "description": "The Availability Zone where the IP address is to be registered."
              }
            }
          },
          "UnhealthyThresholdCount": {
            "type": "Number",
            "required": false,
            "description": "The number of consecutive failed health checks that are required before a target is considered unhealthy."
          },
          "VpcId": {
            "type": "Number",
            "required": true,
            "resource-ref-type": "AWS::EC2::VPC",
            "description": "The ID of the VPC in which your targets are located."
          },
          "TargetType": {
            "type": "String",
            "required": false,
            "description": "The registration type of the targets in this target group. Valid values are instance and ip. The default is instance.",
            "allowed-values": [
              "*",
              "instance",
              "ip"
            ]
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Elasticsearch::Domain": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Elasticsearch::Domain resource creates an Amazon Elasticsearch Service (Amazon ES) domain that encapsulates the Amazon ES engine instances.",
    "return-values": [
      {
        "name": "DomainArn",
        "description": "The Amazon Resource Name (ARN) of the domain, such as arn:aws:es:us-west-2:123456789012:domain/mystack-elasti-1ab2cdefghij."
      },
      {
        "name": "DomainEndpoint",
        "description": "The domain-specific endpoint that is used to submit index, search, and data upload requests to an Amazon ES domain, such as search-mystack-elasti-1ab2cdefghij-ab1c2deckoyb3hofw7wpqa3cm.us-west-2.es.amazonaws.com."
      },
      {
        "name": "Arn",
        "description": "The ARN of the Elasticsearch domain."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Elasticsearch::Domain resource creates an Amazon Elasticsearch Service (Amazon ES) domain that encapsulates the Amazon ES engine instances."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AccessPolicies": {
            "type": "Json",
            "required": false,
            "description": "An AWS Identity and Access Management (IAM) policy document that specifies who can access the Amazon ES domain and their permissions."
          },
          "AdvancedOptions": {
            "type": "Json",
            "required": false,
            "description": "Additional options to specify for the Amazon ES domain."
          },
          "DomainName": {
            "type": "String",
            "required": false,
            "description": "A name for the Amazon ES domain."
          },
          "EBSOptions": {
            "type": "Object",
            "required": false,
            "description": "The configurations of Amazon Elastic Block Store (Amazon EBS) volumes that are attached to data nodes in the Amazon ES domain.",
            "properties": {
              "EBSEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Specifies whether Amazon EBS volumes are attached to data nodes in the Amazon ES domain."
              },
              "Iops": {
                "type": "Number",
                "required": false,
                "description": "The number of I/O operations per second (IOPS) that the volume supports."
              },
              "VolumeSize": {
                "type": "Number",
                "required": false,
                "description": "The size of the EBS volume for each data node."
              },
              "VolumeType": {
                "type": "String",
                "required": false,
                "description": "The EBS volume type to use with the Amazon ES domain, such as standard, gp2, or io1.",
                "allowed-values": [
                  "gp2",
                  "io1",
                  "*"
                ]
              }
            }
          },
          "ElasticsearchClusterConfig": {
            "type": "Object",
            "required": false,
            "description": "The cluster configuration for the Amazon ES domain.",
            "properties": {
              "DedicatedMasterCount": {
                "type": "Number",
                "required": false,
                "description": "The number of instances to use for the master node."
              },
              "DedicatedMasterEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether to use a dedicated master node for the Amazon ES domain."
              },
              "DedicatedMasterType": {
                "type": "String",
                "required": false,
                "description": "The hardware configuration of the computer that hosts the dedicated master node, such as m3.medium.elasticsearch.",
                "allowed-values": [
                  "*",
                  "t2.micro.elasticsearch",
                  "t2.small.elasticsearch",
                  "t2.medium.elasticsearch",
                  "m3.medium.elasticsearch",
                  "m3.large.elasticsearch",
                  "m3.xlarge.elasticsearch",
                  "m3.2xlarge.elasticsearch",
                  "r3.large.elasticsearch",
                  "r3.xlarge.elasticsearch",
                  "r3.2xlarge.elasticsearch",
                  "r3.4xlarge.elasticsearch",
                  "r3.8xlarge.elasticsearch",
                  "i2.xlarge.elasticsearch",
                  "i2.2xlarge.elasticsearch"
                ]
              },
              "InstanceCount": {
                "type": "Number",
                "required": false,
                "description": "The number of data nodes (instances) to use in the Amazon ES domain."
              },
              "InstanceType": {
                "type": "String",
                "required": false,
                "description": "",
                "allowed-values": [
                  "*",
                  "t2.micro.elasticsearch",
                  "t2.small.elasticsearch",
                  "t2.medium.elasticsearch",
                  "m3.medium.elasticsearch",
                  "m3.large.elasticsearch",
                  "m3.xlarge.elasticsearch",
                  "m3.2xlarge.elasticsearch",
                  "r3.large.elasticsearch",
                  "r3.xlarge.elasticsearch",
                  "r3.2xlarge.elasticsearch",
                  "r3.4xlarge.elasticsearch",
                  "r3.8xlarge.elasticsearch",
                  "i2.xlarge.elasticsearch",
                  "i2.2xlarge.elasticsearch"
                ]
              },
              "ZoneAwarenessEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether to enable zone awareness for the Amazon ES domain."
              }
            }
          },
          "ElasticsearchVersion": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "1.5",
              "2.3"
            ],
            "description": "The version of Elasticsearch to use, such as 2.3."
          },
          "SnapshotOptions": {
            "type": "Object",
            "required": false,
            "description": "The hour in UTC during which the service takes an automated daily snapshot of the indices in the Amazon ES domain.",
            "properties": {
              "AutomatedSnapshotStartHour": {
                "type": "Number",
                "required": false,
                "description": "The hour in UTC during which the service takes an automated daily snapshot of the indices in the Amazon ES domain."
              }
            }
          },
          "VPCOptions": {
            "type": "Object",
            "required": false,
            "description": "The virtual private cloud (VPC) configuration for the Amazon ES domain.",
            "properties": {
              "SecurityGroupIds": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "description": "The list of security group IDs that are associated with the VPC endpoints for the domain. "
              },
              "SubnetIds": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "resource-ref-type": "AWS::EC2::Subnet",
                "description": "A list of subnet IDs that are associated with the VPC endpoints for the domain."
              }
            }
          },
          "EncryptionAtRestOptions": {
            "type": "Object",
            "required": false,
            "description": "Whether the domain should encrypt data at rest, and if so, the AWS Key Management Service (KMS) key to use.",
            "properties": {
              "Enabled": {
                "type": "Boolean",
                "required": false,
                "description": "Specify true to enable encryption at rest."
              },
              "KmsKeyId": {
                "type": "String",
                "required": false,
                "description": "The KMS key ID.",
                "resource-ref-type": "AWS::KMS::Key"
              }
            }
          },
          "NodeToNodeEncryptionOptions": {
            "type": "Object",
            "required": false,
            "description": "Enables node-to-node encryption.",
            "properties": {
              "Enabled": {
                "type": "Boolean",
                "required": false,
                "description": "Enables node-to-node encryption."
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EMR::Cluster": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EMR::Cluster resource creates an Amazon Elastic MapReduce (Amazon EMR) cluster.",
    "return-values": [
      {
        "name": "MasterPublicDNS",
        "description": "The public DNS name of the master node (instance), such as ec2-12-123-123-123.us-west-2.compute.amazonaws.com."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EMR::Cluster resource creates an Amazon Elastic MapReduce (Amazon EMR) cluster."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AdditionalInfo": {
            "type": "Json",
            "required": false,
            "description": "Additional features that you want to select."
          },
          "Applications": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The software applications to deploy on the cluster, and the arguments that Amazon EMR passes to those applications.",
            "properties": {
              "AdditionalInfo": {
                "type": "Json",
                "required": false,
                "description": "Metadata about third-party applications that third-party vendors use for testing purposes."
              },
              "Args": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "Arguments that Amazon EMR passes to the application."
              },
              "Name": {
                "type": "String",
                "required": false,
                "description": "The name of the application to add to your cluster."
              },
              "Version": {
                "type": "String",
                "required": false,
                "description": "The version of the application."
              }
            }
          },
          "AutoScalingRole": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "An AWS Identity and Access Management (IAM) role for automatic scaling policies. The default role is EMR_AutoScaling_DefaultRole."
          },
          "BootstrapActions": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A list of bootstrap actions that Amazon EMR runs before starting applications on the cluster.",
            "properties": {
              "Name": {
                "type": "String",
                "required": true,
                "description": "The name of the bootstrap action to add to your cluster."
              },
              "ScriptBootstrapAction": {
                "type": "Object",
                "required": true,
                "description": "The script that the bootstrap action runs.",
                "properties": {
                  "Args": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "description": "A list of command line arguments to pass to the bootstrap action script."
                  },
                  "Path": {
                    "type": "String",
                    "required": true,
                    "description": "The location of the script that Amazon EMR runs during a bootstrap action. Specify a location in an S3 bucket or your local file system."
                  }
                }
              }
            }
          },
          "Configurations": {
            "type": "Array",
            "array-type": "Json",
            "required": false,
            "description": "The software configuration of the Amazon EMR cluster."
          },
          "EbsConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Configures Amazon Elastic Block Store (Amazon EBS) storage volumes to attach to your instances.",
            "properties": {
              "EbsBlockDeviceConfig": {
                "type": "Object",
                "required": false,
                "description": "Configures the block storage devices that are associated with your EMR instances.",
                "properties": {
                  "VolumeSpecification": {
                    "type": "Object",
                    "required": false,
                    "description": "The settings for the Amazon EBS volumes.",
                    "properties": {
                      "Iops": {
                        "type": "Number",
                        "required": false,
                        "description": "The number of I/O operations per second (IOPS) that the volume supports. For more information, see Iops for the EbsBlockDevice action in the Amazon EC2 API Reference."
                      },
                      "SizeInGB": {
                        "type": "Number",
                        "required": true,
                        "description": "The volume size, in Gibibytes (GiB)."
                      },
                      "VolumeType": {
                        "type": "Number",
                        "required": true,
                        "allowed-values": [
                          "*",
                          "standard",
                          "io1",
                          "gp2"
                        ],
                        "description": "The volume type, such as standard or io1."
                      }
                    }
                  },
                  "VolumesPerInstance": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of Amazon EBS volumes that you want to create for each instance in the EMR cluster or instance group."
                  }
                }
              },
              "EbsOptimized": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether the instances are optimized for Amazon EBS I/O."
              }
            }
          },
          "Instances": {
            "type": "Object",
            "required": true,
            "description": "Configures the EC2 instances that will run jobs in the Amazon EMR cluster.",
            "properties": {
              "AdditionalMasterSecurityGroups": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "description": "A list of additional EC2 security group IDs to assign to the master instance (master node) in your Amazon EMR cluster."
              },
              "AdditionalSlaveSecurityGroups": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "description": "A list of additional EC2 security group IDs to assign to the slave instances (slave nodes) in your Amazon EMR cluster."
              },
              "Ec2KeyName": {
                "type": "String",
                "required": false,
                "description": "The name of an Amazon Elastic Compute Cloud (Amazon EC2) key pair"
              },
              "Ec2SubnetId": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::EC2::Subnet",
                "description": "The ID of an Amazon Virtual Private Cloud (Amazon VPC) virtual private cloud (VPC) where you want to launch your instances."
              },
              "EmrManagedMasterSecurityGroup": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "description": "The ID of an EC2 security group (managed by Amazon EMR) that is assigned to the master instance (master node) in your Amazon EMR cluster."
              },
              "EmrManagedSlaveSecurityGroup": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "description": "The ID of an EC2 security group (managed by Amazon EMR) that is assigned to the slave instances (slave nodes) in your Amazon EMR cluster."
              },
              "HadoopVersion": {
                "type": "String",
                "required": false,
                "description": "The Hadoop version for the job flow.",
                "allowed-values": [
                  "*",
                  "0.18",
                  "0.20",
                  "0.20.205",
                  "1.0.3",
                  "2.2.0",
                  "2.4.0"
                ]
              },
              "Placement": {
                "type": "Object",
                "required": false,
                "description": "The Availability Zone (AZ) in which the job flow runs.",
                "properties": {
                  "AvailabilityZone": {
                    "type": "String",
                    "required": false,
                    "description": "The Amazon Elastic Compute Cloud (Amazon EC2) AZ for the job flow."
                  }
                }
              },
              "ServiceAccessSecurityGroup": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "description": "The ID of an EC2 security group (managed by Amazon EMR) that services use to access clusters in private subnets."
              },
              "TerminationProtected": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether to prevent the EC2 instances from being terminated by an API call or user intervention."
              },
              "CoreInstanceFleet": {
                "type": "Object",
                "required": false,
                "description": "The instance fleet settings for the core instances in your Amazon EMR cluster. Use this property with the MasterInstanceFleet property.",
                "properties": {
                  "InstanceTypeConfigs": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "The instance type configurations that define the EC2 instances in the instance fleet. Duplicates not allowed.",
                    "properties": {
                      "BidPrice": {
                        "type": "String",
                        "required": false,
                        "description": "The bid price for each EC2 Spot Instance type, as defined by InstanceType. BidPrice is expressed in USD."
                      },
                      "BidPriceAsPercentageOfOnDemandPrice": {
                        "type": "Number",
                        "required": false,
                        "description": "The bid price, as a percentage of the On-Demand price, for each EC2 Spot instance as defined by InstanceType."
                      },
                      "Configurations": {
                        "type": "Json",
                        "required": false,
                        "description": "A configuration classification that applies when provisioning cluster instances."
                      },
                      "EbsConfiguration": {
                        "type": "Object",
                        "required": false,
                        "description": "The configuration of Amazon Elastic Block Store (Amazon EBS) that is attached to each instance as defined by InstanceType.",
                        "properties": {
                          "EbsBlockDeviceConfigs": {
                            "type": "Array",
                            "array-type": "Object",
                            "required": false,
                            "description": "Configures the block storage devices that are associated with your EMR instances.",
                            "properties": {
                              "VolumeSpecification": {
                                "type": "Object",
                                "required": true,
                                "description": "The settings for the Amazon EBS volumes.",
                                "properties": {
                                  "Iops": {
                                    "type": "Number",
                                    "required": false,
                                    "description": "The number of I/O operations per second (IOPS) that the volume supports."
                                  },
                                  "SizeInGB": {
                                    "type": "Number",
                                    "required": true,
                                    "description": "The volume size, in Gibibytes (GiB)."
                                  },
                                  "VolumeType": {
                                    "type": "String",
                                    "required": true,
                                    "description": "The volume type, such as standard or io1."
                                  }
                                }
                              },
                              "VolumesPerInstance": {
                                "type": "Number",
                                "required": false,
                                "description": "The number of Amazon EBS volumes that you want to create for each instance in the EMR cluster or instance group. The number cannot be 0."
                              }
                            }
                          },
                          "EbsOptimized": {
                            "type": "Boolean",
                            "required": false,
                            "description": "Indicates whether the instances are optimized for Amazon EBS I/O."
                          }
                        }
                      },
                      "InstanceType": {
                        "type": "String",
                        "required": true,
                        "description": "An EC2 instance type, such as m3.xlarge."
                      },
                      "WeightedCapacity": {
                        "type": "Number",
                        "required": false,
                        "description": "The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in InstanceFleetConfig."
                      }
                    }
                  },
                  "LaunchSpecifications": {
                    "type": "Object",
                    "required": false,
                    "description": "The launch specification for the instance fleet.",
                    "properties": {
                      "SpotSpecification": {
                        "type": "Object",
                        "required": true,
                        "description": "The launch specification for Spot instances in the fleet, which determines the defined duration and provisioning timeout behavior.",
                        "properties": {
                          "BlockDurationMinutes": {
                            "type": "Number",
                            "required": false,
                            "description": "The defined duration for Spot instances (also known as Spot blocks) in minutes."
                          },
                          "TimeoutAction": {
                            "type": "String",
                            "required": true,
                            "description": "The action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired."
                          },
                          "TimeoutDurationMinutes": {
                            "type": "Number",
                            "required": true,
                            "description": "The spot provisioning timeout period in minutes."
                          }
                        }
                      }
                    }
                  },
                  "Name": {
                    "type": "String",
                    "required": false,
                    "description": "The friendly name of the instance fleet."
                  },
                  "TargetOnDemandCapacity": {
                    "type": "Number",
                    "required": false,
                    "description": "The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision."
                  },
                  "TargetSpotCapacity": {
                    "type": "Number",
                    "required": false,
                    "description": "The target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision."
                  }
                }
              },
              "MasterInstanceFleet": {
                "type": "Object",
                "required": false,
                "description": "The instance fleet settings for the master instance (master node).",
                "properties": {
                  "InstanceTypeConfigs": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "The instance type configurations that define the EC2 instances in the instance fleet. Duplicates not allowed.",
                    "properties": {
                      "BidPrice": {
                        "type": "String",
                        "required": false,
                        "description": "The bid price for each EC2 Spot Instance type, as defined by InstanceType. BidPrice is expressed in USD."
                      },
                      "BidPriceAsPercentageOfOnDemandPrice": {
                        "type": "Number",
                        "required": false,
                        "description": "The bid price, as a percentage of the On-Demand price, for each EC2 Spot instance as defined by InstanceType."
                      },
                      "Configurations": {
                        "type": "Json",
                        "required": false,
                        "description": "A configuration classification that applies when provisioning cluster instances."
                      },
                      "EbsConfiguration": {
                        "type": "Object",
                        "required": false,
                        "description": "The configuration of Amazon Elastic Block Store (Amazon EBS) that is attached to each instance as defined by InstanceType.",
                        "properties": {
                          "EbsBlockDeviceConfigs": {
                            "type": "Array",
                            "array-type": "Object",
                            "required": false,
                            "description": "Configures the block storage devices that are associated with your EMR instances.",
                            "properties": {
                              "VolumeSpecification": {
                                "type": "Object",
                                "required": true,
                                "description": "The settings for the Amazon EBS volumes.",
                                "properties": {
                                  "Iops": {
                                    "type": "Number",
                                    "required": false,
                                    "description": "The number of I/O operations per second (IOPS) that the volume supports."
                                  },
                                  "SizeInGB": {
                                    "type": "Number",
                                    "required": true,
                                    "description": "The volume size, in Gibibytes (GiB)."
                                  },
                                  "VolumeType": {
                                    "type": "String",
                                    "required": true,
                                    "description": "The volume type, such as standard or io1."
                                  }
                                }
                              },
                              "VolumesPerInstance": {
                                "type": "Number",
                                "required": false,
                                "description": "The number of Amazon EBS volumes that you want to create for each instance in the EMR cluster or instance group. The number cannot be 0."
                              }
                            }
                          },
                          "EbsOptimized": {
                            "type": "Boolean",
                            "required": false,
                            "description": "Indicates whether the instances are optimized for Amazon EBS I/O."
                          }
                        }
                      },
                      "InstanceType": {
                        "type": "String",
                        "required": true,
                        "description": "An EC2 instance type, such as m3.xlarge."
                      },
                      "WeightedCapacity": {
                        "type": "Number",
                        "required": false,
                        "description": "The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in InstanceFleetConfig."
                      }
                    }
                  },
                  "LaunchSpecifications": {
                    "type": "Object",
                    "required": false,
                    "description": "The launch specification for the instance fleet.",
                    "properties": {
                      "SpotSpecification": {
                        "type": "Object",
                        "required": true,
                        "description": "The launch specification for Spot instances in the fleet, which determines the defined duration and provisioning timeout behavior.",
                        "properties": {
                          "BlockDurationMinutes": {
                            "type": "Number",
                            "required": false,
                            "description": "The defined duration for Spot instances (also known as Spot blocks) in minutes."
                          },
                          "TimeoutAction": {
                            "type": "String",
                            "required": true,
                            "description": "The action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired."
                          },
                          "TimeoutDurationMinutes": {
                            "type": "Number",
                            "required": true,
                            "description": "The spot provisioning timeout period in minutes."
                          }
                        }
                      }
                    }
                  },
                  "Name": {
                    "type": "String",
                    "required": false,
                    "description": "The friendly name of the instance fleet."
                  },
                  "TargetOnDemandCapacity": {
                    "type": "Number",
                    "required": false,
                    "description": "The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision."
                  },
                  "TargetSpotCapacity": {
                    "type": "Number",
                    "required": false,
                    "description": "The target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision."
                  }
                }
              },
              "KeepJobFlowAliveWhenNoSteps": {
                "type": "Boolean",
                "required": false,
                "description": "If enabled keep jobs alive when no steps."
              },
              "CoreInstanceGroup": {
                "type": "Object",
                "required": true,
                "resource-ref-type": "AWS::EMR::InstanceGroupConfig",
                "description": "The settings for the core instances in your Amazon EMR cluster.",
                "properties": {
                  "BidPrice": {
                    "type": "String",
                    "required": false,
                    "description": "When launching instances as Spot Instances, the bid price in USD for each EC2 instance in the instance group."
                  },
                  "Configurations": {
                    "type": "Array",
                    "array-type": "Json",
                    "required": false,
                    "description": "A list of configurations to apply to this instance group."
                  },
                  "InstanceCount": {
                    "type": "Number",
                    "required": true,
                    "description": "The number of instances to launch in the instance group."
                  },
                  "InstanceType": {
                    "type": "String",
                    "required": true,
                    "description": "The EC2 instance type for all instances in the instance group.",
                    "allowed-values": [
                      "*",
                      "t1.micro",
                      "t2.nano",
                      "t2.micro",
                      "t2.small",
                      "t2.medium",
                      "t2.large",
                      "m1.small",
                      "m1.medium",
                      "m1.large",
                      "m1.xlarge",
                      "m2.xlarge",
                      "m2.2xlarge",
                      "m2.4xlarge",
                      "m3.medium",
                      "m3.large",
                      "m3.xlarge",
                      "m3.2xlarge",
                      "m4.large",
                      "m4.xlarge",
                      "m4.2xlarge",
                      "m4.4xlarge",
                      "m4.10xlarge",
                      "m4.16xlarge",
                      "c1.medium",
                      "c1.xlarge",
                      "cr1.8xlarge",
                      "c3.large",
                      "c3.xlarge",
                      "c3.2xlarge",
                      "c3.4xlarge",
                      "c3.8xlarge",
                      "c4.large",
                      "c4.xlarge",
                      "c4.2xlarge",
                      "c4.4xlarge",
                      "c4.8xlarge",
                      "cc1.4xlarge",
                      "cc2.8xlarge",
                      "cg1.4xlarge",
                      "d2.xlarge",
                      "d2.2xlarge",
                      "d2.4xlarge",
                      "d2.8xlarge",
                      "g2.2xlarge",
                      "g2.8xlarge",
                      "hi1.4xlarge",
                      "hs1.8xlarge",
                      "i2.xlarge",
                      "i2.2xlarge",
                      "i2.4xlarge",
                      "i2.8xlarge",
                      "p2.xlarge",
                      "p2.8xlarge",
                      "p2.16xlarge",
                      "r3.large",
                      "r3.xlarge",
                      "r3.2xlarge",
                      "r3.4xlarge",
                      "r3.8xlarge",
                      "x1.32xlarge"
                    ]
                  },
                  "Market": {
                    "type": "String",
                    "required": false,
                    "description": "When launching instances as Spot Instances, the bid price in USD for each EC2 instance in the instance group.",
                    "allowed-values": [
                      "ON_DEMAND",
                      "SPOT"
                    ]
                  },
                  "Name": {
                    "type": "String",
                    "required": false,
                    "description": "A name for the instance group."
                  }
                }
              },
              "MasterInstanceGroup": {
                "type": "Object",
                "required": true,
                "resource-ref-type": "AWS::EMR::InstanceGroupConfig",
                "description": "The settings for the core instances in your Amazon EMR cluster.",
                "properties": {
                  "BidPrice": {
                    "type": "String",
                    "required": false,
                    "description": "When launching instances as Spot Instances, the bid price in USD for each EC2 instance in the instance group."
                  },
                  "Configurations": {
                    "type": "Array",
                    "array-type": "Json",
                    "required": false,
                    "description": "A list of configurations to apply to this instance group."
                  },
                  "InstanceCount": {
                    "type": "Number",
                    "required": true,
                    "description": "The number of instances to launch in the instance group."
                  },
                  "InstanceType": {
                    "type": "String",
                    "required": true,
                    "description": "The EC2 instance type for all instances in the instance group.",
                    "allowed-values": [
                      "*",
                      "t1.micro",
                      "t2.nano",
                      "t2.micro",
                      "t2.small",
                      "t2.medium",
                      "t2.large",
                      "m1.small",
                      "m1.medium",
                      "m1.large",
                      "m1.xlarge",
                      "m2.xlarge",
                      "m2.2xlarge",
                      "m2.4xlarge",
                      "m3.medium",
                      "m3.large",
                      "m3.xlarge",
                      "m3.2xlarge",
                      "m4.large",
                      "m4.xlarge",
                      "m4.2xlarge",
                      "m4.4xlarge",
                      "m4.10xlarge",
                      "m4.16xlarge",
                      "c1.medium",
                      "c1.xlarge",
                      "cr1.8xlarge",
                      "c3.large",
                      "c3.xlarge",
                      "c3.2xlarge",
                      "c3.4xlarge",
                      "c3.8xlarge",
                      "c4.large",
                      "c4.xlarge",
                      "c4.2xlarge",
                      "c4.4xlarge",
                      "c4.8xlarge",
                      "cc1.4xlarge",
                      "cc2.8xlarge",
                      "cg1.4xlarge",
                      "d2.xlarge",
                      "d2.2xlarge",
                      "d2.4xlarge",
                      "d2.8xlarge",
                      "g2.2xlarge",
                      "g2.8xlarge",
                      "hi1.4xlarge",
                      "hs1.8xlarge",
                      "i2.xlarge",
                      "i2.2xlarge",
                      "i2.4xlarge",
                      "i2.8xlarge",
                      "p2.xlarge",
                      "p2.8xlarge",
                      "p2.16xlarge",
                      "r3.large",
                      "r3.xlarge",
                      "r3.2xlarge",
                      "r3.4xlarge",
                      "r3.8xlarge",
                      "x1.32xlarge"
                    ]
                  },
                  "Market": {
                    "type": "String",
                    "required": false,
                    "description": "When launching instances as Spot Instances, the bid price in USD for each EC2 instance in the instance group.",
                    "allowed-values": [
                      "ON_DEMAND",
                      "SPOT"
                    ]
                  },
                  "Name": {
                    "type": "String",
                    "required": false,
                    "description": "A name for the instance group."
                  }
                }
              }
            }
          },
          "JobFlowRole": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "An AWS Identity and Access Management (IAM) role for an Amazon EMR cluster."
          },
          "LogUri": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::S3::Bucket",
            "description": "An S3 bucket location to which Amazon EMR writes logs files from a job flow."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "A name for the Amazon EMR cluster."
          },
          "ReleaseLabel": {
            "type": "String",
            "required": false,
            "description": "The Amazon EMR software release label. A release is a set of software applications and components that you can install and configure on an Amazon EMR cluster."
          },
          "SecurityConfiguration": {
            "type": "String",
            "required": false,
            "description": "The name of the security configuration applied to the cluster."
          },
          "ServiceRole": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The IAM role that Amazon EMR assumes to access AWS resources on your behalf. "
          },
          "VisibleToAllUsers": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the instances in the cluster are visible to all IAM users in the AWS account."
          },
          "CustomAmiId": {
            "type": "String",
            "required": false,
            "description": "A custom Amazon Linux AMI for the cluster (instead of an EMR-owned AMI)."
          },
          "EbsRootVolumeSize": {
            "type": "Number",
            "required": false,
            "description": "The size, in GiB, of the EBS root device volume of the Linux AMI that's used for each EC2 instance."
          },
          "ScaleDownBehavior": {
            "type": "String",
            "required": false,
            "description": "Indicates how individual EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized."
          },
          "KerberosAttributes": {
            "type": "Object",
            "required": false,
            "description": "Attributes for Kerberos configuration when Kerberos authentication is enabled using a security configuration.",
            "properties": {
              "ADDomainJoinPassword": {
                "type": "String",
                "required": false,
                "description": "The Active Directory password for ADDomainJoinUser."
              },
              "ADDomainJoinUser": {
                "type": "String",
                "required": false,
                "description": "Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges to join resources to the domain."
              },
              "CrossRealmTrustPrincipalPassword": {
                "type": "String",
                "required": false,
                "description": "Required only when establishing a cross-realm trust with a KDC in a different realm."
              },
              "KdcAdminPassword": {
                "type": "String",
                "required": true,
                "description": "The password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos principals, password policies, and keytabs for the cluster."
              },
              "Realm": {
                "type": "String",
                "required": true,
                "description": "The name of the Kerberos realm to which all nodes in a cluster belong."
              }
            }
          },
          "Steps": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The cluster (job flow) steps.",
            "properties": {
              "ActionOnFailure": {
                "type": "String",
                "required": false,
                "description": "The action to take when the cluster step fails."
              },
              "HadoopJarStep": {
                "type": "Object",
                "required": true,
                "description": "The JAR file used for the step.",
                "properties": {
                  "Args": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "description": "A list of command line arguments passed to the JAR file's main function when executed."
                  },
                  "Jar": {
                    "type": "String",
                    "required": true,
                    "description": "A path to a JAR file run during the step."
                  },
                  "MainClass": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the main class in the specified Java file."
                  },
                  "StepProperties": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "A list of Java properties that are set when the step runs. ",
                    "properties": {
                      "Key": {
                        "type": "String",
                        "required": false,
                        "description": "The unique identifier of a key value pair."
                      },
                      "Value": {
                        "type": "String",
                        "required": false,
                        "description": "The value part of the identified key."
                      }
                    }
                  }
                }
              },
              "Name": {
                "type": "String",
                "required": true,
                "description": "The name of the step."
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EMR::InstanceFleetConfig": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS::EMR::InstanceFleetConfig resource to configure a Spot Instance fleet for an Amazon EMR cluster.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS::EMR::InstanceFleetConfig resource to configure a Spot Instance fleet for an Amazon EMR cluster."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ClusterId": {
            "type": "String",
            "required": true,
            "description": "The ID of the target cluster."
          },
          "InstanceFleetType": {
            "type": "String",
            "required": true,
            "description": "The node type that the instance fleet hosts. Valid values are MASTER, CORE, and TASK."
          },
          "InstanceTypeConfigs": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The instance type configurations that define the EC2 instances in the instance fleet. Duplicates not allowed.",
            "properties": {
              "BidPrice": {
                "type": "String",
                "required": false,
                "description": "The bid price for each EC2 Spot Instance type as defined by InstanceType. BidPrice is expressed in USD."
              },
              "BidPriceAsPercentageOfOnDemandPrice": {
                "type": "Number",
                "required": false,
                "description": "The bid price, as a percentage of the On-Demand price, for each EC2 Spot Instance as defined by InstanceType."
              },
              "Configurations": {
                "type": "Json",
                "required": false,
                "description": "A configuration classification that applies when provisioning cluster instances."
              },
              "EbsConfiguration": {
                "type": "Object",
                "required": false,
                "description": "The configuration of Amazon Elastic Block Store (Amazon EBS) that is attached to each instance as defined by InstanceType.",
                "properties": {
                  "EbsBlockDeviceConfigs": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "A list of Amazon EBS volume specifications that are attached to an instance. Duplicates not allowed.",
                    "properties": {
                      "VolumeSpecification": {
                        "type": "Object",
                        "required": true,
                        "description": "Amazon EBS volume specifications, such as volume type, IOPS, and size (GiB), for the EBS volume attached to an EC2 instance in the fleet.",
                        "properties": {
                          "Iops": {
                            "type": "The number of I/O operations per second (IOPS) that the volume supports.",
                            "required": false,
                            "description": "The number of I/O operations per second (IOPS) that the volume supports."
                          },
                          "SizeInGB": {
                            "type": "Number",
                            "required": true,
                            "description": "The volume size, in gibibytes (GiB). For valid values, see VolumeSpecification in the Amazon EMR API Reference."
                          },
                          "VolumeType": {
                            "type": "String",
                            "required": true,
                            "description": "The volume type. For valid values, see VolumeSpecification in the Amazon EMR API Reference."
                          }
                        }
                      },
                      "VolumesPerInstance": {
                        "type": "Number",
                        "required": false,
                        "description": "The number of Amazon EBS volumes with a specific volume configuration that are associated with every instance in the fleet."
                      }
                    }
                  },
                  "EbsOptimized": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether an Amazon EBS volume is EBS-optimized."
                  }
                }
              },
              "InstanceType": {
                "type": "String",
                "required": true,
                "description": "An EC2 instance type, such as m3.xlarge. For constraints, see InstanceTypeConfig in the Amazon EMR API Reference."
              },
              "WeightedCapacity": {
                "type": "Number",
                "required": false,
                "description": "The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in InstanceFleetConfig."
              }
            }
          },
          "LaunchSpecifications": {
            "type": "Object",
            "required": false,
            "description": "The launch specification for the instance fleet.",
            "properties": {
              "SpotSpecification": {
                "type": "Object",
                "required": true,
                "description": "The launch specification for Spot Instances in the fleet. This determines the defined duration and provisioning timeout behavior.",
                "properties": {
                  "BlockDurationMinutes": {
                    "type": "Number",
                    "required": false,
                    "description": "The defined duration for Spot Instances (also known as Spot blocks) in minutes."
                  },
                  "TimeoutAction": {
                    "type": "String",
                    "required": true,
                    "description": "The action to take when the capacity for the target Spot Instance, as specified in TargetSpotCapacity, has not been fulfilled before the time specified in TimeoutDurationMinutes has expired."
                  },
                  "TimeoutDurationMinutes": {
                    "type": "Number",
                    "required": true,
                    "description": "The timeout period for spot provisioning, in minutes."
                  }
                }
              }
            }
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "The friendly name of the instance fleet."
          },
          "TargetOnDemandCapacity": {
            "type": "Number",
            "required": false,
            "description": "The target capacity of On-Demand units for the instance fleet."
          },
          "TargetSpotCapacity": {
            "type": "Number",
            "required": false,
            "description": "The target capacity of Spot units for the instance fleet. "
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EMR::InstanceGroupConfig": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EMR::InstanceGroupConfig resource configures a task instance group for an Amazon Elastic MapReduce (Amazon EMR) cluster.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EMR::InstanceGroupConfig resource configures a task instance group for an Amazon Elastic MapReduce (Amazon EMR) cluster."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "BidPrice": {
            "type": "String",
            "required": false,
            "description": "When launching instances as Spot Instances, the bid price in USD for each EC2 instance in the instance group."
          },
          "Configurations": {
            "type": "Array",
            "array-type": "Json",
            "required": false,
            "description": "A list of configurations to apply to this instance group."
          },
          "EbsConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Configures Amazon Elastic Block Store (Amazon EBS) storage volumes to attach to your instances.",
            "properties": {
              "EbsBlockDeviceConfig": {
                "type": "Object",
                "required": false,
                "description": "Configures the block storage devices that are associated with your EMR instances.",
                "properties": {
                  "VolumeSpecification": {
                    "type": "Object",
                    "required": false,
                    "description": "The settings for the Amazon EBS volumes.",
                    "properties": {
                      "Iops": {
                        "type": "Number",
                        "required": false,
                        "description": "The number of I/O operations per second (IOPS) that the volume supports. For more information, see Iops for the EbsBlockDevice action in the Amazon EC2 API Reference."
                      },
                      "SizeInGB": {
                        "type": "Number",
                        "required": true,
                        "description": "The volume size, in Gibibytes (GiB)."
                      },
                      "VolumeType": {
                        "type": "Number",
                        "required": true,
                        "allowed-values": [
                          "*",
                          "standard",
                          "io1",
                          "gp2"
                        ],
                        "description": "The volume type, such as standard or io1."
                      }
                    }
                  },
                  "VolumesPerInstance": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of Amazon EBS volumes that you want to create for each instance in the EMR cluster or instance group."
                  }
                }
              },
              "EbsOptimized": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether the instances are optimized for Amazon EBS I/O."
              },
              "EbsBlockDeviceConfigs": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "Configures the block storage devices that are associated with your EMR instances.",
                "properties": {
                  "VolumeSpecification": {
                    "type": "Object",
                    "required": true,
                    "description": "The settings for the Amazon EBS volumes.",
                    "properties": {
                      "Iops": {
                        "type": "Number",
                        "required": false,
                        "description": "The number of I/O operations per second (IOPS) that the volume supports."
                      },
                      "SizeInGB": {
                        "type": "Number",
                        "required": true,
                        "description": "The volume size, in Gibibytes (GiB). "
                      },
                      "VolumeType": {
                        "type": "String",
                        "required": true,
                        "description": "The volume type, such as standard or io1.",
                        "allowed-values": [
                          "*",
                          "standard",
                          "io1",
                          "gp2",
                          "sc1",
                          "st1"
                        ]
                      }
                    }
                  },
                  "VolumesPerInstance": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of Amazon EBS volumes that you want to create for each instance in the EMR cluster or instance group. The number cannot be 0."
                  }
                }
              }
            }
          },
          "InstanceCount": {
            "type": "Number",
            "required": true,
            "description": "The number of instances to launch in the instance group."
          },
          "InstanceType": {
            "type": "String",
            "required": true,
            "description": "The EC2 instance type for all instances in the instance group.",
            "allowed-values": [
              "*",
              "t1.micro",
              "t2.nano",
              "t2.micro",
              "t2.small",
              "t2.medium",
              "t2.large",
              "m1.small",
              "m1.medium",
              "m1.large",
              "m1.xlarge",
              "m2.xlarge",
              "m2.2xlarge",
              "m2.4xlarge",
              "m3.medium",
              "m3.large",
              "m3.xlarge",
              "m3.2xlarge",
              "m4.large",
              "m4.xlarge",
              "m4.2xlarge",
              "m4.4xlarge",
              "m4.10xlarge",
              "m4.16xlarge",
              "c1.medium",
              "c1.xlarge",
              "cr1.8xlarge",
              "c3.large",
              "c3.xlarge",
              "c3.2xlarge",
              "c3.4xlarge",
              "c3.8xlarge",
              "c4.large",
              "c4.xlarge",
              "c4.2xlarge",
              "c4.4xlarge",
              "c4.8xlarge",
              "cc1.4xlarge",
              "cc2.8xlarge",
              "cg1.4xlarge",
              "d2.xlarge",
              "d2.2xlarge",
              "d2.4xlarge",
              "d2.8xlarge",
              "g2.2xlarge",
              "g2.8xlarge",
              "hi1.4xlarge",
              "hs1.8xlarge",
              "i2.xlarge",
              "i2.2xlarge",
              "i2.4xlarge",
              "i2.8xlarge",
              "p2.xlarge",
              "p2.8xlarge",
              "p2.16xlarge",
              "r3.large",
              "r3.xlarge",
              "r3.2xlarge",
              "r3.4xlarge",
              "r3.8xlarge",
              "x1.32xlarge"
            ]
          },
          "Market": {
            "type": "String",
            "required": false,
            "description": "When launching instances as Spot Instances, the bid price in USD for each EC2 instance in the instance group.",
            "allowed-values": [
              "ON_DEMAND",
              "SPOT"
            ]
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "A name for the instance group."
          },
          "AutoScalingPolicy": {
            "type": "Object",
            "required": false,
            "description": "An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster.",
            "properties": {
              "Constraints": {
                "type": "Object",
                "required": true,
                "description": "The upper and lower Amazon EC2 instance limits for an automatic scaling policy.",
                "properties": {
                  "MaxCapacity": {
                    "type": "Number",
                    "required": true,
                    "description": "For autoscaling, the maximum number of EC2 instances in an instance group."
                  },
                  "MinCapacity": {
                    "type": "Number",
                    "required": true,
                    "description": "For autoscaling, the minimum number of EC2 instances in an instance group."
                  }
                }
              },
              "Rules": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "The scale-in and scale-out rules that compose the automatic scaling policy.",
                "properties": {
                  "Action": {
                    "type": "Object",
                    "required": true,
                    "description": "The conditions that trigger an automatic scaling activity.",
                    "properties": {
                      "Market": {
                        "type": "String",
                        "required": false,
                        "description": "Not available for instance groups. Instance groups use the market type specified for the group.",
                        "allowed-values": [
                          "*",
                          "ON_DEMAND",
                          "SPOT"
                        ]
                      },
                      "SimpleScalingPolicyConfiguration": {
                        "type": "Object",
                        "required": true,
                        "description": "The type of adjustment that the automatic scaling activity makes when triggered, and the periodicity of the adjustment.",
                        "properties": {
                          "AdjustmentType": {
                            "type": "String",
                            "required": false,
                            "description": "The way in which EC2 instances are added (if ScalingAdjustment is a positive number) or terminated (if ScalingAdjustment is a negative number) when the scaling activity is triggered. CHANGE_IN_CAPACITY is the default value.",
                            "allowed-values": [
                              "*",
                              "CHANGE_IN_CAPACITY",
                              "PERCENT_CHANGE_IN_CAPACITY",
                              "EXACT_CAPACITY"
                            ]
                          },
                          "CoolDown": {
                            "type": "Number",
                            "required": false,
                            "description": "The amount of time, in seconds, after a scaling activity completes before any further trigger-related scaling activities can start. The default value is 0."
                          },
                          "ScalingAdjustment": {
                            "type": "Number",
                            "required": true,
                            "description": "The amount by which to scale the instance group, based on the specified AdjustmentType."
                          }
                        }
                      }
                    }
                  },
                  "Description": {
                    "type": "String",
                    "required": false,
                    "description": "A friendly, more verbose description of the automatic scaling rule."
                  },
                  "Name": {
                    "type": "String",
                    "required": true,
                    "description": "The identifier of the automatic scaling rule. Rule names must be unique within a scaling policy."
                  },
                  "Trigger": {
                    "type": "Object",
                    "required": true,
                    "description": "The CloudWatch alarm definition that determines when automatic scaling activity is triggered.",
                    "properties": {
                      "CloudWatchAlarmDefinition": {
                        "type": "Object",
                        "required": true,
                        "description": "The definition of a CloudWatch metric alarm. When the defined alarm conditions are met along with other trigger parameters, scaling activity begins.",
                        "properties": {
                          "ComparisonOperator": {
                            "type": "String",
                            "required": true,
                            "description": "Determines how the metric specified by MetricName is compared to the value specified by Threshold.",
                            "allowed-values": [
                              "*",
                              "GREATER_THAN_OR_EQUAL",
                              "GREATER_THAN, LESS_THAN",
                              "LESS_THAN_OR_EQUAL"
                            ]
                          },
                          "Dimensions": {
                            "type": "Array",
                            "array-type": "Object",
                            "required": false,
                            "description": "A list of CloudWatch metric dimensions.",
                            "properties": {
                              "Key": {
                                "type": "String",
                                "required": true,
                                "description": "The dimension name."
                              },
                              "Value": {
                                "type": "String",
                                "required": true,
                                "description": "The dimension value."
                              }
                            }
                          },
                          "EvaluationPeriods": {
                            "type": "Number",
                            "required": false,
                            "description": "The number of periods, expressed in seconds using the Period property, during which the alarm condition must exist before the alarm triggers automatic scaling activity. The default value is 1."
                          },
                          "MetricName": {
                            "type": "String",
                            "required": true,
                            "description": "The name of the CloudWatch metric that is watched to determine an alarm condition."
                          },
                          "Namespace": {
                            "type": "String",
                            "required": false,
                            "description": "The namespace for the CloudWatch metric. The default is AWS/ElasticMapReduce."
                          },
                          "Period": {
                            "type": "Number",
                            "required": true,
                            "description": "The period, in seconds, over which the statistic for applying the metric associated with the alarm is applied."
                          },
                          "Statistic": {
                            "type": "String",
                            "required": false,
                            "description": "The statistic to apply to the metric associated with the alarm. The default is AVERAGE.",
                            "allowed-values": [
                              "*",
                              "SAMPLE_COUNT",
                              "AVERAGE",
                              "SUM",
                              "MINIMUM",
                              "MAXIMUM"
                            ]
                          },
                          "Threshold": {
                            "type": "Number",
                            "required": true,
                            "description": "The value against which the specified statistic is compared."
                          },
                          "Unit": {
                            "type": "String",
                            "required": false,
                            "description": "The unit of measure associated with the CloudWatch metric being watched."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "InstanceRole": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The role of the servers in the Amazon EMR cluster, such as TASK."
          },
          "JobFlowId": {
            "type": "String",
            "required": true,
            "description": "The ID of an Amazon EMR cluster that you want to associate this instance group with."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EMR::SecurityConfiguration": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EMR::SecurityConfiguration resource creates a security configuration that is stored in the Amazon EMR web service.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EMR::SecurityConfiguration resource creates a security configuration that is stored in the Amazon EMR web service."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Name": {
            "type": "String",
            "required": false,
            "description": "The name of the security configuration."
          },
          "SecurityConfiguration": {
            "type": "Json",
            "required": true,
            "description": "The security configuration details in JSON format."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EMR::Step": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EMR::Step resource creates a unit of work (a job flow step) that you submit to an Amazon Elastic MapReduce (Amazon EMR) cluster. ",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EMR::Step resource creates a unit of work (a job flow step) that you submit to an Amazon Elastic MapReduce (Amazon EMR) cluster. "
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ActionOnFailure": {
            "type": "String",
            "required": true,
            "description": "The action to take if the job flow step fails.",
            "allowed-values": [
              "*",
              "CONTINUE",
              "CONTINUE_AND_WAIT"
            ]
          },
          "HadoopJarStep": {
            "type": "Object",
            "required": true,
            "description": "The JAR file that includes the main function that Amazon EMR executes.",
            "properties": {
              "Args": {
                "type": "String",
                "required": false,
                "description": "A list of command line arguments passed to the JAR file's main function when the function is executed."
              },
              "Jar": {
                "type": "String",
                "required": true,
                "description": "A path to the JAR file that Amazon EMR runs for the job flow step."
              },
              "MainClass": {
                "type": "String",
                "required": false,
                "description": "The name of the main class in the specified JAR file. If you don't specify a value, you must specify a main class in the JAR file's manifest file."
              },
              "StepProperties": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "A list of Java properties that are set when the job flow step runs.",
                "properties": {
                  "Key": {
                    "type": "String",
                    "required": true,
                    "description": "The unique identifier of a key-value pair."
                  },
                  "Value": {
                    "type": "String",
                    "required": false,
                    "description": "The value part of the identified key."
                  }
                }
              }
            }
          },
          "JobFlowId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::EMR::Cluster",
            "description": "The ID of a cluster in which you want to run this job flow step."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "A name for the job flow step."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Events::EventBusPolicy": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Events::EventBusPolicy resource creates an event bus policy for Amazon CloudWatch Events.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Events::EventBusPolicy resource creates an event bus policy for Amazon CloudWatch Events."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Condition": {
            "type": "Object",
            "required": false,
            "description": "A JSON string which you can use to limit the event bus permissions you are granting to only accounts that fulfill the condition.",
            "properties": {
              "Type": {
                "type": "String",
                "required": false,
                "description": "The type of condition like StringEquals",
                "allowed-values": [
                  "*",
                  "StringEquals"
                ]
              },
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the condition check"
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key to check like aws:PrincipalOrgID",
                "allowed-values": [
                  "*",
                  "aws:PrincipalOrgID"
                ]
              }
            }
          },
          "Action": {
            "type": "String",
            "required": true,
            "description": "The action that you are enabling the other account to perform."
          },
          "StatementId": {
            "type": "String",
            "required": true,
            "description": "An identifier string for the external account to which you are granting permissions."
          },
          "Principal": {
            "type": "String",
            "required": true,
            "description": "The 12-digit AWS account ID that you are permitting to put events to your default event bus. "
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Events::Rule": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Events::Rule resource creates a rule that matches incoming Amazon CloudWatch Events (CloudWatch Events) events and routes them to one or more targets for processing.",
    "return-values": [
      {
        "name": "Arn",
        "description": "The event rule Amazon Resource Name (ARN), such as arn:aws:events:us-east-1:123456789012:rule/example."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Events::Rule resource creates a rule that matches incoming Amazon CloudWatch Events (CloudWatch Events) events and routes them to one or more targets for processing."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the rule's purpose."
          },
          "EventPattern": {
            "type": "Json",
            "required": false,
            "description": "Describes which events CloudWatch Events routes to the specified target. These routed events are matched events."
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "A name for the rule. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the rule name."
          },
          "RoleArn": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants CloudWatch Events permission to make calls to target services, such as AWS Lambda (Lambda) or Amazon Kinesis streams."
          },
          "ScheduleExpression": {
            "type": "String",
            "required": false,
            "description": "The schedule or rate (frequency) that determines when CloudWatch Events runs the rule."
          },
          "State": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "ENABLED",
              "DISABLED"
            ],
            "description": "Indicates whether the rule is enabled."
          },
          "Targets": {
            "type": "Object",
            "required": false,
            "description": "The resources, such as Lambda functions or Amazon Kinesis streams, that CloudWatch Events routes events to and invokes when the rule is triggered.",
            "properties": {
              "Arn": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "The Amazon Resource Name (ARN) of the target."
              },
              "Id": {
                "type": "String",
                "required": true,
                "description": "A unique identifier for the target."
              },
              "Input": {
                "type": "Json",
                "required": false,
                "description": "A JSON-formatted text string that is passed to the target. This value overrides the matched event."
              },
              "InputPath": {
                "type": "String",
                "required": false,
                "description": "When you don't want to pass the entire matched event, the JSONPath that describes which part of the event to pass to the target."
              },
              "EcsParameters": {
                "type": "Object",
                "required": false,
                "description": "The Amazon ECS task definition and task count to use, if the event target is an Amazon ECS task.",
                "properties": {
                  "TaskCount": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of tasks to create based on the task definition. The default is 1."
                  },
                  "TaskDefinitionArn": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::ECS::TaskDefinition",
                    "description": "The Amazon Resource Name (ARN) of the task definition to use."
                  }
                }
              },
              "InputTransformer": {
                "type": "Object",
                "required": false,
                "description": "Settings that provide custom input to a target based on certain event data.",
                "properties": {
                  "InputPathsMap": {
                    "type": "Json",
                    "required": false,
                    "description": "The map of JSON paths to extract from the event, as key-value pairs where each value is a JSON path. You must use JSON dot notation, not bracket notation."
                  },
                  "InputTemplate": {
                    "type": "String",
                    "required": true,
                    "description": "The input template where you can use the values of the keys from InputPathsMap to customize the data that's sent to the target."
                  }
                }
              },
              "KinesisParameters": {
                "type": "Object",
                "required": false,
                "description": "Settings that control shard assignment, when the target is a Kinesis stream. If you don't include this parameter, eventId is used as the partition key.",
                "properties": {
                  "PartitionKeyPath": {
                    "type": "String",
                    "required": true,
                    "description": "The JSON path to extract from the event and use as the partition key."
                  }
                }
              },
              "RoleArn": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::IAM::Role",
                "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role to use for this target when the rule is triggered."
              },
              "RunCommandParameters": {
                "type": "Object",
                "required": false,
                "description": "Parameters used when the rule invokes Amazon EC2 Systems Manager Run Command.",
                "properties": {
                  "RunCommandTargets": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": true,
                    "description": "The criteria (either InstanceIds or a tag) that specifies which EC2 instances that the command is sent to.",
                    "properties": {
                      "Key": {
                        "type": "String",
                        "required": true,
                        "description": "The key, either tag: tag-key or InstanceIds."
                      },
                      "Values": {
                        "type": "Array",
                        "array-type": "String",
                        "required": true,
                        "description": "A list of tag values or EC2 instance IDs."
                      }
                    }
                  }
                }
              },
              "SqsParameters": {
                "type": "Object",
                "required": false,
                "description": "Contains the message group ID to use when the target is a FIFO queue.",
                "properties": {
                  "MessageGroupId": {
                    "type": "String",
                    "required": true,
                    "description": "The FIFO message group ID to use as the target."
                  }
                }
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::GameLift::Alias": {
    "type": "Object",
    "required": false,
    "description": "The AWS::GameLift::Alias resource creates an alias for an Amazon GameLift (GameLift) fleet, which you can use to anonymize your fleet.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::GameLift::Alias resource creates an alias for an Amazon GameLift (GameLift) fleet, which you can use to anonymize your fleet."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "Information that helps you identify the purpose of this alias."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "An identifier to associate with this alias. Alias names don't need to be unique."
          },
          "RoutingStrategy": {
            "type": "Object",
            "required": false,
            "description": "A routing configuration that specifies where traffic is directed for this alias, such as to a fleet or to a message.",
            "properties": {
              "FleetId": {
                "type": "String",
                "required": false,
                "description": "A unique identifier of a GameLift fleet to associate with the alias."
              },
              "Message": {
                "type": "String",
                "required": false,
                "description": "A text message that GameLift displays for the Terminal routing type."
              },
              "Type": {
                "type": "String",
                "required": true,
                "description": "The type of routing strategy. For the SIMPLE type, traffic is routed to an active GameLift fleet. For the Terminal type, GameLift returns an exception with the message that you specified in the Message property.",
                "allowed-values": [
                  "*",
                  "SIMPLE",
                  "TERMINAL"
                ]
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::GameLift::Build": {
    "type": "Object",
    "required": false,
    "description": "The AWS::GameLift::Build resource creates a build that includes all of the components to run your game server in an Amazon GameLift (GameLift) fleet.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::GameLift::Build resource creates a build that includes all of the components to run your game server in an Amazon GameLift (GameLift) fleet."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Name": {
            "type": "String",
            "required": false,
            "description": "An identifier to associate with this build. Build names don't need to be unique."
          },
          "StorageLocation": {
            "type": "Object",
            "required": false,
            "description": "The Amazon Simple Storage Service (Amazon S3) location where your build package files are located.",
            "properties": {
              "Bucket": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::S3::Bucket",
                "description": "The S3 bucket where the GameLift build package files are stored."
              },
              "Key": {
                "type": "String",
                "required": true,
                "description": "The prefix (folder name) where the GameLift build package files are located."
              },
              "RoleArn": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::IAM::Role",
                "description": "An AWS Identity and Access Management (IAM) role Amazon Resource Name (ARN) that GameLift can assume to retrieve the build package files from Amazon Simple Storage Service (Amazon S3)."
              }
            }
          },
          "Version": {
            "type": "String",
            "required": false,
            "description": "A version to associate with this build. Version is useful if you want to track updates to your build package files. Versions don't need to be unique."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::GameLift::Fleet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::GameLift::Fleet resource creates an Amazon GameLift (GameLift) fleet to host game servers.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::GameLift::Fleet resource creates an Amazon GameLift (GameLift) fleet to host game servers."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "BuildId": {
            "type": "String",
            "required": true,
            "description": "The unique identifier for the build that you want to use with this fleet."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "Information that helps you identify the purpose of this fleet."
          },
          "DesiredEC2Instances": {
            "type": "Number",
            "required": true,
            "description": "The number of EC2 instances that you want in this fleet."
          },
          "EC2InboundPermissions": {
            "type": "Object",
            "required": true,
            "description": "The incoming traffic, expressed as IP ranges and port numbers, that is permitted to access the game server.",
            "properties": {
              "FromPort": {
                "type": "Number",
                "required": true,
                "description": "The starting value for a range of allowed port numbers. This value must be lower than the ToPort value."
              },
              "IpRange": {
                "type": "String",
                "required": true,
                "description": "The range of allowed IP addresses in CIDR notation."
              },
              "Protocol": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "*",
                  "tcp",
                  "udp",
                  "icmp"
                ],
                "description": "The network communication protocol that is used by the fleet."
              },
              "ToPort": {
                "type": "Number",
                "required": true,
                "description": "The ending value for a range of allowed port numbers. This value must be higher than the FromPort value."
              }
            }
          },
          "EC2InstanceType": {
            "type": "String",
            "required": true,
            "description": "The type of EC2 instances that the fleet uses. EC2 instance types define the CPU, memory, storage, and networking capacity of the fleet's hosts.",
            "allowed-values": [
              "*",
              "t1.micro",
              "t2.nano",
              "t2.micro",
              "t2.small",
              "t2.medium",
              "t2.large",
              "m1.small",
              "m1.medium",
              "m1.large",
              "m1.xlarge",
              "m2.xlarge",
              "m2.2xlarge",
              "m2.4xlarge",
              "m3.medium",
              "m3.large",
              "m3.xlarge",
              "m3.2xlarge",
              "m4.large",
              "m4.xlarge",
              "m4.2xlarge",
              "m4.4xlarge",
              "m4.10xlarge",
              "m4.16xlarge",
              "c1.medium",
              "c1.xlarge",
              "cr1.8xlarge",
              "c3.large",
              "c3.xlarge",
              "c3.2xlarge",
              "c3.4xlarge",
              "c3.8xlarge",
              "c4.large",
              "c4.xlarge",
              "c4.2xlarge",
              "c4.4xlarge",
              "c4.8xlarge",
              "cc1.4xlarge",
              "cc2.8xlarge",
              "cg1.4xlarge",
              "d2.xlarge",
              "d2.2xlarge",
              "d2.4xlarge",
              "d2.8xlarge",
              "g2.2xlarge",
              "g2.8xlarge",
              "hi1.4xlarge",
              "hs1.8xlarge",
              "i2.xlarge",
              "i2.2xlarge",
              "i2.4xlarge",
              "i2.8xlarge",
              "p2.xlarge",
              "p2.8xlarge",
              "p2.16xlarge",
              "r3.large",
              "r3.xlarge",
              "r3.2xlarge",
              "r3.4xlarge",
              "r3.8xlarge",
              "x1.32xlarge"
            ]
          },
          "LogPaths": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The path to game-session log files that are generated by your game server, with the slashes (\\) escaped. After a game session has been terminated, GameLift captures and stores the logs in an S3 bucket."
          },
          "MaxSize": {
            "type": "Number",
            "required": false,
            "description": "The maximum number of EC2 instances that you want to allow in this fleet. By default, AWS CloudFormation, sets this property to 1."
          },
          "MinSize": {
            "type": "Number",
            "required": false,
            "description": "The minimum number of EC2 instances that you want to allow in this fleet. By default, AWS CloudFormation, sets this property to 0."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "An identifier to associate with this fleet. Fleet names don't need to be unique."
          },
          "ServerLaunchParameters": {
            "type": "String",
            "required": false,
            "description": "The parameters that are required to launch your game server. Specify these parameters as a string of command-line parameters, such as +sv_port 33435 +start_lobby."
          },
          "ServerLaunchPath": {
            "type": "String",
            "required": true,
            "description": "The location of your game server that GameLift launches."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Glue::Classifier": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Glue::Classifier resource creates an AWS Glue classifier that categorizes data sources and specifies schemas.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Glue::Classifier resource creates an AWS Glue classifier that categorizes data sources and specifies schemas."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "GrokClassifier": {
            "type": "Object",
            "required": false,
            "description": "A classifier that uses grok.",
            "properties": {
              "CustomPatterns": {
                "type": "String",
                "required": false,
                "description": "Custom grok patterns that are used by this classifier."
              },
              "GrokPattern": {
                "type": "String",
                "required": true,
                "description": "The grok pattern that's used by this classifier."
              },
              "Classification": {
                "type": "String",
                "required": true,
                "description": "The data form that the classifier matches�such as Twitter, JSON, or Omniture logs."
              },
              "Name": {
                "type": "String",
                "required": false,
                "description": "The name of the classifier."
              }
            }
          },
          "XMLClassifier": {
            "type": "Object",
            "required": false,
            "description": "The XML tag designating the element that contains each record in an XML document being parsed. ",
            "properties": {
              "RowTag": {
                "type": "String",
                "required": true,
                "description": "The XML tag designating the element that contains each record in an XML document being parsed."
              },
              "Classification": {
                "type": "String",
                "required": true,
                "description": "An identifier of the data format that the classifier matches."
              },
              "Name": {
                "type": "String",
                "required": false,
                "description": "The name of the classifier."
              }
            }
          },
          "JsonClassifier": {
            "type": "Object",
            "required": false,
            "description": "A classifier for JSON content.",
            "properties": {
              "JsonPath": {
                "type": "String",
                "required": true,
                "description": "A JsonPath string defining the JSON data for the classifier to classify."
              },
              "Name": {
                "type": "String",
                "required": false,
                "description": "The name of the classifier."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Glue::Connection": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Glue::Connection resource specifies an AWS Glue connection to a data source.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Glue::Connection resource specifies an AWS Glue connection to a data source."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ConnectionInput": {
            "type": "Object",
            "required": true,
            "description": "The connection that you want to create.",
            "properties": {
              "Description": {
                "type": "String",
                "required": false,
                "description": "The description of the connection."
              },
              "ConnectionType": {
                "type": "String",
                "required": true,
                "description": "The type of the connection.",
                "allowed-values": [
                  "*",
                  "JDBC",
                  "SFTP"
                ]
              },
              "MatchCriteria": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "A list of UTF-8 strings that specify the criteria that you can use in selecting this connection."
              },
              "PhysicalConnectionRequirements": {
                "type": "Object",
                "required": false,
                "description": "A map of physical connection requirements that are needed to make the connection, such as VPC and SecurityGroup.",
                "properties": {
                  "AvailabilityZone": {
                    "type": "String",
                    "required": false,
                    "description": "The connection's Availability Zone."
                  },
                  "SecurityGroupIdList": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::EC2::SecurityGroup",
                    "description": "A list of UTF-8 strings that specify the security group IDs that are used by the connection."
                  },
                  "SubnetId": {
                    "type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::EC2::Subnet",
                    "description": "The subnet ID that's used by the connection."
                  }
                }
              },
              "ConnectionProperties": {
                "type": "Json",
                "required": true,
                "description": "UTF-8 string�to�UTF-8 string key-value pairs that specify the parameters for this connection."
              },
              "Name": {
                "type": "String",
                "required": false,
                "description": "The name of the connection."
              }
            }
          },
          "CatalogId": {
            "type": "String",
            "required": true,
            "description": "The ID of the data catalog to create the catalog object in."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Glue::Crawler": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Glue::Crawler resource specifies an AWS Glue crawler.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Glue::Crawler resource specifies an AWS Glue crawler."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Role": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources, such as Amazon S3 data."
          },
          "Classifiers": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "A list of UTF-8 strings that specify the custom classifiers that are associated with the crawler."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the crawler and where it should be used."
          },
          "SchemaChangePolicy": {
            "type": "Object",
            "required": false,
            "description": "The policy that specifies update and delete behaviors for the crawler.",
            "properties": {
              "UpdateBehavior": {
                "type": "String",
                "required": false,
                "description": "The update behavior.",
                "allowed-values": [
                  "*",
                  "LOG",
                  "UPDATE_IN_DATABASE"
                ]
              },
              "DeleteBehavior": {
                "type": "String",
                "required": false,
                "description": "The deletion behavior",
                "allowed-values": [
                  "*",
                  "LOG",
                  "DELETE_FROM_DATABASE",
                  "DEPRECATE_IN_DATABASE"
                ]
              }
            }
          },
          "Schedule": {
            "type": "Object",
            "required": false,
            "description": "The schedule for the crawler.",
            "properties": {
              "ScheduleExpression": {
                "type": "String",
                "required": false,
                "description": "A cron expression that you can use as an Amazon CloudWatch Events event to schedule something."
              }
            }
          },
          "DatabaseName": {
            "type": "String",
            "required": true,
            "description": "The name of the database where the crawler's output is stored."
          },
          "Targets": {
            "type": "Object",
            "required": true,
            "description": "The crawler targets.",
            "properties": {
              "S3Targets": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "The Amazon S3 crawler targets.",
                "properties": {
                  "Path": {
                    "type": "String",
                    "required": false,
                    "description": "The path to the Amazon S3 target."
                  },
                  "Exclusions": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "description": "A list of UTF-8 strings that specify the Amazon S3 objects to exclude from the crawl."
                  }
                }
              },
              "JdbcTargets": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "The JDBC crawler targets.",
                "properties": {
                  "ConnectionName": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the connection to use for the JDBC target."
                  },
                  "Path": {
                    "type": "String",
                    "required": false,
                    "description": "The path of the JDBC target."
                  },
                  "Exclusions": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "description": "A list of UTF-8 strings that specify the items to exclude from the crawl."
                  }
                }
              }
            }
          },
          "TablePrefix": {
            "type": "String",
            "required": false,
            "description": "The table prefix that's used for catalog tables that are created."
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "The name of the crawler."
          },
          "Configuration": {
            "type": "String",
            "required": false,
            "description": "Crawler configuration information."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Glue::Database": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Glue::Database resource specifies a logical grouping of tables in AWS Glue.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Glue::Database resource specifies a logical grouping of tables in AWS Glue."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DatabaseInput": {
            "type": "Object",
            "required": true,
            "description": "The metadata of the database.",
            "properties": {
              "LocationUri": {
                "type": "String",
                "required": false,
                "description": "The location of the database (for example, an HDFS path)."
              },
              "Description": {
                "type": "String",
                "required": false,
                "description": "The description of the database."
              },
              "Parameters": {
                "type": "Json",
                "required": false,
                "description": "UTF-8 string�to�UTF-8 string key-value pairs that specify the properties that are associated with the database."
              },
              "Name": {
                "type": "String",
                "required": false,
                "description": "The name of the database."
              }
            }
          },
          "CatalogId": {
            "type": "String",
            "required": true,
            "description": "The ID of the data catalog to create the catalog object in. Currently, this should be the AWS account ID."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Glue::DevEndpoint": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Glue::DevEndpoint resource specifies a development endpoint where a developer can remotely debug ETL scripts for AWS Glue.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Glue::DevEndpoint resource specifies a development endpoint where a developer can remotely debug ETL scripts for AWS Glue."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ExtraJarsS3Path": {
            "type": "String",
            "required": false,
            "description": "The path to one or more Java Jars in an Amazon S3 bucket to load in your endpoint."
          },
          "EndpointName": {
            "type": "String",
            "required": false,
            "description": "The name of the endpoint."
          },
          "PublicKey": {
            "type": "String",
            "required": true,
            "description": "The public key for the endpoint to use for authentication."
          },
          "NumberOfNodes": {
            "type": "Number",
            "required": false,
            "description": "The number of nodes that the endpoint uses."
          },
          "SubnetId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::Subnet",
            "description": "The subnet ID for the endpoint."
          },
          "ExtraPythonLibsS3Path": {
            "type": "String",
            "required": false,
            "description": "The path to one or more Python libraries in an Amazon S3 bucket to load in your endpoint."
          },
          "SecurityGroupIds": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "description": "A list of UTF-8 strings that specify the security group IDs for the endpoint."
          },
          "RoleArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The Amazon Resource Name (ARN) of the IAM role for the endpoint."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Glue::Job": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Glue::Job resource specifies an AWS Glue job in the data catalog.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Glue::Job resource specifies an AWS Glue job in the data catalog."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Role": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The role that's associated with the job."
          },
          "DefaultArguments": {
            "type": "Json",
            "required": false,
            "description": "UTF-8 string�to�UTF-8 string key-value pairs that specify the default parameters for the job."
          },
          "Connections": {
            "type": "Object",
            "required": false,
            "description": "The connections that are used by the job.",
            "properties": {
              "Connections": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "A list of UTF-8 strings that specifies the connections that are used by the job."
              }
            }
          },
          "MaxRetries": {
            "type": "Number",
            "required": false,
            "description": "The maximum number of times to retry this job if it fails."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "The description of the job."
          },
          "LogUri": {
            "type": "String",
            "required": false,
            "description": "The location of the logs for the job."
          },
          "Command": {
            "type": "Object",
            "required": true,
            "description": "The code that executes a job.",
            "properties": {
              "ScriptLocation": {
                "type": "String",
                "required": false,
                "description": "The location of a script that executes a job."
              },
              "Name": {
                "type": "String",
                "required": false,
                "description": "The name of the job command."
              }
            }
          },
          "AllocatedCapacity": {
            "type": "Number",
            "required": false,
            "description": "The number of capacity units that are allocated to this job."
          },
          "ExecutionProperty": {
            "type": "Object",
            "required": false,
            "description": "The execution property of the job, which specifies the maximum number of concurrent runs that are allowed for the job.",
            "properties": {
              "MaxConcurrentRuns": {
                "type": "Number",
                "required": false,
                "description": "The maximum number of concurrent runs that are allowed for the job."
              }
            }
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "The name of the job."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Glue::Partition": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Glue::Partition resource creates an AWS Glue partition, which represents a slice of table data.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Glue::Partition resource creates an AWS Glue partition, which represents a slice of table data."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "TableName": {
            "type": "String",
            "required": true,
            "description": "The name of the metadata table to create the partition in."
          },
          "DatabaseName": {
            "type": "String",
            "required": true,
            "description": "The name of the catalog database to create the partition in."
          },
          "CatalogId": {
            "type": "String",
            "required": true,
            "description": "The ID of the data catalog to create the catalog object in."
          },
          "PartitionInput": {
            "type": "Object",
            "required": true,
            "description": "The metadata of the partition.",
            "properties": {
              "Parameters": {
                "type": "Json",
                "required": false,
                "description": "UTF-8 string�to�UTF-8 string key-value pairs that specify the parameters for the partition."
              },
              "StorageDescriptor": {
                "type": "Object",
                "required": false,
                "description": "Information about the physical storage of the partition.",
                "properties": {
                  "StoredAsSubDirectories": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether the partition data is stored in subdirectories."
                  },
                  "Parameters": {
                    "type": "Json",
                    "required": false,
                    "description": "UTF-8 string�to�UTF-8 string key-value pairs that specify user-supplied properties."
                  },
                  "BucketColumns": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "description": "A list of UTF-8 strings that specify reducer grouping columns, clustering columns, and bucketing columns in the partition."
                  },
                  "SkewedInfo": {
                    "type": "Object",
                    "required": false,
                    "description": "Information about values that appear very frequently in a column (skewed values).",
                    "properties": {
                      "SkewedColumnNames": {
                        "type": "Array",
                        "array-type": "String",
                        "required": false,
                        "description": "A list of UTF-8 strings that specify the names of columns that contain skewed values."
                      },
                      "SkewedColumnValues": {
                        "type": "Array",
                        "array-type": "String",
                        "required": false,
                        "description": "A list of UTF-8 strings that specify values that appear so frequently that they're considered to be skewed."
                      },
                      "SkewedColumnValueLocationMaps": {
                        "type": "Json",
                        "required": false,
                        "description": "UTF-8 string�to�UTF-8 string key-value pairs that map skewed values to the columns that contain them."
                      }
                    }
                  },
                  "InputFormat": {
                    "type": "String",
                    "required": false,
                    "description": "The input format: SequenceFileInputFormat (binary), TextInputFormat, or a custom format."
                  },
                  "NumberOfBuckets": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of buckets."
                  },
                  "OutputFormat": {
                    "type": "String",
                    "required": false,
                    "description": "The output format: SequenceFileOutputFormat (binary), IgnoreKeyTextOutputFormat, or a custom format."
                  },
                  "Columns": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "The columns in the partition.",
                    "properties": {
                      "Comment": {
                        "type": "String",
                        "required": false,
                        "description": "A free-form text comment."
                      },
                      "Type": {
                        "type": "String",
                        "required": false,
                        "description": "The data type of the column data."
                      },
                      "Name": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the column."
                      }
                    }
                  },
                  "SerdeInfo": {
                    "type": "Object",
                    "required": false,
                    "description": "Information about a serialization/deserialization program (SerDe), which serves as an extractor and loader.",
                    "properties": {
                      "Parameters": {
                        "type": "Json",
                        "required": false,
                        "description": "UTF-8 string�to�UTF-8 string key-value pairs that specify the initialization parameters for the SerDe."
                      },
                      "SerializationLibrary": {
                        "type": "String",
                        "required": false,
                        "description": "The serialization library."
                      },
                      "Name": {
                        "type": "String",
                        "required": false,
                        "description": "The name of the SerDe."
                      }
                    }
                  },
                  "SortColumns": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "The sort order of each bucket in the partition.",
                    "properties": {
                      "Column": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the column."
                      },
                      "SortOrder": {
                        "type": "Number",
                        "required": false,
                        "description": "Indicates whether the column is sorted in ascending order (1) or descending order (0)."
                      }
                    }
                  },
                  "Compressed": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether the data in the partition is compressed."
                  },
                  "Location": {
                    "type": "String",
                    "required": false,
                    "description": "The physical location of the partition."
                  }
                }
              },
              "Values": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "description": "A list of UTF-8 strings that specify the values of the partition."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Glue::Table": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Glue::Table resource specifies tabular data in the AWS Glue data catalog.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Glue::Table resource specifies tabular data in the AWS Glue data catalog."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "TableInput": {
            "type": "Object",
            "required": true,
            "description": "The metadata of the table.",
            "properties": {
              "Owner": {
                "type": "String",
                "required": false,
                "description": "The owner of the table."
              },
              "ViewOriginalText": {
                "type": "String",
                "required": false,
                "description": "The original text of the view, if the table is a view. Otherwise, it's null."
              },
              "Description": {
                "type": "String",
                "required": false,
                "description": "The description of the table."
              },
              "TableType": {
                "type": "String",
                "required": false,
                "description": "The type of the table.",
                "allowed-values": [
                  "*",
                  "EXTERNAL_TABLE",
                  "VIRTUAL_VIEW"
                ]
              },
              "Parameters": {
                "type": "Json",
                "required": false,
                "description": "UTF-8 string�to�UTF-8 string key-value pairs that specify the properties that are associated with the table."
              },
              "ViewExpandedText": {
                "type": "String",
                "required": false,
                "description": "The expanded text of the view, if the table is a view. Otherwise it's null."
              },
              "StorageDescriptor": {
                "type": "Object",
                "required": false,
                "description": "Information about the physical storage of the table.",
                "properties": {
                  "StoredAsSubDirectories": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether the table data is stored in subdirectories."
                  },
                  "Parameters": {
                    "type": "Json",
                    "required": false,
                    "description": "UTF-8 string�to�UTF-8 string key-value pairs that specify user-supplied properties."
                  },
                  "BucketColumns": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "description": "A list of UTF-8 strings that specify reducer grouping columns, clustering columns, and bucketing columns in the table."
                  },
                  "SkewedInfo": {
                    "type": "Object",
                    "required": false,
                    "description": "Information about values that appear very frequently in a column (skewed values).",
                    "properties": {
                      "SkewedColumnNames": {
                        "type": "Array",
                        "array-type": "String",
                        "required": false,
                        "description": "A list of UTF-8 strings that specify the names of columns that contain skewed values."
                      },
                      "SkewedColumnValues": {
                        "type": "Array",
                        "array-type": "String",
                        "required": false,
                        "description": "A list of UTF-8 strings that specify values that appear so frequently that they're considered to be skewed."
                      },
                      "SkewedColumnValueLocationMaps": {
                        "type": "Json",
                        "required": false,
                        "description": "UTF-8 string�to�UTF-8 string key-value pairs that map skewed values to the columns that contain them."
                      }
                    }
                  },
                  "InputFormat": {
                    "type": "String",
                    "required": false,
                    "description": "The input format: SequenceFileInputFormat (binary), TextInputFormat, or a custom format."
                  },
                  "NumberOfBuckets": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of buckets."
                  },
                  "OutputFormat": {
                    "type": "String",
                    "required": false,
                    "description": "The output format: SequenceFileOutputFormat (binary), IgnoreKeyTextOutputFormat, or a custom format."
                  },
                  "Columns": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "The columns in the table.",
                    "properties": {
                      "Comment": {
                        "type": "String",
                        "required": false,
                        "description": "A free-form text comment."
                      },
                      "Type": {
                        "type": "String",
                        "required": false,
                        "description": "The data type of the column data."
                      },
                      "Name": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the column."
                      }
                    }
                  },
                  "SerdeInfo": {
                    "type": "Object",
                    "required": false,
                    "description": "Information about a serialization/deserialization program (SerDe), which serves as an extractor and loader.",
                    "properties": {
                      "Parameters": {
                        "type": "Json",
                        "required": false,
                        "description": "UTF-8 string�to�UTF-8 string key-value pairs that specify the initialization parameters for the SerDe."
                      },
                      "SerializationLibrary": {
                        "type": "String",
                        "required": false,
                        "description": "The serialization library."
                      },
                      "Name": {
                        "type": "String",
                        "required": false,
                        "description": "The name of the SerDe."
                      }
                    }
                  },
                  "SortColumns": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "The sort order of each bucket in the table.",
                    "properties": {
                      "Column": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the column."
                      },
                      "SortOrder": {
                        "type": "Number",
                        "required": true,
                        "description": "Indicates whether the column is sorted in ascending order (1) or descending order (0)."
                      }
                    }
                  },
                  "Compressed": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether the data in the table is compressed."
                  },
                  "Location": {
                    "type": "String",
                    "required": false,
                    "description": "The physical location of the table."
                  }
                }
              },
              "PartitionKeys": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "The columns in the table.",
                "properties": {
                  "Comment": {
                    "type": "String",
                    "required": false,
                    "description": "A free-form text comment"
                  },
                  "Type": {
                    "type": "String",
                    "required": false,
                    "description": "The data type of the column data."
                  },
                  "Name": {
                    "type": "String",
                    "required": true,
                    "description": "The name of the column."
                  }
                }
              },
              "Retention": {
                "type": "Number",
                "required": false,
                "description": "The retention time for the table."
              },
              "Name": {
                "type": "String",
                "required": false,
                "description": "The name of the table."
              }
            }
          },
          "DatabaseName": {
            "type": "String",
            "required": true,
            "description": "The name of the catalog database for the table."
          },
          "CatalogId": {
            "type": "String",
            "required": true,
            "description": "The ID of the data catalog to create the catalog object in. Currently, this should be the AWS account ID."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Glue::Trigger": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Glue::Trigger resource specifies triggers that run AWS Glue jobs.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Glue::Trigger resource specifies triggers that run AWS Glue jobs."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Type": {
            "type": "String",
            "required": true,
            "description": "The type of job trigger.",
            "allowed-values": [
              "*",
              "SCHEDULED",
              "CONDITIONAL",
              "ON_DEMAND"
            ]
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "The description of the job trigger."
          },
          "Actions": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "The actions that the job trigger initiates when it fires.",
            "properties": {
              "JobName": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::Glue::Job",
                "description": "The name of the associated job."
              },
              "Arguments": {
                "type": "Json",
                "required": false,
                "description": "UTF-8 string�to�UTF-8 string key-value pairs that specify the arguments for the action."
              }
            }
          },
          "Schedule": {
            "type": "String",
            "required": false,
            "description": "The cron schedule expression for the job trigger."
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "The name of the job trigger."
          },
          "Predicate": {
            "type": "Object",
            "required": false,
            "description": "The predicate of the job trigger, which determines when the trigger fires.",
            "properties": {
              "Logical": {
                "type": "String",
                "required": false,
                "description": "The logical operator for the predicate."
              },
              "Conditions": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "The conditions that determine when the trigger fires.",
                "properties": {
                  "State": {
                    "type": "String",
                    "required": false,
                    "description": "The state of the condition."
                  },
                  "LogicalOperator": {
                    "type": "String",
                    "required": false,
                    "description": "The logical operator for the condition."
                  },
                  "JobName": {
                    "type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::Glue::Job",
                    "description": "The name of the associated job."
                  }
                }
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::GuardDuty::Detector": {
    "type": "Object",
    "required": false,
    "description": "The AWS::GuardDuty::Detector resource creates a single Amazon GuardDuty detector.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::GuardDuty::Detector resource creates a single Amazon GuardDuty detector."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Enable": {
            "type": "Boolean",
            "required": true,
            "description": "A Boolean value that specifies whether the detector is to be enabled."
          },
          "FindingPublishingFrequency": {
            "type": "String",
            "required": false,
            "description": "Specifies the frequency of notifications sent about the subsequent finding occurrences.",
            "allowed-values": [
              "*",
              "FIFTEEN_MINUTES",
              "ONE_HOUR",
              "SIX_HOURS"
            ]
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::GuardDuty::Filter": {
    "type": "Object",
    "required": false,
    "description": "You can use the AWS::GuardDuty::Filter resource to create a GuardDuty filter using the specified finding criteria.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "You can use the AWS::GuardDuty::Filter resource to create a GuardDuty filter using the specified finding criteria."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Action": {
            "type": "String",
            "required": true,
            "description": "Specifies the action that is to be applied to the findings that match the filter.",
            "allowed-values": [
              "*",
              "NOOP",
              "ARCHIVE"
            ]
          },
          "Description": {
            "type": "String",
            "required": true,
            "description": "The description of the filter."
          },
          "DetectorId": {
            "type": "String",
            "required": true,
            "description": "The ID of the detector that specifies the GuardDuty service whose findings you want to filter.",
            "resource-ref-type": "AWS::GuardDuty::Detector"
          },
          "FindingCriteria": {
            "type": "Object",
            "required": true,
            "description": "Represents the criteria to be used in the filter for querying findings.",
            "properties": {
              "Criterion": {
                "type": "Json",
                "required": false,
                "description": "Specifies the finding attributes (for example, region, type, severity, etc.) that you want to include in the finding criteria for a filter."
              },
              "ItemType": {
                "type": "Object",
                "required": false,
                "description": "Specifies the condition to be applied to a single field when filtering through findings.",
                "properties": {
                  "Lt": {
                    "type": "Number",
                    "required": false,
                    "description": "Represents the less than condition to be applied to a single field when filtering through findings."
                  },
                  "Gte": {
                    "type": "Number",
                    "required": false,
                    "description": "Represents the greater than equal condition to be applied to a single field when filtering through findings."
                  },
                  "Neq": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "description": "Represents the not equal to condition to be applied to a single field when filtering through findings."
                  },
                  "Eq": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "description": "Represents the equal to condition to be applied to a single field when filtering through findings."
                  },
                  "Lte": {
                    "type": "Number",
                    "required": false,
                    "description": "Represents the less than equal condition to be applied to a single field when filtering through findings."
                  }
                }
              }
            }
          },
          "Rank": {
            "type": "Number",
            "required": true,
            "description": "Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings."
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "The name of the filter."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::GuardDuty::IPSet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::GuardDuty::IPSet resource creates an Amazon GuardDuty IP set.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::GuardDuty::IPSet resource creates an Amazon GuardDuty IP set."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Format": {
            "type": "String",
            "required": true,
            "description": "The format of the file that contains the IP set.",
            "allowed-values": [
              "*",
              "TXT",
              "STIX",
              "OTX_CSV"
            ]
          },
          "Activate": {
            "type": "Boolean",
            "required": true,
            "description": "A Boolean value that indicates whether GuardDuty is to start using the uploaded IP set."
          },
          "DetectorId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::GuardDuty::Detector",
            "description": "The detector ID that specifies the GuardDuty service for which an IP set is to be created."
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "The friendly name to identify the IP set."
          },
          "Location": {
            "type": "String",
            "required": true,
            "description": "The URI of the file that contains the IP set."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::GuardDuty::Master": {
    "type": "Object",
    "required": false,
    "description": "You can use the AWS::GuardDuty::Master resource in a GuardDuty member account to accept an invitation to be managed by a GuardDuty master account.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "You can use the AWS::GuardDuty::Master resource in a GuardDuty member account to accept an invitation to be managed by a GuardDuty master account."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DetectorId": {
            "type": "String",
            "required": true,
            "description": "The detector ID of the AWS account that is accepting an invitation to become a GuardDuty member account.",
            "resource-ref-type": "AWS::GuardDuty::Detector"
          },
          "MasterId": {
            "type": "String",
            "required": true,
            "description": "The account ID of the master GuardDuty account whose invitation you're accepting."
          },
          "InvitationId": {
            "type": "String",
            "required": false,
            "description": "The ID of the invitation that is sent to the AWS account by the GuardDuty master account. "
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::GuardDuty::Member": {
    "type": "Object",
    "required": false,
    "description": "You can use the AWS::GuardDuty::Member resource to add an AWS account as a GuardDuty member account to the current GuardDuty master account.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "You can use the AWS::GuardDuty::Member resource to add an AWS account as a GuardDuty member account to the current GuardDuty master account."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Status": {
            "type": "String",
            "required": false,
            "description": "You can use this property to update the status of the relationship between the member account and its master account."
          },
          "MemberId": {
            "type": "String",
            "required": true,
            "description": "The account ID of the member GuardDuty account."
          },
          "Email": {
            "type": "String",
            "required": true,
            "description": "The email address of the GuardDuty member account."
          },
          "Message": {
            "type": "String",
            "required": false,
            "description": "The invitation message that you want to send to the account that you invite to GuardDuty as a member."
          },
          "DisableEmailNotification": {
            "type": "Boolean",
            "required": false,
            "description": "Specifies whether an email notification is sent to the accounts that you want to invite to GuardDuty as members. When set to 'True', email notification is not sent to the invitees."
          },
          "DetectorId": {
            "type": "String",
            "required": true,
            "description": "The unique ID of the detector in a GuardDuty master account.",
            "resource-ref-type": "AWS::GuardDuty::Detector"
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::GuardDuty::ThreatIntelSet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::GuardDuty::ThreatIntelSet resource creates a ThreatIntelSet.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::GuardDuty::ThreatIntelSet resource creates a ThreatIntelSet."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Format": {
            "type": "String",
            "required": true,
            "description": "The format of the file that contains the IP set.",
            "allowed-values": [
              "*",
              "TXT",
              "STIX",
              "OTX_CSV"
            ]
          },
          "Activate": {
            "type": "Boolean",
            "required": true,
            "description": "A Boolean value that indicates whether GuardDuty is to start using the uploaded IP set."
          },
          "DetectorId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::GuardDuty::Detector",
            "description": "The detector ID that specifies the GuardDuty service for which an IP set is to be created."
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "The friendly name to identify the IP set."
          },
          "Location": {
            "type": "String",
            "required": true,
            "description": "The URI of the file that contains the IP set."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IAM::AccessKey": {
    "type": "Object",
    "required": false,
    "description": "The AWS::IAM::AccessKey resource type generates a secret access key and assigns it to an IAM user or AWS account.",
    "return-values": [
      {
        "name": "SecretAccessKey",
        "description": "Returns the secret access key for the specified AWS::IAM::AccessKey resource. For example: wJalrXUtnFEMI/K7MDENG/bPxRfiCYzEXAMPLEKEY."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::IAM::AccessKey resource type generates a secret access key and assigns it to an IAM user or AWS account."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Serial": {
            "type": "String",
            "required": false,
            "description": "This value is specific to AWS CloudFormation and can only be incremented. Incrementing this value notifies AWS CloudFormation that you want to rotate your access key. When you update your stack, AWS CloudFormation will replace the existing access key with a new key."
          },
          "Status": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "Active",
              "Inactive"
            ],
            "description": "The status of the access key."
          },
          "UserName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::User",
            "description": "The name of the user that the new key will belong to."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IAM::Group": {
    "type": "Object",
    "required": false,
    "description": "The AWS::IAM::Group type creates an Identity and Access Management (IAM) group.",
    "return-values": [
      {
        "name": "Arn",
        "description": "Returns the Amazon Resource Name (ARN) for the AWS::IAM::Group resource. For example: arn:aws:iam::123456789012:group/mystack-mygroup-1DZETITOWEKVO."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::IAM::Group type creates an Identity and Access Management (IAM) group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "GroupName": {
            "type": "String",
            "required": false,
            "description": "A name for the IAM group."
          },
          "ManagedPolicyArns": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::ManagedPolicy",
            "description": "One or more managed policy ARNs to attach to this group."
          },
          "Path": {
            "type": "String",
            "required": false,
            "description": "The path for the group. For more information about paths, see Identifiers for IAM Entities in Using AWS Identity and Access Management."
          },
          "Policies": {
            "type": "Array",
            "array-type": "Policy",
            "required": false,
            "resource-ref-type": "AWS::IAM::Policy",
            "description": "Applies specified policies to the role."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IAM::InstanceProfile": {
    "type": "Object",
    "required": false,
    "description": "Creates an AWS Identity and Access Management (IAM) Instance Profile that can be used with IAM Roles for EC2 Instances.",
    "return-values": [
      {
        "name": "Arn",
        "description": "Returns the Amazon Resource Name (ARN) for the instance profile. For example: arn:aws:iam::1234567890:instance-profile/MyProfile-ASDNSDLKJ."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an AWS Identity and Access Management (IAM) Instance Profile that can be used with IAM Roles for EC2 Instances."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Path": {
            "type": "String",
            "required": false,
            "description": "The path associated with this IAM instance profile. For more information about paths, see Identifiers for IAM Entities in Using AWS Identity and Access Management."
          },
          "Roles": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The roles associated with this IAM instance profile."
          },
          "InstanceProfileName": {
            "type": "String",
            "required": false,
            "description": "The name of the instance profile that you want to create."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IAM::ManagedPolicy": {
    "type": "Object",
    "required": false,
    "description": "AWS::IAM::ManagedPolicy creates an AWS Identity and Access Management (IAM) managed policy for your AWS account that you can use to apply permissions to IAM users, groups, and roles.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "AWS::IAM::ManagedPolicy creates an AWS Identity and Access Management (IAM) managed policy for your AWS account that you can use to apply permissions to IAM users, groups, and roles."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the policy. For example, you can describe the permissions that are defined in the policy."
          },
          "Groups": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Group",
            "description": "The names of groups to attach to this policy."
          },
          "Path": {
            "type": "String",
            "required": false,
            "description": "The path for the policy. By default, the path is /."
          },
          "PolicyDocument": {
            "type": "Policy",
            "required": true,
            "description": "A policy document containing permissions to add to the specified users or groups."
          },
          "Roles": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The names of roles to attach to this policy."
          },
          "Users": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::User",
            "description": "The names of users to attach to this policy."
          },
          "ManagedPolicyName": {
            "type": "String",
            "required": false,
            "description": "A custom, friendly name for your IAM managed policy."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IAM::Policy": {
    "type": "Object",
    "required": false,
    "description": "The AWS::IAM::Policy type applies an Identity and Access Management (IAM) policy to users or groups.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::IAM::Policy type applies an Identity and Access Management (IAM) policy to users or groups."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "PolicyName": {
            "type": "String",
            "required": true,
            "description": "The name of the policy."
          },
          "PolicyDocument": {
            "type": "Policy",
            "required": true,
            "description": "A policy document containing permissions to add to the specified users or groups."
          },
          "Groups": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Group",
            "description": "The names of groups to which you want to add the policy."
          },
          "Users": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::User",
            "description": "The names of users for whom you want to add the policy."
          },
          "Roles": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The names of roles to which you want to add the policy."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IAM::Role": {
    "type": "Object",
    "required": false,
    "description": "Creates an AWS Identity and Access Management (IAM) Role for EC2 Instances. An IAM Role can be used to enable applications running on an Amazon EC2 instance to securely access your AWS resources.",
    "return-values": [
      {
        "name": "Arn",
        "description": "Returns the Amazon Resource Name (ARN) for the instance profile. For example: arn:aws:iam::1234567890:role/MyRole-AJJHDSKSDF."
      },
      {
        "name": "RoleId",
        "description": "Returns the stable and unique string identifying the role. For example, AIDAJQABLZS4A3QDU576Q."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an AWS Identity and Access Management (IAM) Role for EC2 Instances. An IAM Role can be used to enable applications running on an Amazon EC2 instance to securely access your AWS resources."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AssumeRolePolicyDocument": {
            "type": "Policy",
            "required": true,
            "description": "The IAM Assume Role Policy Document associated with this role."
          },
          "ManagedPolicyArns": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::ManagedPolicy",
            "description": "One or more managed policy ARNs to attach to this role."
          },
          "Path": {
            "type": "String",
            "required": false,
            "description": "The path for the role. For more information about paths, see Identifiers for IAM Entities in Using AWS Identity and Access Management."
          },
          "Policies": {
            "type": "Array",
            "array-type": "Policy",
            "required": false,
            "resource-ref-type": "AWS::IAM::Policy",
            "description": "Applies specified policies to the role."
          },
          "RoleName": {
            "type": "String",
            "required": false,
            "description": "A name for the IAM role."
          },
          "MaxSessionDuration": {
            "type": "Number",
            "required": false,
            "description": "The maximum session duration (in seconds) for the specified role."
          },
          "PermissionsBoundary": {
            "type": "String",
            "required": false,
            "description": "The ARN of the policy that is used to set the permissions boundary for the role."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IAM::ServiceLinkedRole": {
    "type": "Object",
    "required": false,
    "description": "The AWS::IAM::ServiceLinkedRole resource creates a service-linked role in AWS Identity and Access Management (IAM).",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::IAM::ServiceLinkedRole resource creates a service-linked role in AWS Identity and Access Management (IAM)."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CustomSuffix": {
            "type": "String",
            "required": false,
            "description": "A string that you provide, which is combined with the service-provided prefix to form the complete role name."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "The description of the role."
          },
          "AWSServiceName": {
            "type": "String",
            "required": true,
            "description": "The service principal for the AWS service to which this role is attached."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IAM::User": {
    "type": "Object",
    "required": false,
    "description": "The AWS::IAM::User type creates a user.",
    "return-values": [
      {
        "name": "Arn",
        "description": "Returns the Amazon Resource Name (ARN) for the specified AWS::IAM::User resource. For example: arn:aws:iam::123456789012:user/mystack-myuser-1CCXAFG2H2U4D."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::IAM::User type creates a user."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Path": {
            "type": "String",
            "required": false,
            "description": "The path for the user name. For more information about paths, see Identifiers for IAM Entities in Using AWS Identity and Access Management."
          },
          "Groups": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Group",
            "description": "The path for the user name. For more information about paths, see Identifiers for IAM Entities in Using AWS Identity and Access Management."
          },
          "LoginProfile": {
            "type": "Object",
            "required": false,
            "description": "Creates a login profile for the user so the user can access AWS services such as the AWS Management Console.",
            "properties": {
              "Password": {
                "type": "String",
                "description": "The password for the user.",
                "required": true
              },
              "PasswordResetRequired": {
                "type": "Boolean",
                "required": false,
                "description": "Specifies whether the user is required to set a new password the next time the user logs in to the AWS Management Console."
              }
            }
          },
          "ManagedPolicyArns": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::ManagedPolicy",
            "description": "One or more managed policy ARNs to attach to this user."
          },
          "Policies": {
            "type": "Array",
            "array-type": "Policy",
            "required": false,
            "resource-ref-type": "AWS::IAM::Policy",
            "description": "Applies specified policies to the user."
          },
          "UserName": {
            "type": "String",
            "required": false,
            "description": "A name for the IAM user."
          },
          "PermissionsBoundary": {
            "type": "String",
            "required": false,
            "description": "The ARN of the policy that is used to set the permissions boundary for the user."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IAM::UserToGroupAddition": {
    "type": "Object",
    "required": false,
    "description": "The AWS::IAM::UserToGroupAddition type adds Identity and Access Management (IAM) users to a group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::IAM::UserToGroupAddition type adds Identity and Access Management (IAM) users to a group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "GroupName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Group",
            "description": "List of groups"
          },
          "Users": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::User",
            "description": "List of users"
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Inspector::AssessmentTarget": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Inspector::AssessmentTarget resource creates an Amazon Inspector assessment target - a resource that contains information about an Amazon Inspector application.",
    "return-values": [
      {
        "name": "Arn",
        "description": "The Amazon Resource Name (ARN) that specifies the assessment target that is created."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Inspector::AssessmentTarget resource creates an Amazon Inspector assessment target - a resource that contains information about an Amazon Inspector application."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AssessmentTargetName": {
            "type": "String",
            "required": false,
            "description": "The name of the Amazon Inspector assessment target."
          },
          "ResourceGroupArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Inspector::ResourceGroup",
            "description": "The ARN that specifies the resource group that is associated with the assessment target."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Inspector::AssessmentTemplate": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Inspector::AssessmentTemplate resource creates an Amazon Inspector assessment template - a resource that contains information about an Amazon Inspector assessment template.",
    "return-values": [
      {
        "name": "Arn",
        "description": "The Amazon Resource Name (ARN) that specifies the assessment template that is created."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Inspector::AssessmentTemplate resource creates an Amazon Inspector assessment template - a resource that contains information about an Amazon Inspector assessment template."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AssessmentTargetArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Inspector::AssessmentTarget",
            "description": "The ARN of the assessment target that corresponds to this assessment template."
          },
          "DurationInSeconds": {
            "type": "Number",
            "required": true,
            "description": "The duration in seconds specified for this assessment tempate."
          },
          "AssessmentTemplateName": {
            "type": "String",
            "required": false,
            "description": "The name of the assessment template."
          },
          "RulesPackageArns": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "description": "The rules packages that are specified for this assessment template."
          },
          "UserAttributesForFindings": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The user-defined attributes that are assigned to every generated finding from the assessment run that uses this assessment template.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Inspector::ResourceGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Inspector::ResourceGroup resource is used to create Amazon Inspector resource groups.",
    "return-values": [
      {
        "name": "Arn",
        "description": "The Amazon Resource Name (ARN) that specifies the resource group that is created."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Inspector::ResourceGroup resource is used to create Amazon Inspector resource groups."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ResourceGroupTags": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "The tags (key and value pairs) of the resource group.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IoT1Click::Device": {
    "type": "Object",
    "required": false,
    "description": "The AWS::IoT1Click::Device resource controls the enabled state of an AWS IoT 1-Click compatible device.",
    "return-values": [
      {
        "name": "DeviceId",
        "description": "The ID of the device, such as G030PX0312744DWM."
      },
      {
        "name": "Enabled",
        "description": "A Boolean value indicating whether the device is enabled (true) or not (false)."
      },
      {
        "name": "Arn",
        "description": "The ARN of the device, such as arn:aws:iot1click:us-west-2:123456789012:devices/G030PX0312744DWM."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::IoT1Click::Device resource controls the enabled state of an AWS IoT 1-Click compatible device."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DeviceId": {
            "type": "String",
            "required": true,
            "description": "The unique identifier of the device."
          },
          "Enabled": {
            "type": "Boolean",
            "required": true,
            "description": "A Boolean value indicating whether the device is enabled (true) or not (false)."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IoT1Click::Placement": {
    "type": "Object",
    "required": false,
    "description": "The AWS::IoT1Click::Placement resource creates a placement to be associated with an AWS IoT 1-Click project.",
    "return-values": [
      {
        "name": "PlacementName",
        "description": "The name of the placement, such as floor17."
      },
      {
        "name": "ProjectName",
        "description": "The name of the project containing the placement, such as conference-rooms."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::IoT1Click::Placement resource creates a placement to be associated with an AWS IoT 1-Click project."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "PlacementName": {
            "type": "String",
            "required": false,
            "description": "The name of this placement."
          },
          "ProjectName": {
            "type": "String",
            "required": true,
            "description": "The name of the project that will contain this placement.",
            "resource-ref-type": "AWS::IoT1Click::Project"
          },
          "AssociatedDevices": {
            "type": "Json",
            "required": false,
            "description": "The device(s) to associate with the placement, as defined by a mapping of zero or more key/value pairs wherein the key is a template name and the value is a device ID.",
            "resource-ref-type": "AWS::IoT1Click::Device"
          },
          "Attributes": {
            "type": "Json",
            "required": false,
            "description": "User specified attribute(s) in the form of key/value pairs."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IoT1Click::Project": {
    "type": "Object",
    "required": false,
    "description": "The AWS::IoT1Click::Project resource creates an empty project with a placement template.",
    "return-values": [
      {
        "name": "ProjectName",
        "description": "The Amazon Resource Name (ARN) of the project, such as arn:aws:iot1click:us-east-1:123456789012:projects/project-a1bzhi."
      },
      {
        "name": "Arn",
        "description": "The name of the project, such as project-a1bzhi."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::IoT1Click::Project resource creates an empty project with a placement template."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "An optional description for the project."
          },
          "PlacementTemplate": {
            "type": "Object",
            "required": true,
            "description": "The template defining the placement to be created.",
            "properties": {
              "DeviceTemplates": {
                "type": "Json",
                "required": false,
                "description": "An object specifying the DeviceTemplate for all placements using this (PlacementTemplate) template."
              },
              "DefaultAttributes": {
                "type": "Json",
                "required": false,
                "description": "The attributes (key/value pairs) to be applied to all placements using this template."
              }
            }
          },
          "ProjectName": {
            "type": "String",
            "required": false,
            "description": "The name of the project to create."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IoTAnalytics::Channel": {
    "type": "Object",
    "required": false,
    "description": "The AWS::IoTAnalytics::Channel resource collects data from an MQTT topic and archives the raw, unprocessed messages before publishing the data to a pipeline.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::IoTAnalytics::Channel resource collects data from an MQTT topic and archives the raw, unprocessed messages before publishing the data to a pipeline."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ChannelName": {
            "type": "String",
            "required": false,
            "description": "The name of the channel."
          },
          "RetentionPeriod": {
            "type": "Object",
            "required": false,
            "description": "How long, in days, message data is kept for the channel.",
            "properties": {
              "NumberOfDays": {
                "type": "Number",
                "required": false,
                "description": "The number of days that message data is kept."
              },
              "Unlimited": {
                "type": "Boolean",
                "required": false,
                "description": "If true, message data is kept indefinitely."
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Metadata which can be used to manage the channel.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IoTAnalytics::Dataset": {
    "type": "Object",
    "required": false,
    "description": "The AWS::IoTAnalytics::Dataset resource retrieves data from a data store.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::IoTAnalytics::Dataset resource retrieves data from a data store."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Actions": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "A list of actions that create the data set contents.",
            "properties": {
              "ActionName": {
                "type": "String",
                "required": true,
                "description": "The name of the data set action."
              },
              "ContainerAction": {
                "type": "Object",
                "required": false,
                "description": "Information which allows the system to run a containerized application in order to create the data set contents.",
                "properties": {
                  "Variables": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "The values of variables used within the context of the execution of the containerized application (basically, parameters passed to the application).",
                    "properties": {
                      "DatasetContentVersionValue": {
                        "type": "Object",
                        "required": false,
                        "description": "The value of the variable as a structure that specifies a data set content version.",
                        "properties": {
                          "DatasetName": {
                            "type": "String",
                            "required": false,
                            "description": "The data set whose latest contents will be used as input to the notebook or application."
                          }
                        }
                      },
                      "DoubleValue": {
                        "type": "Number",
                        "required": false,
                        "description": "The value of the variable as a Java double type."
                      },
                      "OutputFileUriValue": {
                        "type": "Object",
                        "required": false,
                        "description": "The value of the variable as a structure that specifies an output file URI.",
                        "properties": {
                          "FileName": {
                            "type": "String",
                            "required": false,
                            "description": "The URI of the location where data set contents are stored, usually the URI of a file in an S3 bucket."
                          }
                        }
                      },
                      "VariableName": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the variable."
                      },
                      "StringValue": {
                        "type": "String",
                        "required": false,
                        "description": "The value of the variable as a Java string type."
                      }
                    }
                  },
                  "ExecutionRoleArn": {
                    "type": "String",
                    "required": true,
                    "description": "The ARN of the role which gives permission to the system to access needed resources in order to run the 'containerAction'.",
                    "resource-ref-type": "AWS::IAM::Role"
                  },
                  "Image": {
                    "type": "String",
                    "required": true,
                    "description": "The ARN of the Docker container stored in your account."
                  },
                  "ResourceConfiguration": {
                    "type": "Object",
                    "required": true,
                    "description": "Configuration of the resource that executes the 'containerAction'.",
                    "properties": {
                      "VolumeSizeInGB": {
                        "type": "Number",
                        "required": true,
                        "description": "The size of the persistent storage available to the resource instance used to execute the 'containerAction'."
                      },
                      "ComputeType": {
                        "type": "String",
                        "required": true,
                        "description": "The type of the compute resource used to execute the 'containerAction' (ACU_1|ACU_2).",
                        "allowed-values": [
                          "*",
                          "ACU_1",
                          "ACU_2"
                        ]
                      }
                    }
                  }
                }
              },
              "QueryAction": {
                "type": "Object",
                "required": false,
                "description": "Uses an SQL query to automatically create data set contents.",
                "properties": {
                  "Filters": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "Pre-filters applied to message data.",
                    "properties": {
                      "DeltaTime": {
                        "type": "Object",
                        "required": false,
                        "description": "Used to limit data to that which has arrived since the last execution of the action.",
                        "properties": {
                          "TimeExpression": {
                            "type": "String",
                            "required": true,
                            "description": "An expression by which the time of the message data may be determined."
                          },
                          "OffsetSeconds": {
                            "type": "Number",
                            "required": true,
                            "description": "The number of seconds of estimated in flight lag time of message data."
                          }
                        }
                      }
                    }
                  },
                  "SqlQuery": {
                    "type": "String",
                    "required": true,
                    "description": "An SQL query string."
                  }
                }
              }
            }
          },
          "DatasetName": {
            "type": "String",
            "required": false,
            "description": "The name of the data set."
          },
          "Triggers": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A list of triggers. A trigger causes data set contents to be populated at a specified time interval or when another data set's contents are created.",
            "properties": {
              "Schedule": {
                "type": "Object",
                "required": false,
                "description": "The schedule of when the trigger is initiated (for triggering at a specific time).",
                "properties": {
                  "ScheduleExpression": {
                    "type": "String",
                    "required": true,
                    "description": "The expression that defines when to trigger an update."
                  }
                }
              },
              "TriggeringDataset": {
                "type": "Object",
                "required": false,
                "description": "The data set whose content creation will trigger the creation of this data set's contents.",
                "properties": {
                  "DatasetName": {
                    "type": "String",
                    "required": true,
                    "description": "The name of the data set."
                  }
                }
              }
            }
          },
          "RetentionPeriod": {
            "type": "Object",
            "required": false,
            "description": "How long, in days, message data is kept for the data set.",
            "properties": {
              "NumberOfDays": {
                "type": "Number",
                "required": true,
                "description": "The number of days that message data is kept. The unlimited parameter must be false."
              },
              "Unlimited": {
                "type": "Boolean",
                "required": true,
                "description": "If true, message data is kept indefinitely."
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Metadata which can be used to manage the data set.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IoTAnalytics::Datastore": {
    "type": "Object",
    "required": false,
    "description": "The AWS::IoTAnalytics::Datastore resource is a repository for messages.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::IoTAnalytics::Datastore resource is a repository for messages."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DatastoreName": {
            "type": "String",
            "required": false,
            "description": "The name of the data store."
          },
          "RetentionPeriod": {
            "type": "Object",
            "required": false,
            "description": "How long, in days, message data is kept for the data store.",
            "properties": {
              "NumberOfDays": {
                "type": "Number",
                "required": false,
                "description": "The number of days that message data is kept. The unlimited parameter must be false."
              },
              "Unlimited": {
                "type": "Boolean",
                "required": false,
                "description": "If true, message data is kept indefinitely."
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Metadata which can be used to manage the data store.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IoTAnalytics::Pipeline": {
    "type": "Object",
    "required": false,
    "description": "The AWS::IoTAnalytics::Pipeline resource consumes messages from one or more channels and processes the messages before storing them in a data store.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::IoTAnalytics::Pipeline resource consumes messages from one or more channels and processes the messages before storing them in a data store."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "PipelineName": {
            "type": "String",
            "required": false,
            "description": "The name of the pipeline."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Metadata which can be used to manage the pipeline.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          },
          "PipelineActivities": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "A list of pipeline activities which perform transformations on your messages.",
            "properties": {
              "SelectAttributes": {
                "type": "Object",
                "required": false,
                "description": "Creates a new message using only the specified attributes from the original message.",
                "properties": {
                  "Next": {
                    "type": "String",
                    "required": false,
                    "description": "The next activity in the pipeline."
                  },
                  "Attributes": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "description": "A list of the attributes to select from the message."
                  },
                  "Name": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the 'selectAttributes' activity."
                  }
                }
              },
              "Datastore": {
                "type": "Object",
                "required": false,
                "description": "Specifies where to store the processed message data.e",
                "properties": {
                  "DatastoreName": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the data store where processed messages are stored."
                  },
                  "Name": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the 'datastore' activity."
                  }
                }
              },
              "Filter": {
                "type": "Object",
                "required": false,
                "description": "Filters a message based on its attributes.",
                "properties": {
                  "Filter": {
                    "type": "String",
                    "required": false,
                    "description": "Filters a message based on its attributes."
                  },
                  "Next": {
                    "type": "String",
                    "required": false,
                    "description": "The next activity in the pipeline."
                  },
                  "Name": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the 'filter' activity."
                  }
                }
              },
              "AddAttributes": {
                "type": "Object",
                "required": false,
                "description": "Adds other attributes based on existing attributes in the message.",
                "properties": {
                  "Next": {
                    "type": "String",
                    "required": false,
                    "description": "The next activity in the pipeline."
                  },
                  "Attributes": {
                    "type": "Json",
                    "required": false,
                    "description": "A list of objects that map an existing attribute to a new attribute in a message."
                  },
                  "Name": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the 'addAttributes' activity."
                  }
                }
              },
              "Channel": {
                "type": "Object",
                "required": false,
                "description": "Determines the source of the messages to be processed.",
                "properties": {
                  "ChannelName": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the channel from which the messages are processed."
                  },
                  "Next": {
                    "type": "String",
                    "required": false,
                    "description": "The next activity in the pipeline."
                  },
                  "Name": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the 'channel' activity."
                  }
                }
              },
              "DeviceShadowEnrich": {
                "type": "Object",
                "required": false,
                "description": "Adds information from the AWS IoT Device Shadows service to a message.",
                "properties": {
                  "Attribute": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the attribute that is added to the message."
                  },
                  "Next": {
                    "type": "String",
                    "required": false,
                    "description": "The next activity in the pipeline."
                  },
                  "ThingName": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the IoT device whose shadow information is added to the message.",
                    "resource-ref-type": "AWS::IoT::Thing"
                  },
                  "RoleArn": {
                    "type": "String",
                    "required": false,
                    "description": "The ARN of the role that allows access to the device's shadow.",
                    "resource-ref-type": "AWS::IAM::Role"
                  },
                  "Name": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the 'deviceShadowEnrich' activity."
                  }
                }
              },
              "Math": {
                "type": "Object",
                "required": false,
                "description": "Computes an arithmetic expression using the message's attributes and adds it to the message.",
                "properties": {
                  "Attribute": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the attribute that will contain the result of the math operation."
                  },
                  "Next": {
                    "type": "String",
                    "required": false,
                    "description": "The next activity in the pipeline."
                  },
                  "Math": {
                    "type": "String",
                    "required": false,
                    "description": "An expression that uses one or more existing attributes and must return an integer value."
                  },
                  "Name": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the 'math' activity."
                  }
                }
              },
              "Lambda": {
                "type": "Object",
                "required": false,
                "description": "Runs a Lambda function to modify the message.",
                "properties": {
                  "BatchSize": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of messages that should be passed to the Lambda function for processing within 5 minutes."
                  },
                  "Next": {
                    "type": "String",
                    "required": false,
                    "description": "The next activity in the pipeline."
                  },
                  "LambdaName": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the Lambda function that is run on the message.",
                    "resource-ref-type": "AWS::Lambda::Function"
                  },
                  "Name": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the 'lambda' activity."
                  }
                }
              },
              "DeviceRegistryEnrich": {
                "type": "Object",
                "required": false,
                "description": "Adds data from the AWS IoT device registry to your message.",
                "properties": {
                  "Attribute": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the attribute that is added to the message."
                  },
                  "Next": {
                    "type": "String",
                    "required": false,
                    "description": "The next activity in the pipeline."
                  },
                  "ThingName": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the IoT device whose registry information is added to the message.",
                    "resource-ref-type": "AWS::IoT::Thing"
                  },
                  "RoleArn": {
                    "type": "String",
                    "required": false,
                    "description": "The ARN of the role that allows access to the device's registry information.",
                    "resource-ref-type": "AWS::IAM::Role"
                  },
                  "Name": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the deviceRegistryEnrich activity."
                  }
                }
              },
              "RemoveAttributes": {
                "type": "Object",
                "required": false,
                "description": "Removes attributes from a message.",
                "properties": {
                  "Next": {
                    "type": "String",
                    "required": false,
                    "description": "The next activity in the pipeline."
                  },
                  "Attributes": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "description": "Specifies the attributes to remove from the message."
                  },
                  "Name": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the 'removeAttributes' activity."
                  }
                }
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IoT::Certificate": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS::IoT::Certificate resource to declare an X.509 certificate.",
    "return-values": [
      {
        "name": "Arn",
        "description": "Fn::GetAtt returns a value for a specified attribute of this type. This section lists the available attributes and sample return values."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS::IoT::Certificate resource to declare an X.509 certificate."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CertificateSigningRequest": {
            "type": "String",
            "required": true,
            "description": "The certificate signing request (CSR)."
          },
          "Status": {
            "type": "String",
            "required": true,
            "description": "The status of the certificate."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IoT::Policy": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS::IoT::Policy resource to declare an AWS IoT policy.",
    "return-values": [
      {
        "name": "Arn",
        "description": "The Amazon Resource Name (ARN) of the AWS IoT policy, such as arn:aws:iot:us-east-2:123456789012:policy/MyPolicy."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS::IoT::Policy resource to declare an AWS IoT policy."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "PolicyDocument": {
            "type": "Json",
            "required": true,
            "description": "The JSON document that describes the policy."
          },
          "PolicyName": {
            "type": "String",
            "required": true,
            "description": "The name (the physical ID) of the AWS IoT policy."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IoT::PolicyPrincipalAttachment": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS::IoT::PolicyPrincipalAttachment resource to attach an AWS IoT policy to a principal (an X.509 certificate or other credential).",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS::IoT::PolicyPrincipalAttachment resource to attach an AWS IoT policy to a principal (an X.509 certificate or other credential)."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "PolicyName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IoT::Policy",
            "description": "The name (the physical ID) of the AWS IoT policy."
          },
          "Principal": {
            "type": "String",
            "required": true,
            "description": "The principal, which can be a certificate ARN (as returned from the CreateCertificate operation) or an Amazon Cognito ID."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IoT::Thing": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS::IoT::Thing resource to declare an AWS IoT thing.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS::IoT::Thing resource to declare an AWS IoT thing."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AttributePayload": {
            "type": "Json",
            "required": false,
            "description": "A JSON string that contains up to three key-value pairs."
          },
          "ThingName": {
            "type": "String",
            "required": false,
            "description": "The name (the physical ID) of the AWS IoT thing."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IoT::ThingPrincipalAttachment": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS::IoT::ThingPrincipalAttachment resource to attach a principal (an X.509 certificate or another credential) to a thing.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS::IoT::ThingPrincipalAttachment resource to attach a principal (an X.509 certificate or another credential) to a thing."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Principal": {
            "type": "String",
            "required": true,
            "description": "The principal, which can be a certificate ARN (as returned from the CreateCertificate operation) or an Amazon Cognito ID."
          },
          "ThingName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IoT::Thing",
            "description": "The name (the physical ID) of the AWS IoT thing."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IoT::TopicRule": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS::IoT::TopicRule resource to declare an AWS IoT rule.",
    "return-values": [
      {
        "name": "Arn",
        "description": "The Amazon Resource Name (ARN) of the AWS IoT rule, such as arn:aws:iot:us-east-2:123456789012:rule/MyIoTRule."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS::IoT::TopicRule resource to declare an AWS IoT rule."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "RuleName": {
            "type": "String",
            "required": false,
            "description": "The name (the physical ID) of the AWS IoT rule."
          },
          "TopicRulePayload": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IoT::Thing",
            "description": "The actions associated with the AWS IoT rule.",
            "properties": {
              "Actions": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "The name (the physical ID) of the AWS IoT rule.",
                "properties": {
                  "CloudwatchAlarm": {
                    "type": "String",
                    "required": false,
                    "description": "Changes the state of a CloudWatch alarm.",
                    "properties": {
                      "AlarmName": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::CloudWatch::Alarm",
                        "description": "The CloudWatch alarm name."
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::IAM::Role",
                        "description": "The IAM role that allows access to the CloudWatch alarm."
                      },
                      "StateReason": {
                        "type": "String",
                        "required": true,
                        "description": "The reason for the change of the alarm state."
                      },
                      "StateValue": {
                        "type": "String",
                        "required": true,
                        "description": "The value of the alarm state."
                      }
                    }
                  },
                  "CloudwatchMetric": {
                    "type": "Object",
                    "required": false,
                    "description": "Captures a CloudWatch metric.",
                    "properties": {
                      "MetricName": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the CloudWatch metric."
                      },
                      "MetricNamespace": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the CloudWatch metric namespace."
                      },
                      "MetricTimestamp": {
                        "type": "String",
                        "required": false,
                        "description": "An optional Unix timestamp."
                      },
                      "MetricUnit": {
                        "type": "String",
                        "required": true,
                        "description": "The metric unit supported by Amazon CloudWatch."
                      },
                      "MetricValue": {
                        "type": "String",
                        "required": true,
                        "description": "The value to publish to the metric. For example, if you count the occurrences of a particular term such as Error, the value will be 1 for each occurrence."
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": false,
                        "resource-ref-type": "AWS::IAM::Role",
                        "description": "The ARN of the IAM role that grants access to the CloudWatch metric."
                      }
                    }
                  },
                  "DynamoDB": {
                    "type": "Object",
                    "required": false,
                    "description": "Writes data to a DynamoDB table.",
                    "properties": {
                      "HashKeyField": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the hash key."
                      },
                      "HashKeyValue": {
                        "type": "String",
                        "required": true,
                        "description": "The value of the hash key."
                      },
                      "PayloadField": {
                        "type": "String",
                        "required": false,
                        "description": "The name of the column in the DynamoDB table that contains the result of the query. You can customize this name."
                      },
                      "RangeKeyField": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the range key."
                      },
                      "RangeKeyValue": {
                        "type": "String",
                        "required": true,
                        "description": "The value of the range key."
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::IAM::Role",
                        "description": "The ARN of the IAM role that grants access to the DynamoDB table."
                      },
                      "TableName": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::DynamoDB::Table",
                        "description": "The name of the DynamoDB table."
                      },
                      "HashKeyType": {
                        "type": "String",
                        "required": false,
                        "description": "The data type of the hash key (also called the partition key).",
                        "allowed-values": [
                          "*",
                          "STRING",
                          "NUMBER"
                        ]
                      },
                      "RangeKeyType": {
                        "type": "String",
                        "required": false,
                        "description": "The data type of the range key (also called the sort key).",
                        "allowed-values": [
                          "*",
                          "STRING",
                          "NUMBER"
                        ]
                      }
                    }
                  },
                  "Elasticsearch": {
                    "type": "Object",
                    "required": false,
                    "description": "Writes data to an Elasticsearch domain.",
                    "properties": {
                      "Endpoint": {
                        "type": "String",
                        "required": true,
                        "description": "The endpoint of your Elasticsearch domain."
                      },
                      "Id": {
                        "type": "String",
                        "required": true,
                        "description": "A unique identifier for the stored data."
                      },
                      "Index": {
                        "type": "String",
                        "required": true,
                        "description": "The Elasticsearch index where the data is stored."
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::IAM::Role",
                        "description": "The ARN of the IAM role that grants access to Elasticsearch."
                      },
                      "Type": {
                        "type": "String",
                        "required": true,
                        "description": "The type of stored data."
                      }
                    }
                  },
                  "Firehose": {
                    "type": "Object",
                    "required": false,
                    "description": "Writes data to a Firehose stream.",
                    "properties": {
                      "DeliveryStreamName": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::KinesisFirehose::DeliveryStream",
                        "description": "The delivery stream name."
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::IAM::Role",
                        "description": "The ARN of the IAM role that grants access to the Firehose stream."
                      },
                      "Separator": {
                        "type": "String",
                        "required": true,
                        "description": "A character separator that's used to separate records written to the Firehose stream."
                      }
                    }
                  },
                  "Kinesis": {
                    "type": "Object",
                    "required": false,
                    "description": "Writes data to an Amazon Kinesis stream.",
                    "properties": {
                      "PartitionKey": {
                        "type": "String",
                        "required": false,
                        "description": "The partition key (the grouping of data by shard within an an Amazon Kinesis stream)."
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::IAM::Role",
                        "description": "The ARN of the IAM role that grants access to an Amazon Kinesis stream."
                      },
                      "StreamName": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::Kinesis::Stream",
                        "description": "The name of the Amazon Kinesis stream."
                      }
                    }
                  },
                  "Lambda": {
                    "type": "Object",
                    "required": false,
                    "description": "Invokes a Lambda function.",
                    "properties": {
                      "FunctionArn": {
                        "type": "String",
                        "required": true,
                        "description": "The ARN of the Lambda function."
                      }
                    }
                  },
                  "Republish": {
                    "type": "Object",
                    "required": false,
                    "description": "Publishes data to an MQ Telemetry Transport (MQTT) topic different from the one currently specified.",
                    "properties": {
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::IAM::Role",
                        "description": "The ARN of the IAM role that grants publishing access."
                      },
                      "Topic": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the MQTT topic topic different from the one currently specified."
                      }
                    }
                  },
                  "S3": {
                    "type": "Object",
                    "required": false,
                    "description": "Writes data to an S3 bucket.",
                    "properties": {
                      "BucketName": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::S3::Bucket",
                        "description": "The name of the S3 bucket."
                      },
                      "Key": {
                        "type": "String",
                        "required": true,
                        "description": "The object key (the name of an object in the S3 bucket)."
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::IAM::Role",
                        "description": "The ARN of the IAM role that grants access to Amazon S3."
                      }
                    }
                  },
                  "Sns": {
                    "type": "Object",
                    "required": false,
                    "description": "Publishes data to an SNS topic.",
                    "properties": {
                      "MessageFormat": {
                        "type": "String",
                        "required": false,
                        "description": "The format of the published message."
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::IAM::Role",
                        "description": "The ARN of the IAM role that grants access to Amazon S3."
                      },
                      "TargetArn": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::SNS::Topic",
                        "description": "The ARN of the Amazon SNS topic."
                      }
                    }
                  },
                  "Sqs": {
                    "type": "Object",
                    "required": false,
                    "description": "Publishes data to an SQS queue.",
                    "properties": {
                      "QueueUrl": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::SQS::Queue",
                        "description": "The URL of the Amazon Simple Queue Service (Amazon SQS) queue."
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::IAM::Role",
                        "description": "The ARN of the IAM role that grants access to Amazon S3."
                      },
                      "UseBase64": {
                        "type": "String",
                        "required": false,
                        "description": "Specifies whether Base64 encoding should be used."
                      }
                    }
                  },
                  "DynamoDBv2": {
                    "type": "Object",
                    "required": false,
                    "description": "Writes data to a DynamoDB table.",
                    "properties": {
                      "PutItem": {
                        "type": "Object",
                        "required": false,
                        "description": "Specifies the database table to which to write the item for an AWS IoT topic rule.",
                        "properties": {
                          "TableName": {
                            "type": "String",
                            "required": true,
                            "resource-ref-type": "AWS::DynamoDB::Table",
                            "description": "The name of the DynamoDB table."
                          }
                        }
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": false,
                        "resource-ref-type": "AWS::IAM::Role",
                        "description": "The IAM role that allows access to the DynamoDB table. At a minimum, the role must allow the dynamoDB:PutItem IAM action."
                      }
                    }
                  },
                  "IotAnalytics": {
                    "type": "Object",
                    "required": false,
                    "description": "Sends message data to an AWS IoT Analytics channel.",
                    "properties": {
                      "ChannelName": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the AWS IoT Analytics channel to which message data will be sent.",
                        "resource-ref-type": "AWS::IoTAnalytics::Channel"
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "description": "The ARN of the role which has a policy that grants AWS IoT Analytics permission to send message data via AWS IoT Analytics (iotanalytics:BatchPutMessage).",
                        "resource-ref-type": "AWS::IAM::Role"
                      }
                    }
                  },
                  "StepFunctions": {
                    "type": "Object",
                    "required": false,
                    "description": "Starts execution of a Step Functions state machine.",
                    "properties": {
                      "ExecutionNamePrefix": {
                        "type": "String",
                        "required": false,
                        "description": "A name will be given to the state machine execution consisting of this prefix followed by a UUID. "
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "description": "The ARN of the role that grants IoT permission to start execution of a state machine.",
                        "resource-ref-type": "AWS::IAM::Role"
                      },
                      "StateMachineName": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the Step Functions state machine whose execution will be started.",
                        "resource-ref-type": "AWS::StepFunctions::StateMachine"
                      }
                    }
                  }
                }
              },
              "AwsIotSqlVersion": {
                "type": "String",
                "required": false,
                "description": "The version of the SQL rules engine to use when evaluating the rule."
              },
              "Description": {
                "type": "String",
                "required": false,
                "description": "The description of the rule."
              },
              "RuleDisabled": {
                "type": "Boolean",
                "required": true,
                "description": "Specifies whether the rule is disabled."
              },
              "Sql": {
                "type": "String",
                "required": true,
                "description": "The SQL statement that queries the topic."
              },
              "ErrorAction": {
                "type": "Object",
                "required": false,
                "description": "The action to take when an error occurs.",
                "properties": {
                  "CloudwatchAlarm": {
                    "type": "Object",
                    "required": false,
                    "description": "Changes the state of a CloudWatch alarm.",
                    "properties": {
                      "AlarmName": {
                        "type": "String",
                        "required": true,
                        "description": "The CloudWatch alarm name.",
                        "resource-ref-type": "AWS::CloudWatch::Alarm"
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "description": "The IAM role that allows access to the CloudWatch alarm.",
                        "resource-ref-type": "AWS::IAM::Role"
                      },
                      "StateReason": {
                        "type": "String",
                        "required": true,
                        "description": "The reason for the change of the alarm state."
                      },
                      "StateValue": {
                        "type": "String",
                        "required": true,
                        "description": "The value of the alarm state."
                      }
                    }
                  },
                  "CloudwatchMetric": {
                    "type": "Object",
                    "required": false,
                    "description": "Captures a CloudWatch metric.",
                    "properties": {
                      "MetricName": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the CloudWatch metric."
                      },
                      "MetricNamespace": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the CloudWatch metric namespace."
                      },
                      "MetricTimestamp": {
                        "type": "String",
                        "required": false,
                        "description": "An optional Unix timestamp."
                      },
                      "MetricUnit": {
                        "type": "String",
                        "required": true,
                        "description": "The metric unit supported by Amazon CloudWatch."
                      },
                      "MetricValue": {
                        "type": "String",
                        "required": true,
                        "description": "The value to publish to the metric."
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "description": "The ARN of the IAM role that grants access to the CloudWatch metric.",
                        "resource-ref-type": "AWS::IAM::Role"
                      }
                    }
                  },
                  "DynamoDB": {
                    "type": "Object",
                    "required": false,
                    "description": "Writes data to a DynamoDB table.",
                    "properties": {
                      "HashKeyField": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the hash key."
                      },
                      "HashKeyType": {
                        "type": "String",
                        "required": false,
                        "description": "The data type of the hash key (also called the partition key)."
                      },
                      "HashKeyValue": {
                        "type": "String",
                        "required": true,
                        "description": "The value of the hash key."
                      },
                      "PayloadField": {
                        "type": "String",
                        "required": false,
                        "description": "The name of the column in the DynamoDB table that contains the result of the query."
                      },
                      "RangeKeyField": {
                        "type": "String",
                        "required": false,
                        "description": "The name of the range key."
                      },
                      "RangeKeyType": {
                        "type": "String",
                        "required": false,
                        "description": "The data type of the range key (also called the sort key)."
                      },
                      "RangeKeyValue": {
                        "type": "String",
                        "required": false,
                        "description": "The value of the range key."
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "description": "The ARN of the IAM role that grants access to the DynamoDB table.",
                        "resource-ref-type": "AWS::IAM::Role"
                      },
                      "TableName": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the DynamoDB table.",
                        "resource-ref-type": "AWS::DynamoDB::Table"
                      }
                    }
                  },
                  "DynamoDBv2": {
                    "type": "Object",
                    "required": false,
                    "description": "Writes data to a DynamoDB table.",
                    "properties": {
                      "PutItem": {
                        "type": "Object",
                        "required": false,
                        "description": "Specifies the database table to which to write the item for an AWS IoT topic rule.",
                        "properties": {
                          "TableName": {
                            "type": "String",
                            "required": true,
                            "description": "The name of the DynamoDB table.",
                            "resource-ref-type": "AWS::DynamoDB::Table"
                          }
                        }
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": false,
                        "description": "The IAM role that allows access to the DynamoDB table.",
                        "resource-ref-type": "AWS::IAM::Role"
                      }
                    }
                  },
                  "Elasticsearch": {
                    "type": "Object",
                    "required": false,
                    "description": "Writes data to an Elasticsearch domain.",
                    "properties": {
                      "Endpoint": {
                        "type": "String",
                        "required": true,
                        "description": "The endpoint of your Elasticsearch domain."
                      },
                      "Id": {
                        "type": "String",
                        "required": true,
                        "description": "A unique identifier for the stored data."
                      },
                      "Index": {
                        "type": "String",
                        "required": true,
                        "description": "The Elasticsearch index where the data is stored."
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "description": "The ARN of the IAM role that grants access to Elasticsearch.",
                        "resource-ref-type": "AWS::IAM::Role"
                      },
                      "Type": {
                        "type": "String",
                        "required": true,
                        "description": "The type of stored data."
                      }
                    }
                  },
                  "Firehose": {
                    "type": "Object",
                    "required": false,
                    "description": "Writes data to a Kinesis Data Firehose stream.",
                    "properties": {
                      "DeliveryStreamName": {
                        "type": "String",
                        "required": true,
                        "description": "The delivery stream name.",
                        "resource-ref-type": "AWS::KinesisFirehose::DeliveryStream"
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "description": "The Amazon Resource Name (ARN) of the IAM role that grants access to the Kinesis Data Firehose stream.",
                        "resource-ref-type": "AWS::IAM::Role"
                      },
                      "Separator": {
                        "type": "String",
                        "required": false,
                        "description": "A character separator that's used to separate records written to the Kinesis Data Firehose stream. "
                      }
                    }
                  },
                  "IotAnalytics": {
                    "type": "Object",
                    "required": false,
                    "description": "Sends message data to an AWS IoT Analytics channel.",
                    "properties": {
                      "ChannelName": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the AWS IoT Analytics channel to which message data will be sent.",
                        "resource-ref-type": "AWS::IoTAnalytics::Channel"
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "description": "The ARN of the role which has a policy that grants AWS IoT Analytics permission to send message data via AWS IoT Analytics (iotanalytics:BatchPutMessage).",
                        "resource-ref-type": "AWS::IAM::Role"
                      }
                    }
                  },
                  "Kinesis": {
                    "type": "Object",
                    "required": false,
                    "description": "Writes data to an Kinesis stream.",
                    "properties": {
                      "PartitionKey": {
                        "type": "String",
                        "required": false,
                        "description": "The partition key (the grouping of data by shard within an Kinesis stream)."
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "description": "The ARN of the IAM role that grants access to an Kinesis stream.",
                        "resource-ref-type": "AWS::IAM::Role"
                      },
                      "StreamName": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the Kinesis stream.",
                        "resource-ref-type": "AWS::Kinesis::Stream"
                      }
                    }
                  },
                  "Lambda": {
                    "type": "Object",
                    "required": false,
                    "description": "Invokes a Lambda function.",
                    "properties": {
                      "FunctionArn": {
                        "type": "String",
                        "required": false,
                        "description": "The ARN of the Lambda function.",
                        "resource-ref-type": "AWS::Lambda::Function"
                      }
                    }
                  },
                  "Republish": {
                    "type": "Object",
                    "required": false,
                    "description": "Publishes data to an MQ Telemetry Transport (MQTT) topic different from the one currently specified.",
                    "properties": {
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "description": "The ARN of the IAM role that grants publishing access.",
                        "resource-ref-type": "AWS::IAM::Role"
                      },
                      "Topic": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the MQTT topic topic different from the one currently specified."
                      }
                    }
                  },
                  "S3": {
                    "type": "Object",
                    "required": false,
                    "description": "Writes data to an S3 bucket.",
                    "properties": {
                      "BucketName": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the S3 bucket.",
                        "resource-ref-type": "AWS::S3::Bucket"
                      },
                      "Key": {
                        "type": "String",
                        "required": true,
                        "description": "The object key (the name of an object in the S3 bucket)."
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "description": "The ARN of the IAM role that grants access to Amazon S3.",
                        "resource-ref-type": "AWS::IAM::Role"
                      }
                    }
                  },
                  "Sns": {
                    "type": "Object",
                    "required": false,
                    "description": "Publishes data to an SNS topic.",
                    "properties": {
                      "MessageFormat": {
                        "type": "String",
                        "required": false,
                        "description": "The format of the published message."
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "description": "The ARN of the IAM role that grants access to Amazon SNS.",
                        "resource-ref-type": "AWS::IAM::Role"
                      },
                      "TargetArn": {
                        "type": "String",
                        "required": true,
                        "description": "The ARN of the Amazon SNS topic.",
                        "resource-ref-type": "AWS::SNS::Topic"
                      }
                    }
                  },
                  "Sqs": {
                    "type": "Object",
                    "required": false,
                    "description": "Publishes data to an SQS queue.",
                    "properties": {
                      "QueueUrl": {
                        "type": "String",
                        "required": true,
                        "description": "The URL of the Amazon Simple Queue Service (Amazon SQS) queue.",
                        "resource-ref-type": "The URL of the Amazon Simple Queue Service (Amazon SQS) queue."
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "description": "The ARN of the IAM role that grants access to Amazon SQS.",
                        "resource-ref-type": "AWS::IAM::Role"
                      },
                      "UseBase64": {
                        "type": "Boolean",
                        "required": false,
                        "description": "Specifies whether Base64 encoding should be used."
                      }
                    }
                  },
                  "StepFunctions": {
                    "type": "Object",
                    "required": false,
                    "description": "Starts execution of a Step Functions state machine.",
                    "properties": {
                      "ExecutionNamePrefix": {
                        "type": "String",
                        "required": false,
                        "description": "A name will be given to the state machine execution consisting of this prefix followed by a UUID. "
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "description": "The ARN of the role that grants IoT permission to start execution of a state machine.",
                        "resource-ref-type": "AWS::IAM::Role"
                      },
                      "StateMachineName": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the Step Functions state machine whose execution will be started.",
                        "resource-ref-type": "AWS::StepFunctions::StateMachine"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::KinesisAnalytics::Application": {
    "type": "Object",
    "required": false,
    "description": "The AWS::KinesisAnalytics::Application resource creates an Amazon Kinesis Data Analytics application.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::KinesisAnalytics::Application resource creates an Amazon Kinesis Data Analytics application."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ApplicationName": {
            "type": "String",
            "required": false,
            "description": "The name of your Amazon Kinesis Data Analytics application."
          },
          "Inputs": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "Use this parameter to configure the application input.",
            "properties": {
              "NamePrefix": {
                "type": "String",
                "required": true,
                "description": "The name prefix to use when creating the in-application streams."
              },
              "InputSchema": {
                "type": "Object",
                "required": true,
                "description": "Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.",
                "properties": {
                  "RecordEncoding": {
                    "type": "String",
                    "required": false,
                    "description": "Specifies the encoding of the records in the streaming source; for example, UTF-8."
                  },
                  "RecordColumns": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": true,
                    "description": "A list of RecordColumn objects.",
                    "properties": {
                      "Mapping": {
                        "type": "String",
                        "required": false,
                        "description": "Reference to the data element in the streaming input of the reference data source."
                      },
                      "SqlType": {
                        "type": "String",
                        "required": true,
                        "description": "The type of column created in the in-application input stream or reference table."
                      },
                      "Name": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the column created in the in-application input stream or reference table."
                      }
                    }
                  },
                  "RecordFormat": {
                    "type": "Object",
                    "required": true,
                    "description": "Specifies the format of the records on the streaming source.",
                    "properties": {
                      "MappingParameters": {
                        "type": "Object",
                        "required": false,
                        "description": "When configuring application input at the time of creating or updating an application, provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.",
                        "properties": {
                          "JSONMappingParameters": {
                            "type": "Object",
                            "required": false,
                            "description": "Provides additional mapping information when JSON is the record format on the streaming source.",
                            "properties": {
                              "RecordRowPath": {
                                "type": "String",
                                "required": true,
                                "description": "The path to the top-level parent that contains the records"
                              }
                            }
                          },
                          "CSVMappingParameters": {
                            "type": "Object",
                            "required": false,
                            "description": "Provides additional mapping information when the record format uses delimiters (for example, CSV).",
                            "properties": {
                              "RecordRowDelimiter": {
                                "type": "String",
                                "required": true,
                                "description": "The row delimiter."
                              },
                              "RecordColumnDelimiter": {
                                "type": "String",
                                "required": true,
                                "description": "The column delimiter."
                              }
                            }
                          }
                        }
                      },
                      "RecordFormatType": {
                        "type": "String",
                        "required": true,
                        "description": "The type of record format",
                        "allowed-values": [
                          "*",
                          "CSV",
                          "JSON"
                        ]
                      }
                    }
                  }
                }
              },
              "KinesisStreamsInput": {
                "type": "Object",
                "required": false,
                "description": "If the streaming source is an Amazon Kinesis stream, identifies the stream's ARN and an IAM role that enables Kinesis Data Analytics to access the stream on your behalf.",
                "properties": {
                  "ResourceARN": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::Kinesis::Stream",
                    "description": "The Amazon Resource Name (ARN) of the input Amazon Kinesis stream to read."
                  },
                  "RoleARN": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::IAM::Role",
                    "description": "The ARN of the IAM role that Kinesis Data Analytics can assume to access the stream on your behalf."
                  }
                }
              },
              "KinesisFirehoseInput": {
                "type": "Object",
                "required": false,
                "description": "If the streaming source is an Amazon Kinesis Firehose delivery stream, identifies the delivery stream's Amazon Resource Name (ARN) and an IAM role that enables Kinesis Data Analytics to access the stream on your behalf.",
                "properties": {
                  "ResourceARN": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::KinesisFirehose::DeliveryStream",
                    "description": "The Amazon Resource Name (ARN) of the input Kinesis Firehose delivery stream."
                  },
                  "RoleARN": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::IAM::Role",
                    "description": "The ARN of the IAM role that Kinesis Data Analytics can assume to access the stream on your behalf."
                  }
                }
              },
              "InputProcessingConfiguration": {
                "type": "Object",
                "required": false,
                "description": "The input processing configuration for the input.",
                "properties": {
                  "InputLambdaProcessor": {
                    "type": "Object",
                    "required": false,
                    "description": "The InputLambdaProcessor that is used to preprocess the records in the stream before they are processed by your application code.",
                    "properties": {
                      "ResourceARN": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::Lambda::Function",
                        "description": "The ARN of the AWS Lambda function that operates on records in the stream."
                      },
                      "RoleARN": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::IAM::Role",
                        "description": "The ARN of the IAM role that is used to access the AWS Lambda function."
                      }
                    }
                  }
                }
              },
              "InputParallelism": {
                "type": "Object",
                "required": false,
                "description": "Describes the number of in-application streams to create.",
                "properties": {
                  "Count": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of in-application streams to create."
                  }
                }
              }
            }
          },
          "ApplicationDescription": {
            "type": "String",
            "required": false,
            "description": "The summary description of the application."
          },
          "ApplicationCode": {
            "type": "String",
            "required": false,
            "description": "One or more SQL statements that read input data, transform it, and generate output."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::KinesisAnalytics::ApplicationOutput": {
    "type": "Object",
    "required": false,
    "description": "The AWS::KinesisAnalytics::ApplicationOutput resource adds an external destination to your Amazon Kinesis Data Analytics application.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::KinesisAnalytics::ApplicationOutput resource adds an external destination to your Amazon Kinesis Data Analytics application."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ApplicationName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::KinesisAnalytics::Application",
            "description": "The name of the application to which you want to add the output configuration."
          },
          "Output": {
            "type": "Object",
            "required": true,
            "description": "An array of objects, each describing one output configuration.",
            "properties": {
              "DestinationSchema": {
                "type": "Object",
                "required": true,
                "description": "The data format when records are written to the destination.",
                "properties": {
                  "RecordFormatType": {
                    "type": "String",
                    "required": false,
                    "description": "Specifies the format of the records on the output stream."
                  }
                }
              },
              "KinesisFirehoseOutput": {
                "type": "Object",
                "required": false,
                "description": "Identifies an Amazon Kinesis Data Firehose delivery stream as the destination.",
                "properties": {
                  "ResourceARN": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::KinesisFirehose::DeliveryStream",
                    "description": "The Amazon Resource Name (ARN) of the destination Amazon Kinesis Data Firehose delivery stream to write to."
                  },
                  "RoleARN": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::IAM::Role",
                    "description": "The ARN of the IAM role that Amazon Kinesis Data Analytics can assume to write to the destination stream on your behalf."
                  }
                }
              },
              "KinesisStreamsOutput": {
                "type": "Object",
                "required": false,
                "description": "Identifies an Amazon Kinesis stream as the destination.",
                "properties": {
                  "ResourceARN": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::Kinesis::Stream",
                    "description": "The Amazon Resource Name (ARN) of the destination Amazon Kinesis stream to write to."
                  },
                  "RoleARN": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::IAM::Role",
                    "description": "The ARN of the IAM role that Amazon Kinesis Data Analytics can assume to write to the destination stream on your behalf."
                  }
                }
              },
              "Name": {
                "type": "String",
                "required": false,
                "description": "The name of the in-application stream."
              },
              "LambdaOutput": {
                "type": "Object",
                "required": false,
                "description": "Identifies a Lambda function as the destination.",
                "properties": {
                  "ResourceARN": {
                    "type": "String",
                    "required": true,
                    "description": "The Amazon Resource Name (ARN) of the destination Amazon Lambda function to write to.",
                    "resource-ref-type": "AWS::Lambda::Function"
                  },
                  "RoleARN": {
                    "type": "String",
                    "required": true,
                    "description": "The ARN of the IAM role that Amazon Kinesis Data Analytics can assume to write to the destination function on your behalf.",
                    "resource-ref-type": [
                      "AWS::IAM::Role"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::KinesisAnalytics::ApplicationReferenceDataSource": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS CloudFormation AWS::KinesisAnalytics::ApplicationReferenceDataSource resource to add a reference data source to an existing Amazon Kinesis Data Analytics application.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS CloudFormation AWS::KinesisAnalytics::ApplicationReferenceDataSource resource to add a reference data source to an existing Amazon Kinesis Data Analytics application."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ApplicationName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::KinesisAnalytics::Application",
            "description": "The name of an existing application."
          },
          "ReferenceDataSource": {
            "type": "Object",
            "required": true,
            "description": "The reference data source, which is an object in your Amazon Simple Storage Service (Amazon S3) bucket.",
            "properties": {
              "ReferenceSchema": {
                "type": "Object",
                "required": true,
                "description": "Describes the format of the data in the streaming source, and how each data element maps to corresponding columns that are created in the in-application stream.",
                "properties": {
                  "RecordEncoding": {
                    "type": "String",
                    "required": false,
                    "description": "Specifies the encoding of the records in the streaming source; For example, UTF-8."
                  },
                  "RecordColumns": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": true,
                    "description": "A list of Amazon Kinesis Data Analytics ApplicationReferenceDataSource RecordColumn objects.",
                    "properties": {
                      "Mapping": {
                        "type": "String",
                        "required": false,
                        "description": "The reference to the data element in the streaming input of the reference data source."
                      },
                      "SqlType": {
                        "type": "String",
                        "required": true,
                        "description": "The SQL data type of the column created in the in-application input stream or reference table."
                      },
                      "Name": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the column created in the in-application input stream or reference table."
                      }
                    }
                  },
                  "RecordFormat": {
                    "type": "Object",
                    "required": true,
                    "description": "Specifies the format of the records on the streaming source.",
                    "properties": {
                      "MappingParameters": {
                        "type": "Object",
                        "required": false,
                        "description": "When configuring application input at the time of creating or updating an application, provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.",
                        "properties": {
                          "JSONMappingParameters": {
                            "type": "Object",
                            "required": false,
                            "description": "Provides additional mapping information when JSON is the record format on the streaming source.",
                            "properties": {
                              "RecordRowPath": {
                                "type": "String",
                                "required": true,
                                "description": "The path to the top-level parent that contains the records"
                              }
                            }
                          },
                          "CSVMappingParameters": {
                            "type": "Object",
                            "required": false,
                            "description": "Provides additional mapping information when the record format uses delimiters (for example, CSV).",
                            "properties": {
                              "RecordRowDelimiter": {
                                "type": "String",
                                "required": true,
                                "description": "The row delimiter."
                              },
                              "RecordColumnDelimiter": {
                                "type": "String",
                                "required": true,
                                "description": "The column delimiter."
                              }
                            }
                          }
                        }
                      },
                      "RecordFormatType": {
                        "type": "String",
                        "required": true,
                        "description": "The type of record format",
                        "allowed-values": [
                          "*",
                          "CSV",
                          "JSON"
                        ]
                      }
                    }
                  }
                }
              },
              "TableName": {
                "type": "String",
                "required": false,
                "description": "The name of the in-application table to create."
              },
              "S3ReferenceDataSource": {
                "type": "Object",
                "required": false,
                "description": "Identifies the Amazon S3 bucket and object that contains the reference data.",
                "properties": {
                  "BucketARN": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::S3::Bucket",
                    "description": "The Amazon Resource Name (ARN) of the Amazon S3 bucket."
                  },
                  "FileKey": {
                    "type": "String",
                    "required": true,
                    "description": "The object key name containing reference data."
                  },
                  "ReferenceRoleARN": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::IAM::Role",
                    "description": "The ARN of the IAM role that the service can assume to read data on your behalf."
                  }
                }
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::KinesisFirehose::DeliveryStream": {
    "type": "Object",
    "required": false,
    "description": "The AWS::KinesisFirehose::DeliveryStream resource creates an Amazon Kinesis Firehose (Firehose) delivery stream that delivers real-time streaming data to an Amazon Simple Storage Service (Amazon S3), Amazon Redshift, or Amazon Elasticsearch Service (Amazon ES) destination.",
    "return-values": [
      {
        "name": "Arn",
        "description": "The Amazon Resource Name (ARN) of the delivery stream, such as arn:aws:firehose:us-east-2:123456789012:deliverystream/delivery-stream-name."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::KinesisFirehose::DeliveryStream resource creates an Amazon Kinesis Firehose (Firehose) delivery stream that delivers real-time streaming data to an Amazon Simple Storage Service (Amazon S3), Amazon Redshift, or Amazon Elasticsearch Service (Amazon ES) destination."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DeliveryStreamName": {
            "type": "String",
            "required": false,
            "description": "A name for the delivery stream."
          },
          "ElasticsearchDestinationConfiguration": {
            "type": "Object",
            "required": false,
            "description": "An Amazon ES destination for the delivery stream.",
            "properties": {
              "BufferingHints": {
                "type": "Object",
                "required": true,
                "description": "Configures how Firehose buffers incoming data while delivering it to the Amazon ES domain.",
                "properties": {
                  "IntervalInSeconds": {
                    "type": "Number",
                    "required": true,
                    "description": "The length of time, in seconds, that Firehose buffers incoming data before delivering it to the destination."
                  },
                  "SizeInMBs": {
                    "type": "Number",
                    "required": true,
                    "description": "The size of the buffer, in MBs, that Firehose uses for incoming data before delivering it to the destination."
                  }
                }
              },
              "DomainARN": {
                "type": "String",
                "required": true,
                "description": "The Amazon Resource Name (ARN) of the Amazon ES domain that Firehose delivers data to."
              },
              "IndexName": {
                "type": "String",
                "required": true,
                "description": "The name of the Elasticsearch index to which Firehose adds data for indexing."
              },
              "IndexRotationPeriod": {
                "type": "String",
                "required": true,
                "description": "The frequency of Elasticsearch index rotation. If you enable index rotation, Firehose appends a portion of the UTC arrival timestamp to the specified index name, and rotates the appended timestamp accordingly."
              },
              "RetryOptions": {
                "type": "Object",
                "required": false,
                "description": "The retry behavior when Firehose is unable to deliver data to Amazon ES.",
                "properties": {
                  "DurationInSeconds": {
                    "type": "Number",
                    "required": true,
                    "description": "After an initial failure to deliver to Amazon ES, the total amount of time during which Firehose re-attempts delivery (including the first attempt)."
                  }
                }
              },
              "RoleARN": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::IAM::Role",
                "description": "The ARN of the AWS Identity and Access Management (IAM) role that grants Firehose access to your S3 bucket, AWS KMS (if you enable data encryption), and Amazon CloudWatch Logs (if you enable logging)."
              },
              "S3BackupMode": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "*",
                  "FailedDocumentsOnly",
                  "AllDocuments"
                ],
                "description": "The condition under which Firehose delivers data to Amazon Simple Storage Service (Amazon S3). You can send Amazon S3 all documents (all data) or only the documents that Firehose could not deliver to the Amazon ES destination."
              },
              "TypeName": {
                "type": "String",
                "required": true,
                "description": "The Elasticsearch type name."
              },
              "ProcessingConfiguration": {
                "type": "Object",
                "required": false,
                "description": "The data processing configuration for the Kinesis Firehose delivery stream.",
                "properties": {
                  "Enabled": {
                    "type": "Boolean",
                    "required": true,
                    "description": "Indicates whether data processing is enabled (true) or disabled (false)."
                  },
                  "Processors": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": true,
                    "description": "The data processors.",
                    "properties": {
                      "Parameters": {
                        "type": "Array",
                        "array-type": "Object",
                        "required": true,
                        "description": "The processor parameters.",
                        "properties": {
                          "ParameterName": {
                            "type": "String",
                            "required": true,
                            "description": "The name of the parameter."
                          },
                          "ParameterValue": {
                            "type": "String",
                            "required": true,
                            "description": "ParameterValue"
                          }
                        }
                      },
                      "Type": {
                        "type": "String",
                        "required": true,
                        "description": "The type of processor.",
                        "allowed-values": [
                          "*",
                          "Lambda"
                        ]
                      }
                    }
                  }
                }
              },
              "CloudWatchLoggingOptions": {
                "type": "Object",
                "required": false,
                "description": "The Amazon CloudWatch Logs logging options for the delivery stream.",
                "properties": {
                  "Enabled": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether CloudWatch Logs logging is enabled."
                  },
                  "LogGroupName": {
                    "type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::Logs::LogGroup",
                    "description": "The name of the CloudWatch Logs log group that contains the log stream that Firehose will use."
                  },
                  "LogStreamName": {
                    "type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::Logs::LogStream",
                    "description": "The name of the CloudWatch Logs log stream that Firehose uses to send logs about data delivery."
                  }
                }
              },
              "S3Configuration": {
                "type": "Object",
                "required": true,
                "description": "Describes the configuration of a destination in Amazon S3.",
                "properties": {
                  "BucketARN": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::S3::Bucket",
                    "description": "The ARN of the S3 bucket."
                  },
                  "BufferingHints": {
                    "type": "Object",
                    "required": true,
                    "description": "The buffering option. If no value is specified, BufferingHints object default values are used.",
                    "properties": {
                      "IntervalInSeconds": {
                        "type": "Number",
                        "required": false,
                        "description": "Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300."
                      },
                      "SizeInMBs": {
                        "type": "Number",
                        "required": false,
                        "description": "Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5."
                      }
                    }
                  },
                  "CompressionFormat": {
                    "type": "String",
                    "required": false,
                    "allowed-values": [
                      "*",
                      "UNCOMPRESSED",
                      "GZIP",
                      "ZIP",
                      "Snappy"
                    ],
                    "description": "The name of the CloudWatch Logs log stream that Firehose uses to send logs about data delivery."
                  },
                  "EncryptionConfiguration": {
                    "type": "Object",
                    "required": false,
                    "description": "The encryption configuration. If no value is specified, the default is no encryption.",
                    "properties": {
                      "KMSEncryptionConfig": {
                        "type": "Object",
                        "required": false,
                        "description": "The encryption key.",
                        "properties": {
                          "AWSKMSKeyARN": {
                            "type": "String",
                            "required": true,
                            "resource-ref-type": "AWS::KMS::Key",
                            "description": "The ARN of the encryption key. Must belong to the same region as the destination Amazon S3 bucket."
                          }
                        }
                      },
                      "NoEncryptionConfig": {
                        "type": "String",
                        "required": false,
                        "allowed-values": [
                          "*",
                          "NoEncryption"
                        ],
                        "description": "Specifically override existing encryption information to ensure no encryption is used."
                      }
                    }
                  },
                  "Prefix": {
                    "type": "String",
                    "required": false,
                    "description": "The \"YYYY/MM/DD/HH\" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix."
                  },
                  "RoleARN": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::IAM::Role",
                    "description": "The ARN of the AWS credentials."
                  },
                  "CloudWatchLoggingOptions": {
                    "type": "Object",
                    "required": false,
                    "description": "The Amazon CloudWatch Logs logging options for the delivery stream.",
                    "properties": {
                      "Enabled": {
                        "type": "Boolean",
                        "required": false,
                        "description": "Indicates whether CloudWatch Logs logging is enabled."
                      },
                      "LogGroupName": {
                        "type": "String",
                        "required": false,
                        "resource-ref-type": "AWS::Logs::LogGroup",
                        "description": "The name of the CloudWatch Logs log group that contains the log stream that Firehose will use."
                      },
                      "LogStreamName": {
                        "type": "String",
                        "required": false,
                        "resource-ref-type": "AWS::Logs::LogStream",
                        "description": "The name of the CloudWatch Logs log stream that Firehose uses to send logs about data delivery."
                      }
                    }
                  }
                }
              }
            }
          },
          "RedshiftDestinationConfiguration": {
            "type": "Object",
            "required": false,
            "description": "An Amazon Redshift destination for the delivery stream.",
            "properties": {
              "ClusterJDBCURL": {
                "type": "String",
                "required": true,
                "description": "The connection string that Firehose uses to connect to the Amazon Redshift cluster."
              },
              "CopyCommand": {
                "type": "Object",
                "required": true,
                "description": "Configures the Amazon Redshift COPY command that Firehose uses to load data into the cluster from the S3 bucket.",
                "properties": {
                  "CopyOptions": {
                    "type": "String",
                    "required": false,
                    "description": "Parameters to use with the Amazon Redshift COPY command."
                  },
                  "DataTableColumns": {
                    "type": "String",
                    "required": false,
                    "description": "A comma-separated list of the column names in the table that Firehose copies data to."
                  },
                  "DataTableName": {
                    "type": "String",
                    "required": true,
                    "description": "The name of the table where Firehose adds the copied data."
                  }
                }
              },
              "Password": {
                "type": "String",
                "required": true,
                "description": "The password for the Amazon Redshift user that you specified in the Username property."
              },
              "RoleARN": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::IAM::Role",
                "description": "The ARN of the AWS Identity and Access Management (IAM) role that grants Firehose access to your S3 bucket and AWS KMS (if you enable data encryption)."
              },
              "Username": {
                "type": "String",
                "required": true,
                "description": "The Amazon Redshift user that has permission to access the Amazon Redshift cluster. This user must have INSERT privileges for copying data from the S3 bucket to the cluster."
              },
              "ProcessingConfiguration": {
                "type": "Object",
                "required": false,
                "description": "The data processing configuration for the Kinesis Firehose delivery stream.",
                "properties": {
                  "Enabled": {
                    "type": "Boolean",
                    "required": true,
                    "description": "Indicates whether data processing is enabled (true) or disabled (false)."
                  },
                  "Processors": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": true,
                    "description": "The data processors.",
                    "properties": {
                      "Parameters": {
                        "type": "Array",
                        "array-type": "Object",
                        "required": true,
                        "description": "The processor parameters.",
                        "properties": {
                          "ParameterName": {
                            "type": "String",
                            "required": true,
                            "description": "The name of the parameter."
                          },
                          "ParameterValue": {
                            "type": "String",
                            "required": true,
                            "description": "The parameter value."
                          }
                        }
                      },
                      "Type": {
                        "type": "String",
                        "required": true,
                        "description": "The type of processor.",
                        "allowed-values": [
                          "*",
                          "Lambda"
                        ]
                      }
                    }
                  }
                }
              },
              "CloudWatchLoggingOptions": {
                "type": "Object",
                "required": false,
                "description": "The Amazon CloudWatch Logs logging options for the delivery stream.",
                "properties": {
                  "Enabled": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether CloudWatch Logs logging is enabled."
                  },
                  "LogGroupName": {
                    "type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::Logs::LogGroup",
                    "description": "The name of the CloudWatch Logs log group that contains the log stream that Firehose will use."
                  },
                  "LogStreamName": {
                    "type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::Logs::LogStream",
                    "description": "The name of the CloudWatch Logs log stream that Firehose uses to send logs about data delivery."
                  }
                }
              },
              "S3Configuration": {
                "type": "Object",
                "required": true,
                "description": "Describes the configuration of a destination in Amazon S3.",
                "properties": {
                  "BucketARN": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::S3::Bucket",
                    "description": "The ARN of the S3 bucket."
                  },
                  "BufferingHints": {
                    "type": "Object",
                    "required": true,
                    "description": "The buffering option. If no value is specified, BufferingHints object default values are used.",
                    "properties": {
                      "IntervalInSeconds": {
                        "type": "Number",
                        "required": false,
                        "description": "Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300."
                      },
                      "SizeInMBs": {
                        "type": "Number",
                        "required": false,
                        "description": "Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5."
                      }
                    }
                  },
                  "CompressionFormat": {
                    "type": "String",
                    "required": false,
                    "allowed-values": [
                      "*",
                      "UNCOMPRESSED",
                      "GZIP",
                      "ZIP",
                      "Snappy"
                    ],
                    "description": "The name of the CloudWatch Logs log stream that Firehose uses to send logs about data delivery."
                  },
                  "EncryptionConfiguration": {
                    "type": "Object",
                    "required": false,
                    "description": "The encryption configuration. If no value is specified, the default is no encryption.",
                    "properties": {
                      "KMSEncryptionConfig": {
                        "type": "Object",
                        "required": false,
                        "description": "The encryption key.",
                        "properties": {
                          "AWSKMSKeyARN": {
                            "type": "String",
                            "required": true,
                            "resource-ref-type": "AWS::KMS::Key",
                            "description": "The ARN of the encryption key. Must belong to the same region as the destination Amazon S3 bucket."
                          }
                        }
                      },
                      "NoEncryptionConfig": {
                        "type": "String",
                        "required": false,
                        "allowed-values": [
                          "*",
                          "NoEncryption"
                        ],
                        "description": "Specifically override existing encryption information to ensure no encryption is used."
                      }
                    }
                  },
                  "Prefix": {
                    "type": "String",
                    "required": false,
                    "description": "The \"YYYY/MM/DD/HH\" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix."
                  },
                  "RoleARN": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::IAM::Role",
                    "description": "The ARN of the AWS credentials."
                  },
                  "CloudWatchLoggingOptions": {
                    "type": "Object",
                    "required": false,
                    "description": "The Amazon CloudWatch Logs logging options for the delivery stream.",
                    "properties": {
                      "Enabled": {
                        "type": "Boolean",
                        "required": false,
                        "description": "Indicates whether CloudWatch Logs logging is enabled."
                      },
                      "LogGroupName": {
                        "type": "String",
                        "required": false,
                        "resource-ref-type": "AWS::Logs::LogGroup",
                        "description": "The name of the CloudWatch Logs log group that contains the log stream that Firehose will use."
                      },
                      "LogStreamName": {
                        "type": "String",
                        "required": false,
                        "resource-ref-type": "AWS::Logs::LogStream",
                        "description": "The name of the CloudWatch Logs log stream that Firehose uses to send logs about data delivery."
                      }
                    }
                  }
                }
              }
            }
          },
          "DeliveryStreamType": {
            "type": "String",
            "required": false,
            "description": "The delivery stream type.",
            "allowed-values": [
              "*",
              "DirectPut",
              "KinesisStreamAsSource"
            ]
          },
          "ExtendedS3DestinationConfiguration": {
            "type": "Object",
            "required": false,
            "description": "An Amazon S3 destination for the delivery stream.",
            "properties": {
              "BucketARN": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::S3::Bucket",
                "description": "The Amazon Resource Name (ARN) of the Amazon S3 bucket."
              },
              "BufferingHints": {
                "type": "Object",
                "required": true,
                "description": "The buffering option.",
                "properties": {
                  "IntervalInSeconds": {
                    "type": "Number",
                    "required": true,
                    "description": "The length of time, in seconds, that Kinesis Firehose buffers incoming data before delivering it to the destination."
                  },
                  "SizeInMBs": {
                    "type": "Number",
                    "required": true,
                    "description": "The size of the buffer, in MBs, that Kinesis Firehose uses for incoming data before delivering it to the destination."
                  }
                }
              },
              "CloudWatchLoggingOptions": {
                "type": "Object",
                "required": false,
                "description": "The CloudWatch logging options for the Kinesis Firehose delivery stream.",
                "properties": {
                  "Enabled": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether CloudWatch Logs logging is enabled."
                  },
                  "LogGroupName": {
                    "type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::Logs::LogGroup",
                    "description": "The name of the CloudWatch Logs log group that contains the log stream that Kinesis Firehose will use."
                  },
                  "LogStreamName": {
                    "type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::Logs::LogStream",
                    "description": "The name of the CloudWatch Logs log stream that Kinesis Firehose uses to send logs about data delivery."
                  }
                }
              },
              "CompressionFormat": {
                "type": "String",
                "required": true,
                "description": "The compression format for the Kinesis Firehose delivery stream.",
                "allowed-values": [
                  "*",
                  "UNCOMPRESSED",
                  "GZIP",
                  "ZIP",
                  "Snappy"
                ]
              },
              "EncryptionConfiguration": {
                "type": "Object",
                "required": false,
                "description": "The encryption configuration for the Kinesis Firehose delivery stream. The default value is NoEncryption.",
                "properties": {
                  "KMSEncryptionConfig": {
                    "type": "Object",
                    "required": false,
                    "description": "The AWS Key Management Service (AWS KMS) encryption key that Amazon S3 uses to encrypt your data.",
                    "properties": {
                      "AWSKMSKeyARN": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::KMS::Key",
                        "description": "The Amazon Resource Name (ARN) of the AWS KMS encryption key that Amazon S3 uses to encrypt data delivered by the Kinesis Firehose stream."
                      }
                    }
                  },
                  "NoEncryptionConfig": {
                    "type": "String",
                    "required": false,
                    "description": "Disables encryption.",
                    "allowed-values": [
                      "*",
                      "NoEncryption"
                    ]
                  }
                }
              },
              "Prefix": {
                "type": "String",
                "required": true,
                "description": "The YYYY/MM/DD/HH time format prefix is automatically used for delivered Amazon S3 files."
              },
              "ProcessingConfiguration": {
                "type": "Object",
                "required": false,
                "description": "The data processing configuration for the Kinesis Firehose delivery stream.",
                "properties": {
                  "Enabled": {
                    "type": "Boolean",
                    "required": true,
                    "description": "Indicates whether data processing is enabled (true) or disabled (false)."
                  },
                  "Processors": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": true,
                    "description": "The data processors.",
                    "properties": {
                      "Parameters": {
                        "type": "Array",
                        "array-type": "Object",
                        "required": true,
                        "description": "The processor parameters.",
                        "properties": {
                          "ParameterName": {
                            "type": "String",
                            "required": true,
                            "description": "The name of the parameter."
                          },
                          "ParameterValue": {
                            "type": "String",
                            "required": true,
                            "description": "ParameterValue"
                          }
                        }
                      },
                      "Type": {
                        "type": "String",
                        "required": true,
                        "description": "The type of processor.",
                        "allowed-values": [
                          "*",
                          "Lambda"
                        ]
                      }
                    }
                  }
                }
              },
              "RoleARN": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::IAM::Role",
                "description": "The ARN of the AWS credentials."
              },
              "S3BackupConfiguration": {
                "type": "Object",
                "required": false,
                "description": "The configuration for backup in Amazon S3.",
                "properties": {
                  "BucketARN": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::S3::Bucket",
                    "description": "The Amazon Resource Name (ARN) of the Amazon S3 bucket."
                  },
                  "BufferingHints": {
                    "type": "Object",
                    "required": true,
                    "description": "The buffering option.",
                    "properties": {
                      "IntervalInSeconds": {
                        "type": "Number",
                        "required": true,
                        "description": "The length of time, in seconds, that Kinesis Firehose buffers incoming data before delivering it to the destination."
                      },
                      "SizeInMBs": {
                        "type": "Number",
                        "required": true,
                        "description": "The size of the buffer, in MBs, that Kinesis Firehose uses for incoming data before delivering it to the destination."
                      }
                    }
                  },
                  "CloudWatchLoggingOptions": {
                    "type": "Object",
                    "required": false,
                    "description": "The CloudWatch logging options for the Kinesis Firehose delivery stream.",
                    "properties": {
                      "Enabled": {
                        "type": "Boolean",
                        "required": false,
                        "description": "Indicates whether CloudWatch Logs logging is enabled."
                      },
                      "LogGroupName": {
                        "type": "String",
                        "required": false,
                        "resource-ref-type": "AWS::Logs::LogGroup",
                        "description": "The name of the CloudWatch Logs log group that contains the log stream that Kinesis Firehose will use."
                      },
                      "LogStreamName": {
                        "type": "String",
                        "required": false,
                        "resource-ref-type": "AWS::Logs::LogStream",
                        "description": "The name of the CloudWatch Logs log stream that Kinesis Firehose uses to send logs about data delivery."
                      }
                    }
                  },
                  "CompressionFormat": {
                    "type": "String",
                    "required": true,
                    "description": "The compression format for the Kinesis Firehose delivery stream.",
                    "allowed-values": [
                      "*",
                      "UNCOMPRESSED",
                      "GZIP",
                      "ZIP",
                      "Snappy"
                    ]
                  },
                  "EncryptionConfiguration": {
                    "type": "Object",
                    "required": false,
                    "description": "The encryption configuration for the Kinesis Firehose delivery stream. The default value is NoEncryption.",
                    "properties": {
                      "KMSEncryptionConfig": {
                        "type": "Object",
                        "required": false,
                        "description": "The AWS Key Management Service (AWS KMS) encryption key that Amazon S3 uses to encrypt your data.",
                        "properties": {
                          "AWSKMSKeyARN": {
                            "type": "String",
                            "required": true,
                            "resource-ref-type": "AWS::KMS::Key",
                            "description": "The Amazon Resource Name (ARN) of the AWS KMS encryption key that Amazon S3 uses to encrypt data delivered by the Kinesis Firehose stream."
                          }
                        }
                      },
                      "NoEncryptionConfig": {
                        "type": "String",
                        "required": false,
                        "description": "Disables encryption.",
                        "allowed-values": [
                          "*",
                          "NoEncryption"
                        ]
                      }
                    }
                  },
                  "Prefix": {
                    "type": "String",
                    "required": false,
                    "description": "A prefix that Kinesis Firehose adds to the files that it delivers to the Amazon S3 bucket."
                  },
                  "RoleARN": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::IAM::Role",
                    "description": "The ARN of the AWS credentials."
                  }
                }
              },
              "S3BackupMode": {
                "type": "String",
                "required": false,
                "description": "The Amazon S3 backup mode.",
                "allowed-values": [
                  "*",
                  "Disabled",
                  "Enabled"
                ]
              }
            }
          },
          "KinesisStreamSourceConfiguration": {
            "type": "Object",
            "required": false,
            "description": "When a Kinesis stream is used as the source for the delivery stream, a Kinesis Data Firehose DeliveryStream KinesisStreamSourceConfiguration containing the Kinesis stream ARN and the role ARN for the source stream.",
            "properties": {
              "KinesisStreamARN": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::Kinesis::Stream",
                "description": "The Amazon Resource Name (ARN) of the source Kinesis stream."
              },
              "RoleARN": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::IAM::Role",
                "description": "The Amazon Resource Name (ARN) of the role that provides access to the source Kinesis stream."
              }
            }
          },
          "SplunkDestinationConfiguration": {
            "type": "Object",
            "required": false,
            "description": "The configuration of a destination in Splunk for the delivery stream.",
            "properties": {
              "CloudWatchLoggingOptions": {
                "type": "Object",
                "required": false,
                "description": "The CloudWatch logging options for your delivery stream.",
                "properties": {
                  "Enabled": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether CloudWatch Logs logging is enabled."
                  },
                  "LogGroupName": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the CloudWatch Logs log group that contains the log stream that Kinesis Firehose will use.",
                    "resource-ref-type": "AWS::Logs::LogGroup"
                  },
                  "LogStreamName": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the CloudWatch Logs log stream that Kinesis Firehose uses to send logs about data delivery.",
                    "resource-ref-type": "AWS::Logs::LogStream"
                  }
                }
              },
              "HECAcknowledgmentTimeoutInSeconds": {
                "type": "Number",
                "required": false,
                "description": "The amount of time that Kinesis Data Firehose waits to receive an acknowledgment from Splunk after it sends it data."
              },
              "HECEndpoint": {
                "type": "String",
                "required": true,
                "description": "he HTTP Event Collector (HEC) endpoint to which Kinesis Data Firehose sends your data."
              },
              "HECEndpointType": {
                "type": "String",
                "required": true,
                "description": "This type can be either Raw or Event.",
                "allowed-values": [
                  "*",
                  "Raw",
                  "Event"
                ]
              },
              "HECToken": {
                "type": "String",
                "required": true,
                "description": "A GUID that you obtain from your Splunk cluster when you create a new HEC endpoint."
              },
              "ProcessingConfiguration": {
                "type": "Object",
                "required": false,
                "description": "The data processing configuration.",
                "properties": {
                  "Enabled": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether data processing is enabled (true) or disabled (false)."
                  },
                  "Processors": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "The data processors.",
                    "properties": {
                      "Parameters": {
                        "type": "Array",
                        "array-type": "Object",
                        "required": true,
                        "description": "The processor parameters.",
                        "properties": {
                          "ParameterName": {
                            "type": "String",
                            "required": true,
                            "description": "The name of the parameter."
                          },
                          "ParameterValue": {
                            "type": "String",
                            "required": true,
                            "description": "The parameter value."
                          }
                        }
                      },
                      "Type": {
                        "type": "String",
                        "required": true,
                        "description": "The type of processor.",
                        "allowed-values": [
                          "*",
                          "Lambda"
                        ]
                      }
                    }
                  }
                }
              },
              "RetryOptions": {
                "type": "Object",
                "required": false,
                "description": "The retry behavior in case Kinesis Data Firehose is unable to deliver data to Splunk, or if it doesn't receive an acknowledgment of receipt from Splunk.",
                "properties": {
                  "DurationInSeconds": {
                    "type": "Number",
                    "required": true,
                    "description": "The total amount of time that Kinesis Data Firehose spends on retries."
                  }
                }
              },
              "S3BackupMode": {
                "type": "String",
                "required": false,
                "description": "Defines how documents should be delivered to Amazon S3.",
                "allowed-values": [
                  "*",
                  "FailedEventsOnly",
                  "AllEvents"
                ]
              },
              "S3Configuration": {
                "type": "Object",
                "required": true,
                "description": "The configuration for the backup Amazon S3 location.",
                "properties": {
                  "BucketARN": {
                    "type": "String",
                    "required": true,
                    "description": "The Amazon Resource Name (ARN) of the Amazon S3 bucket to send data to.",
                    "resource-ref-type": "AWS::S3::Bucket"
                  },
                  "BufferingHints": {
                    "type": "Object",
                    "required": true,
                    "description": "Configures how Kinesis Firehose buffers incoming data while delivering it to the Amazon S3 bucket.",
                    "properties": {
                      "IntervalInSeconds": {
                        "type": "Number",
                        "required": true,
                        "description": "The length of time, in seconds, that Kinesis Firehose buffers incoming data before delivering it to the destination."
                      },
                      "SizeInMBs": {
                        "type": "Number",
                        "required": true,
                        "description": "The size of the buffer, in MBs, that Kinesis Firehose uses for incoming data before delivering it to the destination."
                      }
                    }
                  },
                  "CloudWatchLoggingOptions": {
                    "type": "Object",
                    "required": false,
                    "description": "The Amazon CloudWatch Logs logging options for the delivery stream.",
                    "properties": {
                      "Enabled": {
                        "type": "Boolean",
                        "required": false,
                        "description": "Indicates whether CloudWatch Logs logging is enabled."
                      },
                      "LogGroupName": {
                        "type": "String",
                        "required": false,
                        "description": "The name of the CloudWatch Logs log group that contains the log stream that Kinesis Firehose will use.",
                        "resource-ref-type": "AWS::Logs::LogGroup"
                      },
                      "LogStreamName": {
                        "type": "String",
                        "required": false,
                        "description": "The name of the CloudWatch Logs log stream that Kinesis Firehose uses to send logs about data delivery.",
                        "resource-ref-type": "AWS::Logs::LogStream"
                      }
                    }
                  },
                  "CompressionFormat": {
                    "type": "String",
                    "required": true,
                    "description": "The type of compression that Kinesis Firehose uses to compress the data that it delivers to the Amazon S3 bucket.",
                    "allowed-values": [
                      "*",
                      "UNCOMPRESSED",
                      "GZIP",
                      "ZIP",
                      "Snappy"
                    ]
                  },
                  "EncryptionConfiguration": {
                    "type": "Object",
                    "required": false,
                    "description": "Configures Amazon Simple Storage Service (Amazon S3) server-side encryption.",
                    "properties": {
                      "KMSEncryptionConfig": {
                        "type": "Object",
                        "required": false,
                        "description": "The AWS Key Management Service (AWS KMS) encryption key that Amazon S3 uses to encrypt your data.",
                        "properties": {
                          "AWSKMSKeyARN": {
                            "type": "String",
                            "required": true,
                            "description": "The Amazon Resource Name (ARN) of the AWS KMS encryption key that Amazon S3 uses to encrypt data delivered by the Kinesis Firehose stream.",
                            "resource-ref-type": "AWS::KMS::Key"
                          }
                        }
                      },
                      "NoEncryptionConfig": {
                        "type": "String",
                        "required": false,
                        "description": "Disables encryption.",
                        "allowed-values": [
                          "*",
                          "NoEncryption"
                        ]
                      }
                    }
                  },
                  "Prefix": {
                    "type": "String",
                    "required": false,
                    "description": "A prefix that Kinesis Firehose adds to the files that it delivers to the Amazon S3 bucket."
                  },
                  "RoleARN": {
                    "type": "String",
                    "required": true,
                    "description": "The ARN of an AWS Identity and Access Management (IAM) role that grants Kinesis Firehose access to your Amazon S3 bucket and AWS KMS (if you enable data encryption).",
                    "resource-ref-type": "AWS::IAM::Role"
                  }
                }
              }
            }
          },
          "S3DestinationConfiguration": {
            "type": "Object",
            "required": true,
            "description": "Describes the configuration of a destination in Amazon S3.",
            "properties": {
              "BucketARN": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::S3::Bucket",
                "description": "The ARN of the S3 bucket."
              },
              "BufferingHints": {
                "type": "Object",
                "required": true,
                "description": "The buffering option. If no value is specified, BufferingHints object default values are used.",
                "properties": {
                  "IntervalInSeconds": {
                    "type": "Number",
                    "required": false,
                    "description": "Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300."
                  },
                  "SizeInMBs": {
                    "type": "Number",
                    "required": false,
                    "description": "Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5."
                  }
                }
              },
              "CompressionFormat": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "*",
                  "UNCOMPRESSED",
                  "GZIP",
                  "ZIP",
                  "Snappy"
                ],
                "description": "The name of the CloudWatch Logs log stream that Firehose uses to send logs about data delivery."
              },
              "EncryptionConfiguration": {
                "type": "Object",
                "required": false,
                "description": "The encryption configuration. If no value is specified, the default is no encryption.",
                "properties": {
                  "KMSEncryptionConfig": {
                    "type": "Object",
                    "required": false,
                    "description": "The encryption key.",
                    "properties": {
                      "AWSKMSKeyARN": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::KMS::Key",
                        "description": "The ARN of the encryption key. Must belong to the same region as the destination Amazon S3 bucket."
                      }
                    }
                  },
                  "NoEncryptionConfig": {
                    "type": "String",
                    "required": false,
                    "allowed-values": [
                      "*",
                      "NoEncryption"
                    ],
                    "description": "Specifically override existing encryption information to ensure no encryption is used."
                  }
                }
              },
              "Prefix": {
                "type": "String",
                "required": false,
                "description": "The \"YYYY/MM/DD/HH\" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix."
              },
              "RoleARN": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::IAM::Role",
                "description": "The ARN of the AWS credentials."
              },
              "CloudWatchLoggingOptions": {
                "type": "Object",
                "required": false,
                "description": "The Amazon CloudWatch Logs logging options for the delivery stream.",
                "properties": {
                  "Enabled": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether CloudWatch Logs logging is enabled."
                  },
                  "LogGroupName": {
                    "type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::Logs::LogGroup",
                    "description": "The name of the CloudWatch Logs log group that contains the log stream that Firehose will use."
                  },
                  "LogStreamName": {
                    "type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::Logs::LogStream",
                    "description": "The name of the CloudWatch Logs log stream that Firehose uses to send logs about data delivery."
                  }
                }
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Kinesis::Stream": {
    "type": "Object",
    "required": false,
    "description": "Creates an Amazon Kinesis stream that captures and transports data records that are emitted from data sources.",
    "return-values": [
      {
        "name": "Arn",
        "description": "The Amazon resource name (ARN) of the Amazon Kinesis stream, such as arn:aws:kinesis:us-east-1:123456789012:stream/mystream."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an Amazon Kinesis stream that captures and transports data records that are emitted from data sources."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Name": {
            "type": "String",
            "required": false,
            "description": "The name of the Amazon Kinesis stream."
          },
          "ShardCount": {
            "type": "Number",
            "required": true,
            "description": "The number of shards that the stream uses. For greater provisioned throughput, increase the number of shards."
          },
          "RetentionPeriodHours": {
            "type": "Number",
            "required": false,
            "description": "The number of hours for the data records that are stored in shards to remain accessible. "
          },
          "StreamEncryption": {
            "type": "Object",
            "required": false,
            "description": "Enables or updates server-side encryption using an AWS KMS key for a specified stream.",
            "properties": {
              "EncryptionType": {
                "type": "String",
                "required": true,
                "description": "The encryption type to use. The only valid value is KMS."
              },
              "KeyId": {
                "type": "String",
                "required": true,
                "description": "The GUID for the customer-managed KMS key to use for encryption.",
                "resource-ref-type": "AWS::KMS::Key"
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Kinesis::StreamConsumer": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS CloudFormation AWS::Kinesis::StreamConsumer resource to register a consumer with a Kinesis data stream.",
    "return-values": [
      {
        "name": "ConsumerCreationTimestamp",
        "description": "The time at which the consumer was created."
      },
      {
        "name": "ConsumerName",
        "description": "The name you gave the consumer when you registered it."
      },
      {
        "name": "ConsumerARN",
        "description": "When you register a consumer, Kinesis Data Streams generates an ARN for it. You need this ARN to be able to call SubscribeToShard."
      },
      {
        "name": "ConsumerStatus",
        "description": "A consumer can't read data while in the CREATING or DELETING states."
      },
      {
        "name": "StreamARN",
        "description": "The ARN of the data stream that the consumer is registered with."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS CloudFormation AWS::Kinesis::StreamConsumer resource to register a consumer with a Kinesis data stream."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ConsumerName": {
            "type": "String",
            "required": true,
            "description": "The name of the consumer is something you choose when you register the consumer."
          },
          "StreamARN": {
            "type": "String",
            "required": true,
            "description": "The ARN of the Kinesis data stream that you want to register the consumer with.",
            "resource-ref-type": "AWS::Kinesis::Stream"
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::KMS::Alias": {
    "type": "Object",
    "required": false,
    "description": "The AWS::KMS::Alias resource creates a display name for a customer master key (CMK) in AWS Key Management Service (AWS KMS).",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::KMS::Alias resource creates a display name for a customer master key (CMK) in AWS Key Management Service (AWS KMS)."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AliasName": {
            "type": "String",
            "required": false,
            "description": "The name of the alias. The name must start with alias followed by a forward slash, such as alias/. You can't specify aliases that begin with alias/AWS. These aliases are reserved."
          },
          "TargetKeyId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::KMS::Key",
            "description": "The ID of the key for which you are creating the alias."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::KMS::Key": {
    "type": "Object",
    "required": false,
    "description": "The AWS::KMS::Key resource creates a customer master key (CMK) in AWS Key Management Service (AWS KMS).",
    "return-values": [
      {
        "name": "Arn",
        "description": "The ARN of the AWS KMS key."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::KMS::Key resource creates a customer master key (CMK) in AWS Key Management Service (AWS KMS)."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the key. Use a description that helps your users decide whether the key is appropriate for a particular task."
          },
          "Enabled": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the key is available for use. AWS CloudFormation sets this value to true by default."
          },
          "EnableKeyRotation": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether AWS KMS rotates the key. AWS CloudFormation sets this value to false by default."
          },
          "KeyPolicy": {
            "type": "Policy",
            "required": false,
            "description": "An AWS Identity and Access Management (IAM) policy to attach to the key."
          },
          "KeyUsage": {
            "type": "String",
            "required": false,
            "description": "The intended use of the CMK.",
            "allowed-values": [
              "*",
              "ENCRYPT_DECRYPT"
            ]
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Specifies an arbitrary set of tags (key�value pairs) to associate with this key. Use tags to manage your resources.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          },
          "PendingWindowInDays": {
            "type": "Number",
            "required": false,
            "description": "The waiting period, specified in number of days. After the waiting period ends, AWS KMS deletes the customer master key (CMK)."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Lambda::Alias": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Lambda::Alias resource creates an alias that points to an AWS Lambda (Lambda) function that you specify.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Lambda::Alias resource creates an alias that points to an AWS Lambda (Lambda) function that you specify."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "Information that describes the alias, such as its purpose or the function that it's associated with."
          },
          "FunctionName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Lambda::Function",
            "description": "The Lambda function that you want to associate with this alias. You can specify the function's name or its Amazon Resource Name (ARN)."
          },
          "FunctionVersion": {
            "type": "String",
            "required": true,
            "description": "The version of the Lambda function that you want to associate with this alias."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "A name for the alias."
          },
          "RoutingConfig": {
            "type": "Object",
            "required": false,
            "description": "Use this parameter to point your alias to two different function versions, allowing you to dictate what percentage of traffic will invoke each version.",
            "properties": {
              "AdditionalVersionWeights": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "AdditionalVersionWeights",
                "properties": {
                  "FunctionVersion": {
                    "type": "String",
                    "required": true,
                    "description": "Function version to which the alias points."
                  },
                  "FunctionWeight": {
                    "type": "Number",
                    "required": true,
                    "description": "The percentage of traffic that will invoke the function version."
                  }
                }
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Lambda::EventSourceMapping": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Lambda::EventSourceMapping resource specifies a stream as an event source for an AWS Lambda (Lambda) function.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Lambda::EventSourceMapping resource specifies a stream as an event source for an AWS Lambda (Lambda) function."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "BatchSize": {
            "type": "Number",
            "required": false,
            "description": "The largest number of records that Lambda retrieves from your event source when invoking your function."
          },
          "Enabled": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether Lambda begins polling the event source."
          },
          "EventSourceArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": [
              "AWS::Kinesis::Stream",
              "*"
            ],
            "description": "The Amazon Resource Name (ARN) of the Amazon Kinesis or DynamoDB stream that is the source of events."
          },
          "FunctionName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Lambda::Function",
            "description": "The name or ARN of a Lambda function to invoke when Lambda detects an event on the stream."
          },
          "StartingPosition": {
            "type": "String",
            "required": true,
            "description": "The position in the stream where Lambda starts reading."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Lambda::Function": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Lambda::Function resource creates an AWS Lambda (Lambda) function that can run code in response to events.",
    "return-values": [
      {
        "name": "Arn",
        "description": "The ARN of the Lambda function."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Lambda::Function resource creates an AWS Lambda (Lambda) function that can run code in response to events."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Code": {
            "type": "Object",
            "required": false,
            "description": "The source code of your Lambda function.",
            "properties": {
              "S3Bucket": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::S3::Bucket",
                "description": "The name of the Amazon Simple Storage Service (Amazon S3) bucket that contains the source code of your Lambda function."
              },
              "S3Key": {
                "type": "String",
                "required": false,
                "description": "The location and name of your source code .zip file. If you specify this property, you must also specify the S3Bucket property."
              },
              "S3ObjectVersion": {
                "type": "String",
                "required": false,
                "description": "If you have versioning enabled, the version ID of your packaged source code."
              },
              "ZipFile": {
                "type": "String",
                "required": false,
                "description": "For nodejs runtime environments, the source code of your Lambda function. You cannot use this property with other runtime environments."
              }
            }
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the function."
          },
          "DeadLetterConfig": {
            "type": "Object",
            "required": false,
            "description": "DeadLetterConfig is a property of the AWS::Lambda::Function resource that specifies a Dead Letter Queue (DLQ) that AWS Lambda (Lambda) sends events to when it can't process them.",
            "properties": {
              "TargetArn": {
                "type": "String",
                "required": false,
                "resource-ref-type": [
                  "AWS::SNS::Topic",
                  "AWS::SQS::Queue"
                ],
                "description": "The Amazon Resource Name (ARN) of a resource where Lambda delivers unprocessed events, such as an Amazon SNS topic or Amazon Simple Queue Service (Amazon SQS) queue."
              }
            }
          },
          "Environment": {
            "type": "Object",
            "required": false,
            "description": "Key-value pairs that Lambda caches and makes available for your Lambda functions.",
            "properties": {
              "Variables": {
                "type": "Json",
                "required": false,
                "description": "A map of key-value pairs that the Lambda function can access."
              }
            }
          },
          "FunctionName": {
            "type": "String",
            "required": false,
            "description": "A name for the function. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the function's name."
          },
          "Handler": {
            "type": "String",
            "required": true,
            "description": "The name of the function within your code that Lambda calls to start running the code."
          },
          "KmsKeyArn": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::KMS::Key",
            "description": "The Amazon Resource Name (ARN) of an AWS Key Management Service (AWS KMS) key that Lambda uses to encrypt and decrypt environment variable values."
          },
          "MemorySize": {
            "type": "Number",
            "required": false,
            "description": "The amount of memory, in MB, that is allocated to your Lambda function. Lambda uses this value to infer the amount of CPU and memory that is allocated to your function."
          },
          "Role": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that Lambda assumes when it runs your code to access AWS."
          },
          "Runtime": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "*",
              "dotnetcore1.0",
              "dotnetcore2.0",
              "dotnetcore2.1",
              "go1.x",
              "java8",
              "nodejs",
              "nodejs4.3",
              "nodejs4.3-edge",
              "nodejs6.10",
              "nodejs8.10",
              "python2.7",
              "python3.6"
            ],
            "description": "The runtime environment for the Lambda function that you are uploading."
          },
          "Timeout": {
            "type": "Number",
            "required": false,
            "description": "The function execution time (in seconds) after which Lambda terminates the function. By default, Timeout is set to 3 seconds."
          },
          "VpcConfig": {
            "type": "Object",
            "required": false,
            "description": "If the Lambda function requires access to resources in a VPC, specify a VPC configuration that Lambda uses to set up an elastic network interface (ENI).",
            "properties": {
              "SecurityGroupIds": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "description": "A list of one or more security groups IDs in the VPC that includes the resources to which your Lambda function requires access."
              },
              "SubnetIds": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "resource-ref-type": "AWS::EC2::Subnet",
                "description": "A list of one or more subnet IDs in the VPC that includes the resources to which your Lambda function requires access."
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "An arbitrary set of tags (key�value pairs) for this Lambda function.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          },
          "TracingConfig": {
            "type": "Object",
            "required": false,
            "description": "The parent object that contains your Lambda function's tracing settings.",
            "properties": {
              "Mode": {
                "type": "String",
                "required": false,
                "description": "Specifies how Lambda traces a request.",
                "allowed-values": [
                  "*",
                  "Active",
                  "PassThrough"
                ]
              }
            }
          },
          "ReservedConcurrentExecutions": {
            "type": "Number",
            "required": false,
            "description": "The maximum of concurrent executions you want reserved for the function."
          },
          "Layers": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "A list of function layers to add to the function's execution environment."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Lambda::LayerVersion": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Lambda::LayerVersion resource creates a layer version in AWS Lambda.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Lambda::LayerVersion resource creates a layer version in AWS Lambda."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CompatibleRuntimes": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "A list of compatible"
          },
          "LicenseInfo": {
            "type": "String",
            "required": false,
            "description": "The layer's software license."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "The description of the version."
          },
          "LayerName": {
            "type": "String",
            "required": false,
            "description": "The name of the layer."
          },
          "Content": {
            "type": "Object",
            "required": true,
            "description": "The function layer archive.",
            "properties": {
              "S3ObjectVersion": {
                "type": "String",
                "required": false,
                "description": "For versioned objects, the version of the layer archive object to use."
              },
              "S3Bucket": {
                "type": "String",
                "required": true,
                "description": "The Amazon S3 bucket of the layer archive.",
                "resource-ref-type": "AWS::S3::Bucket"
              },
              "S3Key": {
                "type": "String",
                "required": true,
                "description": "The Amazon S3 key of the layer archive."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Lambda::LayerVersionPermission": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Lambda::LayerVersionPermission resource gives other accounts permission to use a layer version in AWS Lambda.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Lambda::LayerVersionPermission resource gives other accounts permission to use a layer version in AWS Lambda."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Action": {
            "type": "String",
            "required": true,
            "description": "The API action that grants access to the layer. For example, lambda:GetLayerVersion."
          },
          "LayerVersionArn": {
            "type": "String",
            "required": true,
            "description": "The ARN of the layer version.",
            "resource-ref-type": "AWS::Lambda::LayerVersion"
          },
          "OrganizationId": {
            "type": "String",
            "required": false,
            "description": "With the principal set to *, grant permission to all accounts in the specified organization."
          },
          "Principal": {
            "type": "String",
            "required": true,
            "description": "An account ID, or * to grant permission to all AWS accounts."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Lambda::Permission": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Lambda::Permission resource associates a policy statement with a specific AWS Lambda (Lambda) function's access policy.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Lambda::Permission resource associates a policy statement with a specific AWS Lambda (Lambda) function's access policy."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Action": {
            "type": "String",
            "required": true,
            "description": "The Lambda actions that you want to allow in this statement."
          },
          "FunctionName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Lambda::Function",
            "description": "The name (physical ID) or Amazon Resource Name (ARN) of the Lambda function that you want to associate with this statement. Lambda adds this statement to the function's access policy."
          },
          "Principal": {
            "type": "String",
            "required": true,
            "description": "The entity for which you are granting permission to invoke the Lambda function."
          },
          "SourceAccount": {
            "type": "String",
            "required": false,
            "description": "The AWS account ID (without hyphens) of the source owner."
          },
          "SourceArn": {
            "type": "String",
            "required": false,
            "description": "The ARN of a resource that is invoking your function."
          },
          "EventSourceToken": {
            "type": "String",
            "required": false,
            "description": "A unique token that must be supplied by the principal invoking the function."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Lambda::Version": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Lambda::Version resource publishes a specified version of an AWS Lambda (Lambda) function.",
    "return-values": [
      {
        "name": "Version",
        "description": "The published version of a Lambda version, such as 1."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Lambda::Version resource publishes a specified version of an AWS Lambda (Lambda) function."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CodeSha256": {
            "type": "String",
            "required": false,
            "description": "The SHA-256 hash of the deployment package that you want to publish."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the version you are publishing. If you don't specify a value, Lambda copies the description from the $LATEST version of the function."
          },
          "FunctionName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Lambda::Function",
            "description": "The Lambda function for which you want to publish a version. You can specify the function's name or its Amazon Resource Name (ARN)."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Logs::Destination": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Logs::Destination resource creates an Amazon CloudWatch Logs (CloudWatch Logs) destination.",
    "return-values": [
      {
        "name": "Arn",
        "description": "The ARN of the CloudWatch Logs destination, such as arn:aws:logs:us-east-2:123456789012:destination:MyDestination."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Logs::Destination resource creates an Amazon CloudWatch Logs (CloudWatch Logs) destination."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DestinationName": {
            "type": "String",
            "required": true,
            "description": "The name of the CloudWatch Logs destination."
          },
          "DestinationPolicy": {
            "type": "String",
            "required": true,
            "description": "An AWS Identity and Access Management (IAM) policy that specifies who can write to your destination."
          },
          "RoleArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The Amazon Resource Name (ARN) of an IAM role that permits CloudWatch Logs to send data to the specified AWS resource (TargetArn)."
          },
          "TargetArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Kinesis::Stream",
            "description": "The ARN of the AWS resource that receives log events. Currently, you can specify only an Amazon Kinesis stream."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Logs::LogGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Logs::LogGroup resource creates an Amazon CloudWatch Logs log group that defines common properties for log streams, such as their retention and access control rules. Each log stream must belong to one log group.",
    "return-values": [
      {
        "name": "Arn",
        "description": "The Amazon resource name (ARN) of the CloudWatch Logs log group, such as arn:aws:logs:us-east-1:123456789012:log-group:/mystack-testgroup-12ABC1AB12A1:*."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Logs::LogGroup resource creates an Amazon CloudWatch Logs log group that defines common properties for log streams, such as their retention and access control rules. Each log stream must belong to one log group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "LogGroupName": {
            "type": "String",
            "required": false,
            "description": "A name for the log group. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the table name."
          },
          "RetentionInDays": {
            "type": "Number",
            "required": false,
            "description": "The number of days log events are kept in CloudWatch Logs. When a log event expires, CloudWatch Logs automatically deletes it."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Logs::LogStream": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Logs::LogStream resource creates an Amazon CloudWatch Logs log stream in a log group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Logs::LogStream resource creates an Amazon CloudWatch Logs log stream in a log group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "LogGroupName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Logs::LogGroup",
            "description": "The name of the log group where the log stream is created."
          },
          "LogStreamName": {
            "type": "String",
            "required": true,
            "description": "The name of the log stream to create. The name must be unique within the log group."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Logs::MetricFilter": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Logs::MetricFilter resource creates a metric filter that describes how Amazon CloudWatch Logs extracts information from logs that you specify and transforms it into Amazon CloudWatch metrics.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Logs::MetricFilter resource creates a metric filter that describes how Amazon CloudWatch Logs extracts information from logs that you specify and transforms it into Amazon CloudWatch metrics."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "FilterPattern": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "description": "Describes the pattern that CloudWatch Logs follows to interpret each entry in a log."
          },
          "LogGroupName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Logs::LogGroup",
            "description": "The name of an existing log group that you want to associate with this metric filter."
          },
          "MetricTransformations": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "Describes how to transform data from a log into a CloudWatch metric.",
            "properties": {
              "MetricName": {
                "type": "String",
                "required": true,
                "description": "The name of the CloudWatch metric to which the log information will be published."
              },
              "MetricNamespace": {
                "type": "String",
                "required": true,
                "description": "The destination namespace of the CloudWatch metric. Namespaces are containers for metrics. For example, you can add related metrics in the same namespace."
              },
              "MetricValue": {
                "type": "String",
                "required": true,
                "description": "The value that is published to the CloudWatch metric."
              },
              "DefaultValue": {
                "type": "Number",
                "required": false,
                "description": "The value to emit when a filter pattern does not match a log event."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Logs::SubscriptionFilter": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Logs::SubscriptionFilter resource creates an Amazon CloudWatch Logs (CloudWatch Logs) subscription filter that defines which log events are delivered to your Amazon Kinesis stream and where to send them.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Logs::SubscriptionFilter resource creates an Amazon CloudWatch Logs (CloudWatch Logs) subscription filter that defines which log events are delivered to your Amazon Kinesis stream and where to send them."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DestinationArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Kinesis::Stream",
            "description": "The Amazon Resource Name (ARN) of the Amazon Kinesis stream that you want to use as the subscription feed destination."
          },
          "FilterPattern": {
            "type": "String",
            "required": true,
            "description": "The filtering expressions that restrict what gets delivered to the destination Amazon Kinesis stream."
          },
          "LogGroupName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Logs::LogGroup",
            "description": "The log group to associate with the subscription filter."
          },
          "RoleArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "An IAM role that grants CloudWatch Logs permission to put data into the specified Amazon Kinesis stream."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Neptune::DBCluster": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Neptune::DBCluster resource creates a Amazon Neptune DB Cluster. Neptune is a fully managed graph database.",
    "return-values": [
      {
        "name": "ClusterResourceId",
        "description": "The resource id for the DB cluster. For example: cluster-ABCD1234EFGH5678IJKL90MNOP. The cluster ID uniquely identifies the cluster and is used in things like IAM authentication policies."
      },
      {
        "name": "Endpoint",
        "description": "The connection endpoint for the DB cluster. For example: mystack-mydbcluster-1apw1j4phylrk.cg034hpkmmjt.us-east-2.rds.amazonaws.com."
      },
      {
        "name": "Port",
        "description": "The port number on which the DB cluster accepts connections. For example: 8182."
      },
      {
        "name": "ReadEndpoint",
        "description": "The reader endpoint for the DB cluster. For example: mystack-mydbcluster-ro-1apw1j4phylrk.cg034hpkmmjt.us-east-2.rds.amazonaws.com."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Neptune::DBCluster resource creates a Amazon Neptune DB Cluster. Neptune is a fully managed graph database."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "StorageEncrypted": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the DB instances in the cluster are encrypted."
          },
          "KmsKeyId": {
            "type": "String",
            "required": false,
            "description": "The Amazon Resource Name (ARN) of the AWS Key Management Service master key that is used to encrypt the database instances in the DB cluster",
            "resource-ref-type": "AWS::KMS::Key"
          },
          "AvailabilityZones": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "A list of Availability Zones (AZs) in which DB instances in the cluster can be created."
          },
          "SnapshotIdentifier": {
            "type": "String",
            "required": false,
            "description": "The identifier for the DB cluster snapshot from which you want to restore."
          },
          "Port": {
            "type": "Number",
            "required": false,
            "description": "The port number on which the DB instances in the cluster can accept connections."
          },
          "DBClusterIdentifier": {
            "type": "String",
            "required": false,
            "description": "The DB cluster identifier. This parameter is stored as a lowercase string."
          },
          "PreferredMaintenanceWindow": {
            "type": "String",
            "required": false,
            "description": "The weekly time range (in UTC) during which system maintenance can occur."
          },
          "IamAuthEnabled": {
            "type": "Boolean",
            "required": false,
            "description": "Enable IAM authentication and authoriation on this cluster."
          },
          "DBSubnetGroupName": {
            "type": "String",
            "required": false,
            "description": "A DB subnet group that you want to associate with this DB cluster.",
            "resource-ref-type": "AWS::Neptune::DBSubnetGroup"
          },
          "PreferredBackupWindow": {
            "type": "String",
            "required": false,
            "description": "if automated backups are enabled (see the BackupRetentionPeriod property), the daily time range in UTC during which you want to create automated backups."
          },
          "VpcSecurityGroupIds": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "A list of VPC security groups to associate with this DB cluster.",
            "resource-ref-type": "AWS::EC2::VPC"
          },
          "DBClusterParameterGroupName": {
            "type": "String",
            "required": false,
            "description": "The name of the DB cluster parameter group to associate with this DB cluster.",
            "resource-ref-type": "AWS::Neptune::DBClusterParameterGroup"
          },
          "BackupRetentionPeriod": {
            "type": "Number",
            "required": false,
            "description": "The number of days for which automatic backups are retained."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach to this DB cluster.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Neptune::DBClusterParameterGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Neptune::DBClusterParameterGroup resource creates a new Amazon Neptune DB cluster parameter group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Neptune::DBClusterParameterGroup resource creates a new Amazon Neptune DB cluster parameter group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": true,
            "description": "A friendly description for this DB cluster parameter group."
          },
          "Parameters": {
            "type": "Json",
            "required": true,
            "description": "The parameters to set for this DB cluster parameter group."
          },
          "Family": {
            "type": "String",
            "required": true,
            "description": "The family of cluster",
            "allowed-values": [
              "*",
              "neptune1"
            ]
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach to this parameter group.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "A friendly name for the cluster."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Neptune::DBInstance": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Neptune::DBInstance type creates an Neptune DB instance.",
    "return-values": [
      {
        "name": "Endpoint",
        "description": "The connection endpoint for the database. For example: mystack-mydb-1apw1j4phylrk.cg034hpkmmjt.us-east-2.rds.amazonaws.com."
      },
      {
        "name": "Port",
        "description": "The port number on which the database accepts connections. For example: 8182."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Neptune::DBInstance type creates an Neptune DB instance."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DBParameterGroupName": {
            "type": "String",
            "required": false,
            "description": "The name of an existing DB parameter group or a reference to an AWS::Neptune::DBParameterGroup resource created in the template.",
            "resource-ref-type": "AWS::Neptune::DBParameterGroup"
          },
          "DBInstanceClass": {
            "type": "String",
            "required": true,
            "description": "The name of the compute and memory capacity classes of the DB instance."
          },
          "AllowMajorVersionUpgrade": {
            "type": "Boolean",
            "required": false,
            "description": "If true allows major version upgrade."
          },
          "DBClusterIdentifier": {
            "type": "String",
            "required": false,
            "description": "The name of an existing DB cluster that this instance is associated with."
          },
          "AvailabilityZone": {
            "type": "String",
            "required": false,
            "description": "The name of the Availability Zone where the DB instance is located. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true."
          },
          "PreferredMaintenanceWindow": {
            "type": "String",
            "required": false,
            "description": "The weekly time range (in UTC) during which system maintenance can occur."
          },
          "AutoMinorVersionUpgrade": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window."
          },
          "DBSubnetGroupName": {
            "type": "String",
            "required": false,
            "description": "A DB subnet group to associate with the DB instance.",
            "resource-ref-type": "AWS::Neptune::DBSubnetGroup"
          },
          "DBInstanceIdentifier": {
            "type": "String",
            "required": false,
            "description": "A name for the DB instance."
          },
          "DBSnapshotIdentifier": {
            "type": "String",
            "required": false,
            "description": "The name or Amazon Resource Name (ARN) of the DB snapshot that's used to restore the DB instance."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "An arbitrary set of tags (key�value pairs) for this DB instance.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Neptune::DBParameterGroup": {
    "type": "Object",
    "required": false,
    "description": "Creates a custom parameter group for DB instances.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a custom parameter group for DB instances."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": true,
            "description": "A friendly description of the DB parameter group."
          },
          "Parameters": {
            "type": "Json",
            "required": true,
            "description": "The parameters to set for this DB parameter group."
          },
          "Family": {
            "type": "String",
            "required": true,
            "description": "The family of cluster",
            "allowed-values": [
              "*",
              "neptune1"
            ]
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach to the DB parameter group.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "A friendly name for the cluster."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Neptune::DBSubnetGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Neptune::DBSubnetGroup type creates a Neptune DB subnet group. Subnet groups must contain at least two subnets in two different Availability Zones in the same region.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Neptune::DBSubnetGroup type creates a Neptune DB subnet group. Subnet groups must contain at least two subnets in two different Availability Zones in the same region."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DBSubnetGroupName": {
            "type": "String",
            "required": false,
            "description": "The name for the DB Subnet Group. This value is stored as a lowercase string."
          },
          "DBSubnetGroupDescription": {
            "type": "String",
            "required": true,
            "description": "The description for the DB Subnet Group."
          },
          "SubnetIds": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "description": "The EC2 Subnet IDs for the DB Subnet Group.",
            "resource-ref-type": "AWS::EC2::Subnet"
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach to the RDS database subnet group.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::OpsWorks::App": {
    "type": "Object",
    "required": false,
    "description": "Defines an AWS OpsWorks app for an AWS OpsWorks stack. The app represents code that you want to run on an application server.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Defines an AWS OpsWorks app for an AWS OpsWorks stack. The app represents code that you want to run on an application server."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AppSource": {
            "type": "Object",
            "required": false,
            "description": "Contains the information required to retrieve an app from a repository.",
            "properties": {
              "Password": {
                "type": "String",
                "description": "This parameter depends on the repository type. For Amazon S3 bundles, set Password to the appropriate IAM secret access key. For HTTP bundles, Git repositories, and Subversion repositories, set Password to the appropriate password.",
                "required": false
              },
              "Revision": {
                "type": "String",
                "description": "The application's version. With AWS OpsWorks, you can deploy new versions of an application. One of the simplest approaches is to have branches or revisions in your repository that represent different versions that can potentially be deployed.",
                "required": false
              },
              "SshKey": {
                "type": "String",
                "description": "The repository's SSH key.",
                "required": false
              },
              "Type": {
                "type": "String",
                "description": "The repository type.",
                "required": false
              },
              "Url": {
                "type": "String",
                "description": "The source URL.",
                "required": false
              },
              "Username": {
                "type": "String",
                "required": false,
                "description": "This parameter depends on the repository type."
              }
            }
          },
          "Attributes": {
            "type": "Json",
            "required": false,
            "description": "One or more user-defined key-value pairs to be added to the stack attributes bag."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the app."
          },
          "DataSources": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A list of databases to associate with the AWS OpsWorks app.",
            "properties": {
              "Arn": {
                "type": "String",
                "description": "The ARN of the data source.",
                "required": false
              },
              "DatabaseName": {
                "type": "String",
                "description": "The name of the database.",
                "required": false
              },
              "Type": {
                "type": "String",
                "description": "The type of the data source",
                "allowed-values": [
                  "*",
                  "AutoSelectOpsworksMysqlInstance",
                  "OpsworksMysqlInstance",
                  "RdsDbInstance"
                ],
                "required": false
              }
            }
          },
          "Domains": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The app virtual host settings, with multiple domains separated by commas. For example, 'www.example.com, example.com'."
          },
          "EnableSsl": {
            "type": "Boolean",
            "required": false,
            "description": "Whether to enable SSL for this app."
          },
          "Environment": {
            "type": "Object",
            "required": false,
            "description": "Contains the information required to retrieve an app from a repository.",
            "properties": {
              "Key": {
                "type": "String",
                "description": "The name of the environment variable, which can consist of up to 64 characters. You can use upper and lowercase letters, numbers, and underscores (_), but the name must start with a letter or underscore.",
                "required": true
              },
              "Secure": {
                "type": "Boolean",
                "description": "Indicates whether the value of the environment variable is concealed, such as with a DescribeApps response. To conceal an environment variable's value, set the value to true.",
                "required": false
              },
              "Value": {
                "type": "String",
                "description": "The value of the environment variable, which can be empty. You can specify a value of up to 256 characters.",
                "required": true
              }
            }
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "The AWS OpsWorks app name."
          },
          "Shortname": {
            "type": "String",
            "required": false,
            "description": "The app short name, which is used internally by AWS OpsWorks and by Chef recipes."
          },
          "SslConfiguration": {
            "type": "Object",
            "required": false,
            "description": "The SSL configuration",
            "properties": {
              "Certificate": {
                "type": "String",
                "description": "The contents of the certificate's domain.crt file.",
                "required": false
              },
              "Chain": {
                "type": "String",
                "description": "An intermediate certificate authority key or client authentication.",
                "required": false
              },
              "PrivateKey": {
                "type": "String",
                "description": "The private key; the contents of the certificate's domain.kex file.",
                "required": false
              }
            }
          },
          "StackId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::OpsWorks::Stack",
            "description": "The AWS OpsWorks stack ID that this app will be associated with."
          },
          "Type": {
            "type": "String",
            "required": false,
            "description": "The app type. Each supported type is associated with a particular layer."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::OpsWorksCM::Server": {
    "type": "Object",
    "required": false,
    "description": "The AWS::OpsWorksCM::Server resource creates an AWS OpsWorks for Chef Automate or AWS OpsWorks for Puppet Enterprise configuration management server.",
    "return-values": [
      {
        "name": "Endpoint",
        "description": "A DNS name that can be used to access the engine. Example: myserver-asdfghjkl.us-east-1.opsworks.io."
      },
      {
        "name": "Arn",
        "description": "The Amazon Resource Name (ARN) of the server, such as arn:aws:OpsWorksCM:us-east-1:123456789012:server/server-a1bzhi."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::OpsWorksCM::Server resource creates an AWS OpsWorks for Chef Automate or AWS OpsWorks for Puppet Enterprise configuration management server."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "KeyPair": {
            "type": "String",
            "required": false,
            "description": "The key pair associated with the server."
          },
          "EngineVersion": {
            "type": "String",
            "required": false,
            "description": "The engine version of the server."
          },
          "ServiceRoleArn": {
            "type": "String",
            "required": true,
            "description": "The service role ARN used to create the server.",
            "resource-ref-type": "AWS::Lambda::Function"
          },
          "DisableAutomatedBackup": {
            "type": "Boolean",
            "required": false,
            "description": "Enable or disable scheduled backups. Valid values are true or false. The default value is false."
          },
          "BackupId": {
            "type": "String",
            "required": false,
            "description": "If you specify this field, AWS OpsWorks CM creates the server by using the backup represented by BackupId."
          },
          "EngineModel": {
            "type": "String",
            "required": false,
            "description": "The engine model of the server."
          },
          "PreferredMaintenanceWindow": {
            "type": "String",
            "required": false,
            "description": "The preferred maintenance period specified for the server."
          },
          "InstanceProfileArn": {
            "type": "String",
            "required": true,
            "description": "The instance profile ARN of the server.",
            "resource-ref-type": "AWS::IAM::InstanceProfile"
          },
          "PreferredBackupWindow": {
            "type": "String",
            "required": false,
            "description": "The preferred backup period specified for the server."
          },
          "SecurityGroupIds": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The security group IDs for the server, as specified in the AWS CloudFormation stack.",
            "resource-ref-type": "AWS::EC2::SecurityGroup"
          },
          "SubnetIds": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The subnet IDs specified in a createServer() request.",
            "resource-ref-type": "AWS::EC2::Subnet"
          },
          "ServerName": {
            "type": "String",
            "required": false,
            "description": "The name of the server."
          },
          "EngineAttributes": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "In a createServer() request, EngineAttributes contains the administrator credentials to access the configuration management server.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value of the engine attribute."
              },
              "Name": {
                "type": "String",
                "required": false,
                "description": "The name of the engine attribute."
              }
            }
          },
          "BackupRetentionCount": {
            "type": "Number",
            "required": false,
            "description": "The number of automated backups that you want to keep. Whenever a new backup is created, AWS OpsWorks CM deletes the oldest backups if this number is exceeded. The default value is 1."
          },
          "InstanceType": {
            "type": "String",
            "required": true,
            "description": "The instance type for the server, as specified in the AWS CloudFormation stack."
          },
          "Engine": {
            "type": "String",
            "required": false,
            "description": "The configuration management engine to use.",
            "allow-values": [
              "*",
              "Chef",
              "Puppet"
            ]
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::OpsWorks::ElasticLoadBalancerAttachment": {
    "type": "Object",
    "required": false,
    "description": "Attaches an Elastic Load Balancing load balancer to an AWS OpsWorks layer that you specify.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Attaches an Elastic Load Balancing load balancer to an AWS OpsWorks layer that you specify."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ElasticLoadBalancerName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "description": "Elastic Load Balancing load balancer name."
          },
          "LayerId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::OpsWorks::Layer",
            "description": "The AWS OpsWorks layer ID that the Elastic Load Balancing load balancer will be attached to."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::OpsWorks::Instance": {
    "type": "Object",
    "required": false,
    "description": "Creates an instance for an AWS OpsWorks stack. These instances represent the Amazon EC2 instances that, for example, handle the work of serving applications and balancing traffic.",
    "return-values": [
      {
        "name": "PublicIp",
        "description": "The public IP address of the AWS OpsWorks instance, such as 192.0.2.0."
      },
      {
        "name": "AvailabilityZone",
        "description": "The Availability Zone of the AWS OpsWorks instance, such as us-east-2a."
      },
      {
        "name": "PrivateDnsName",
        "description": "The private DNS name of the AWS OpsWorks instance."
      },
      {
        "name": "PrivateIp",
        "description": "The private IP address of the AWS OpsWorks instance, such as 192.0.2.0."
      },
      {
        "name": "PublicDnsName",
        "description": "The public DNS name of the AWS OpsWorks instance."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an instance for an AWS OpsWorks stack. These instances represent the Amazon EC2 instances that, for example, handle the work of serving applications and balancing traffic."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AgentVersion": {
            "type": "String",
            "required": false,
            "description": "The version of the AWS OpsWorks agent that AWS OpsWorks installs on each instance."
          },
          "AmiId": {
            "type": "String",
            "required": false,
            "description": "The ID of the custom AMI to be used to create the instance. The AMI should be based on one of the standard AWS OpsWorks APIs."
          },
          "Architecture": {
            "type": "String",
            "required": false,
            "description": "The instance architecture."
          },
          "AutoScalingType": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "load",
              "timer"
            ],
            "description": "For scaling instances, the type of scaling."
          },
          "AvailabilityZone": {
            "type": "String",
            "required": false,
            "description": "The instance Availability Zone."
          },
          "BlockDeviceMappings": {
            "array-type": "Object",
            "type": "Array",
            "required": false,
            "description": "A list of block devices that are mapped to the AWS OpsWorks instance.",
            "properties": {
              "DeviceName": {
                "type": "String",
                "required": true,
                "description": "The name of the device within Amazon EC2."
              },
              "Ebs": {
                "type": "Object",
                "required": false,
                "description": "The EC2 EBS Block Device. You can specify either VirtualName or Ebs, but not both.",
                "properties": {
                  "DeleteOnTermination": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Determines whether to delete the volume on instance termination. The default value is \"true\"."
                  },
                  "Iops": {
                    "type": "String",
                    "required": false,
                    "description": "The number of I/O operations per second (IOPS) that the volume supports. This can be an integer from 100 to 2000. Required when the volume type is \"io1\"; not used with standard volumes."
                  },
                  "SnapshotId": {
                    "type": "String",
                    "required": false,
                    "description": "The snapshot ID of the volume to use to create a block device. If you specify both SnapshotId and VolumeSize, VolumeSize must be equal or greater than the size of the snapshot."
                  },
                  "VolumeSize": {
                    "type": "String",
                    "required": false,
                    "description": "The volume size, in gibibytes (GiB). This can be a number from 1 to 1024. If the volume type is \"io1\", the minimum value is 10. If you specify both SnapshotId and VolumeSize, VolumeSize must be equal or greater than the size of the snapshot."
                  },
                  "VolumeType": {
                    "type": "String",
                    "required": false,
                    "allowed-values": [
                      "*",
                      "standard",
                      "io1",
                      "gp2"
                    ],
                    "description": "The volume size, in gibibytes (GiB). This can be a number from 1 to 1024. If the volume type is \"io1\", the minimum value is 10."
                  }
                }
              },
              "NoDevice": {
                "type": "Object",
                "required": false,
                "description": "This is set to empty map (\"{}\") that be used to unmap a defined device.",
                "properties": {}
              },
              "VirtualName": {
                "type": "String",
                "required": true,
                "description": "The name of the virtual device. The name must be in the form ephemeralX where X is a number starting from zero (0); for example, ephemeral0. You can specify either VirtualName or Ebs, but not both."
              }
            }
          },
          "EbsOptimized": {
            "type": "Boolean",
            "required": false,
            "description": "Whether the instance is optimized for Amazon Elastic Block Store (Amazon EBS) I/O."
          },
          "ElasticIps": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "A list of Elastic IP addresses to associate with the instance."
          },
          "Hostname": {
            "type": "String",
            "required": false,
            "description": "The name of the instance host."
          },
          "InstallUpdatesOnBoot": {
            "type": "Boolean",
            "required": false,
            "description": "Whether to install operating system and package updates when the instance boots."
          },
          "InstanceType": {
            "type": "String",
            "required": true,
            "description": "The instance type, which must be supported by AWS OpsWorks.",
            "allowed-values": [
              "*",
              "t1.micro",
              "t2.nano",
              "t2.micro",
              "t2.small",
              "t2.medium",
              "t2.large",
              "m1.small",
              "m1.medium",
              "m1.large",
              "m1.xlarge",
              "m2.xlarge",
              "m2.2xlarge",
              "m2.4xlarge",
              "m3.medium",
              "m3.large",
              "m3.xlarge",
              "m3.2xlarge",
              "m4.large",
              "m4.xlarge",
              "m4.2xlarge",
              "m4.4xlarge",
              "m4.10xlarge",
              "m4.16xlarge",
              "c1.medium",
              "c1.xlarge",
              "cr1.8xlarge",
              "c3.large",
              "c3.xlarge",
              "c3.2xlarge",
              "c3.4xlarge",
              "c3.8xlarge",
              "c4.large",
              "c4.xlarge",
              "c4.2xlarge",
              "c4.4xlarge",
              "c4.8xlarge",
              "cc1.4xlarge",
              "cc2.8xlarge",
              "cg1.4xlarge",
              "d2.xlarge",
              "d2.2xlarge",
              "d2.4xlarge",
              "d2.8xlarge",
              "g2.2xlarge",
              "g2.8xlarge",
              "hi1.4xlarge",
              "hs1.8xlarge",
              "i2.xlarge",
              "i2.2xlarge",
              "i2.4xlarge",
              "i2.8xlarge",
              "p2.xlarge",
              "p2.8xlarge",
              "p2.16xlarge",
              "r3.large",
              "r3.xlarge",
              "r3.2xlarge",
              "r3.4xlarge",
              "r3.8xlarge",
              "x1.32xlarge"
            ]
          },
          "LayerIds": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "resource-ref-type": "AWS::OpsWorks::Layer",
            "description": "The IDs of the AWS OpsWorks layers that will be associated with this instance."
          },
          "Os": {
            "type": "String",
            "required": false,
            "description": "The instance operating system."
          },
          "RootDeviceType": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "ebs",
              "instance-store"
            ],
            "description": "The instance root device type."
          },
          "SshKeyName": {
            "type": "String",
            "required": false,
            "description": "The instance SSH key name."
          },
          "StackId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::OpsWorks::Stack",
            "description": "The ID of the AWS OpsWorks stack that this instance will be associated with."
          },
          "SubnetId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::Subnet",
            "description": "The ID of the instance's subnet. If the stack is running in a VPC, you can use this parameter to override the stack's default subnet ID value and direct AWS OpsWorks to launch the instance in a different subnet."
          },
          "Tenancy": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "dedicated",
              "default",
              "host"
            ],
            "description": "The tenancy of the instance."
          },
          "TimeBasedAutoScaling": {
            "type": "Object",
            "required": false,
            "description": "The time-based scaling configuration for the instance.",
            "properties": {
              "Sunday": {
                "type": "Json",
                "required": false,
                "description": "The schedule for Sunday."
              },
              "Monday": {
                "type": "Json",
                "required": false,
                "description": "The schedule for Monday."
              },
              "Tuesday": {
                "type": "Json",
                "required": false,
                "description": "The schedule for Tuesday."
              },
              "Wednesday": {
                "type": "Json",
                "required": false,
                "description": "The schedule for Wednesday."
              },
              "Thursday": {
                "type": "Json",
                "required": false,
                "description": "The schedule for Thursday."
              },
              "Friday": {
                "type": "Json",
                "required": false,
                "description": "The schedule for Friday."
              },
              "Saturday": {
                "type": "Json",
                "required": false,
                "description": "The schedule for Saturday."
              }
            }
          },
          "VirtualizationType": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "paravirtual",
              "hvm"
            ],
            "description": "The instance's virtualization type."
          },
          "Volumes": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::OpsWorks::Volume",
            "description": "A list of AWS OpsWorks volume IDs to associate with the instance."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::OpsWorks::Layer": {
    "type": "Object",
    "required": false,
    "description": "Creates an AWS OpsWorks layer. A layer defines, for example, which packages and applications are installed and how they are configured.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an AWS OpsWorks layer. A layer defines, for example, which packages and applications are installed and how they are configured."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Attributes": {
            "type": "Json",
            "required": false,
            "description": "One or more user-defined key-value pairs to be added to the stack attributes bag."
          },
          "AutoAssignElasticIps": {
            "type": "Boolean",
            "required": true,
            "description": "Whether to automatically assign an Elastic IP address to Amazon EC2 instances in this layer."
          },
          "AutoAssignPublicIps": {
            "type": "Boolean",
            "required": true,
            "description": "For AWS OpsWorks stacks that are running in a VPC, whether to automatically assign a public IP address to Amazon EC2 instances in this layer."
          },
          "CustomJson": {
            "type": "Json",
            "required": false,
            "description": "A custom stack configuration and deployment attributes that AWS OpsWorks installs on the layer's instances."
          },
          "CustomInstanceProfileArn": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::InstanceProfile",
            "description": "The Amazon Resource Name (ARN) of an IAM instance profile that is to be used for the Amazon EC2 instances in this layer."
          },
          "CustomRecipes": {
            "type": "Object",
            "required": false,
            "description": "Custom event recipes for this layer.",
            "properties": {
              "Configure": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "Custom recipe names to be run following a Configure event. The event occurs on all of the stack's instances when an instance enters or leaves the online state."
              },
              "Deploy": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "Custom recipe names to be run following a Deploy event. The event occurs when you run a deploy command, typically to deploy an application to a set of application server instances."
              },
              "Setup": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "Custom recipe names to be run following a Setup event. This event occurs on a new instance after it successfully boots."
              },
              "Shutdown": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "Custom recipe names to be run following a Shutdown event. This event occurs after you direct AWS OpsWorks to shut an instance down before the associated Amazon EC2 instance is actually terminated."
              },
              "Undeploy": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "Custom recipe names to be run following a Undeploy event. This event occurs when you delete an app or run an undeploy command to remove an app from a set of application server instances."
              }
            }
          },
          "CustomSecurityGroupIds": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "description": "Custom security group IDs for this layer."
          },
          "EnableAutoHealing": {
            "type": "Boolean",
            "required": true,
            "description": "Whether to automatically heal Amazon EC2 instances that have become disconnected or timed out."
          },
          "InstallUpdatesOnBoot": {
            "type": "Boolean",
            "required": false,
            "description": "Whether to install operating system and package updates when the instance boots."
          },
          "LifecycleEventConfiguration": {
            "type": "Object",
            "required": false,
            "description": "The lifecycle events for the AWS OpsWorks layer.",
            "properties": {
              "ShutdownEventConfiguration": {
                "type": "Object",
                "required": true,
                "description": "Specifies the shutdown event configuration for a layer.",
                "properties": {
                  "DelayUntilElbConnectionsDrained": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether to wait for connections to drain from the Elastic Load Balancing load balancers."
                  },
                  "ExecutionTimeout": {
                    "type": "Number",
                    "required": false,
                    "description": "The time, in seconds, that AWS OpsWorks waits after a shutdown event has been triggered before shutting down an instance."
                  }
                }
              }
            }
          },
          "LoadBasedAutoScaling": {
            "type": "Object",
            "required": false,
            "description": "The load-based scaling configuration for the AWS OpsWorks layer.",
            "properties": {
              "Enable": {
                "type": "Boolean",
                "required": true,
                "description": "Whether to enable automatic load-based scaling for the layer."
              },
              "DownScaling": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "AutoScalingThresholds for OpsWorks Layer.",
                "properties": {
                  "CpuThreshold": {
                    "type": "Number",
                    "required": false,
                    "description": "The percentage of CPU utilization that triggers the starting or stopping of instances (scaling)."
                  },
                  "IgnoreMetricsTime": {
                    "type": "Number",
                    "required": false,
                    "description": "The amount of time (in minutes) after a scaling event occurs that AWS OpsWorks should ignore metrics and not start any additional scaling events."
                  },
                  "InstanceCount": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of instances to add or remove when the load exceeds a threshold."
                  },
                  "LoadThreshold": {
                    "type": "Number",
                    "required": false,
                    "description": "The degree of system load that triggers the starting or stopping of instances (scaling). "
                  },
                  "MemoryThreshold": {
                    "type": "Number",
                    "required": false,
                    "description": "The percentage of memory consumption that triggers the starting or stopping of instances (scaling)."
                  },
                  "ThresholdsWaitTime": {
                    "type": "Number",
                    "required": false,
                    "description": "The amount of time, in minutes, that the load must exceed a threshold before instances are added or removed."
                  }
                }
              },
              "UpScaling": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "AutoScalingThresholds for OpsWorks Layer.",
                "properties": {
                  "CpuThreshold": {
                    "type": "Number",
                    "required": false,
                    "description": "The percentage of CPU utilization that triggers the starting or stopping of instances (scaling)."
                  },
                  "IgnoreMetricsTime": {
                    "type": "Number",
                    "required": false,
                    "description": "The amount of time (in minutes) after a scaling event occurs that AWS OpsWorks should ignore metrics and not start any additional scaling events."
                  },
                  "InstanceCount": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of instances to add or remove when the load exceeds a threshold."
                  },
                  "LoadThreshold": {
                    "type": "Number",
                    "required": false,
                    "description": "The degree of system load that triggers the starting or stopping of instances (scaling). "
                  },
                  "MemoryThreshold": {
                    "type": "Number",
                    "required": false,
                    "description": "The percentage of memory consumption that triggers the starting or stopping of instances (scaling)."
                  },
                  "ThresholdsWaitTime": {
                    "type": "Number",
                    "required": false,
                    "description": "The amount of time, in minutes, that the load must exceed a threshold before instances are added or removed."
                  }
                }
              }
            }
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "The AWS OpsWorks layer name."
          },
          "Packages": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The packages for this layer."
          },
          "Shortname": {
            "type": "String",
            "required": true,
            "description": "The layer short name, which is used internally by AWS OpsWorks and by Chef recipes. The short name is also used as the name for the directory where your app files are installed."
          },
          "StackId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::OpsWorks::Stack",
            "description": "The ID of the AWS OpsWorks stack that this layer will be associated with."
          },
          "Type": {
            "type": "String",
            "required": false,
            "description": "The layer type. A stack cannot have more than one layer of the same type."
          },
          "VolumeConfigurations": {
            "type": "Object",
            "required": false,
            "description": "Describes the Amazon EBS volumes for this layer.",
            "properties": {
              "Iops": {
                "type": "Number",
                "required": true,
                "description": "The number of I/O operations per second (IOPS) to provision for the volume."
              },
              "MountPoint": {
                "type": "String",
                "required": false,
                "description": "The volume mount point, such as /dev/sdh."
              },
              "NumberOfDisks": {
                "type": "Number",
                "required": true,
                "description": "The number of disks in the volume."
              },
              "RaidLevel": {
                "type": "Number",
                "required": true,
                "description": "he number of disks in the volume."
              },
              "Size": {
                "type": "Number",
                "required": true,
                "description": "The volume size."
              },
              "VolumeType": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "*",
                  "standard",
                  "io1",
                  "gp2"
                ],
                "description": "The type of volume, such as magnetic or SSD."
              },
              "Encrypted": {
                "type": "Boolean",
                "required": false,
                "description": "Specifies whether an Amazon EBS volume is encrypted."
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Specifies an arbitrary set of tags (key�value pairs) to associate with this AWS OpsWorks layer. Use tags to manage your resources.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          },
          "UseEbsOptimizedInstances": {
            "type": "Boolean",
            "required": false,
            "description": "Whether to use Amazon EBS-optimized instances."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::OpsWorks::Stack": {
    "type": "Object",
    "required": false,
    "description": "Creates an AWS OpsWorks stack.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an AWS OpsWorks stack."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AgentVersion": {
            "type": "String",
            "required": false,
            "description": "The AWS OpsWorks agent version that you want to use."
          },
          "Attributes": {
            "type": "Json",
            "required": false,
            "description": "One or more user-defined key-value pairs to be added to the stack attributes bag."
          },
          "ChefConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Describes the Chef configuration.",
            "properties": {
              "BerkshelfVersion": {
                "type": "String",
                "required": false,
                "description": "The Berkshelf version."
              },
              "ManageBerkshelf": {
                "type": "Boolean",
                "required": false,
                "description": "Whether to enable Berkshelf."
              }
            }
          },
          "CloneAppIds": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "If you're cloning an AWS OpsWorks stack, a list of AWS OpsWorks application stack IDs from the source stack to include in the cloned stack."
          },
          "ClonePermissions": {
            "type": "Boolean",
            "required": false,
            "description": "If you're cloning an AWS OpsWorks stack, indicates whether to clone the source stack's permissions."
          },
          "ConfigurationManager": {
            "type": "Object",
            "required": false,
            "description": "Describes the configuration manager.",
            "properties": {
              "Name": {
                "type": "String",
                "required": false,
                "description": "The name of the configuration manager."
              },
              "Version": {
                "type": "String",
                "required": false,
                "description": "The Chef version."
              }
            }
          },
          "CustomCookbooksSource": {
            "type": "Object",
            "required": false,
            "description": "Contains the information required to retrieve a cookbook from a repository.",
            "properties": {
              "Password": {
                "type": "String",
                "required": false,
                "description": "This parameter depends on the repository type."
              },
              "Revision": {
                "type": "String",
                "required": false,
                "description": "The application's version. With AWS OpsWorks, you can deploy new versions of an application."
              },
              "SshKey": {
                "type": "String",
                "required": false,
                "description": "The repository's SSH key."
              },
              "Type": {
                "type": "String",
                "required": false,
                "description": "The repository type."
              },
              "Url": {
                "type": "String",
                "required": false,
                "description": "The source URL."
              },
              "Username": {
                "type": "String",
                "required": false,
                "description": "This parameter depends on the repository type."
              }
            }
          },
          "CustomJson": {
            "type": "Json",
            "required": false,
            "description": "A user-defined custom JSON object."
          },
          "DefaultAvailabilityZone": {
            "type": "String",
            "required": false,
            "description": "The stack's default Availability Zone, which must be in the specified region."
          },
          "DefaultInstanceProfileArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::InstanceProfile",
            "description": "The Amazon Resource Name (ARN) of an IAM instance profile that is the default profile for all of the stack's Amazon EC2 instances."
          },
          "DefaultOs": {
            "type": "String",
            "required": false,
            "description": "The stack's default operating system."
          },
          "DefaultRootDeviceType": {
            "type": "String",
            "required": false,
            "description": "The default root device type.",
            "allowed-values": [
              "*",
              "ebs",
              "instance-store"
            ]
          },
          "DefaultSshKeyName": {
            "type": "String",
            "required": false,
            "description": "A default SSH key for the stack instances. You can override this value when you create or update an instance."
          },
          "DefaultSubnetId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::Subnet",
            "description": "The stack's default subnet ID. All instances are launched into this subnet unless you specify another subnet ID when you create the instance."
          },
          "EcsClusterArn": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::ECS::Cluster",
            "description": "The Amazon Resource Name (ARN) of the Amazon Elastic Container Service (Amazon ECS) cluster to register with the AWS OpsWorks stack."
          },
          "ElasticIps": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A list of Elastic IP addresses to register with the AWS OpsWorks stack.",
            "properties": {
              "Ip": {
                "type": "String",
                "required": true,
                "description": "The Elastic IP address."
              },
              "Name": {
                "type": "String",
                "required": false,
                "description": "A name for the Elastic IP address."
              }
            }
          },
          "HostnameTheme": {
            "type": "String",
            "required": false,
            "description": "The stack's host name theme, with spaces replaced by underscores."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "The name of the AWS OpsWorks stack."
          },
          "RdsDbInstances": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The Amazon Relational Database Service (Amazon RDS) DB instance to register with the AWS OpsWorks stack.",
            "properties": {
              "DbPassword": {
                "type": "String",
                "required": true,
                "description": "The password of the registered database."
              },
              "DbUser": {
                "type": "String",
                "required": true,
                "description": "The master user name of the registered database."
              },
              "RdsDbInstanceArn": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::RDS::DBInstance",
                "description": "The Amazon Resource Name (ARN) of the Amazon RDS DB instance to register with the AWS OpsWorks stack."
              }
            }
          },
          "ServiceRoleArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The AWS Identity and Access Management (IAM) role that AWS OpsWorks uses to work with AWS resources on your behalf."
          },
          "SourceStackId": {
            "type": "String",
            "required": false,
            "description": "If you're cloning an AWS OpsWorks stack, the stack ID of the source AWS OpsWorks stack to clone."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Specifies an arbitrary set of tags (key�value pairs) to associate with this AWS OpsWorks stack. Use tags to manage your resources.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          },
          "UseCustomCookbooks": {
            "type": "Boolean",
            "required": false,
            "description": "Whether the stack uses custom cookbooks."
          },
          "UseOpsworksSecurityGroups": {
            "type": "Boolean",
            "required": false,
            "description": "Whether to associate the AWS OpsWorks built-in security groups with the stack's layers."
          },
          "VpcId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::Vpc",
            "description": "The ID of the VPC that the stack is to be launched into, which must be in the specified region."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::OpsWorks::UserProfile": {
    "type": "Object",
    "required": false,
    "description": "The AWS::OpsWorks::UserProfile configures SSH access for users who require access to instances in an AWS OpsWorks stack.",
    "return-values": [
      {
        "name": "SshUsername",
        "description": "The user's SSH user name, as a string."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::OpsWorks::UserProfile configures SSH access for users who require access to instances in an AWS OpsWorks stack."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AllowSelfManagement": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether users can use the AWS OpsWorks My Settings page to specify their own SSH public key."
          },
          "IamUserArn": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::User",
            "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) user to associate with this configuration."
          },
          "SshPublicKey": {
            "type": "String",
            "required": false,
            "description": "The public SSH key that is associated with the IAM user. The IAM user must have or be given the corresponding private key to access instances."
          },
          "SshUsername": {
            "type": "String",
            "required": false,
            "description": "The user's SSH user name."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::OpsWorks::Volume": {
    "type": "Object",
    "required": false,
    "description": "The AWS::OpsWorks::Volume resource registers an Amazon Elastic Block Store (Amazon EBS) volume with an AWS OpsWorks stack.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::OpsWorks::Volume resource registers an Amazon Elastic Block Store (Amazon EBS) volume with an AWS OpsWorks stack."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Ec2VolumeId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::EC2::Volume",
            "description": "The ID of the Amazon EBS volume to register with the AWS OpsWorks stack."
          },
          "MountPoint": {
            "type": "String",
            "required": false,
            "description": "The mount point for the Amazon EBS volume, such as /mnt/disk1."
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "A name for the Amazon EBS volume."
          },
          "StackId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::OpsWorks::Stack",
            "description": "The ID of the AWS OpsWorks stack that AWS OpsWorks registers the volume to."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::RDS::DBCluster": {
    "type": "Object",
    "required": false,
    "description": "The AWS::RDS::DBCluster resource creates a cluster, such as an Aurora for Amazon RDS (Amazon Aurora) DB cluster. Amazon Aurora is a fully managed, MySQL-compatible, relational database engine.",
    "return-values": [
      {
        "name": "Endpoint.Address",
        "description": "The connection endpoint for the database. For example: mystack-mydb-1apw1j4phylrk.cg034hpkmmjt.us-east-1.rds.amazonaws.com."
      },
      {
        "name": "Endpoint.Port",
        "description": "The port number on which the database accepts connections. For example: 3306"
      },
      {
        "name": "ReadEndpoint.Address",
        "description": "The reader endpoint for the DB cluster. For example: mystack-mydbcluster-ro-1apw1j4phylrk.cg034hpkmmjt.us-east-2.rds.amazonaws.com."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::RDS::DBCluster resource creates a cluster, such as an Aurora for Amazon RDS (Amazon Aurora) DB cluster. Amazon Aurora is a fully managed, MySQL-compatible, relational database engine."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AvailabilityZones": {
            "type": "String",
            "required": false,
            "description": "A list of Availability Zones (AZs) in which DB instances in the cluster can be created."
          },
          "BackupRetentionPeriod": {
            "type": "Number",
            "required": false,
            "description": "The number of days for which automatic backups are retained."
          },
          "DatabaseName": {
            "type": "String",
            "required": false,
            "description": "The name of your database."
          },
          "DBClusterParameterGroupName": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::RDS::DBClusterParameterGroup",
            "description": "The name of the DB cluster parameter group to associate with this DB cluster."
          },
          "DBSubnetGroupName": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::RDS::DBSecurityGroup",
            "description": "A DB subnet group that you want to associate with this DB cluster."
          },
          "Engine": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "MySQL",
              "mariadb",
              "oracle-se1",
              "oracle-se",
              "oracle-ee",
              "sqlserver-ee",
              "sqlserver-se",
              "sqlserver-ex",
              "sqlserver-web",
              "postgres",
              "aurora",
              "*"
            ],
            "description": "The name of the database engine that you want to use for this DB cluster."
          },
          "EngineVersion": {
            "type": "String",
            "required": false,
            "description": "The version number of the database engine to use."
          },
          "KmsKeyId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::KMS::Key",
            "description": "The Amazon Resource Name (ARN) of the AWS Key Management Service master key that is used to encrypt the database instances in the DB cluster."
          },
          "MasterUsername": {
            "type": "String",
            "required": false,
            "description": "The name of master user for the client DB instance."
          },
          "MasterUserPassword": {
            "type": "String",
            "required": false,
            "description": "The name of master user for the client DB instance."
          },
          "Port": {
            "type": "Number",
            "required": false,
            "description": "The port number on which the database accepts connections."
          },
          "PreferredBackupWindow": {
            "type": "String",
            "required": false,
            "description": "The daily time range during which automated backups are created if automated backups are enabled, using the BackupRetentionPeriod parameter."
          },
          "PreferredMaintenanceWindow": {
            "type": "String",
            "required": false,
            "description": "The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC)."
          },
          "SnapshotIdentifier": {
            "type": "String",
            "required": false,
            "description": "The identifier for the DB cluster snapshot from which you want to restore."
          },
          "StorageEncrypted": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the DB instances in the cluster are encrypted."
          },
          "VpcSecurityGroupIds": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "A list of EC2 VPC security groups to associate with this DB instance."
          },
          "ReplicationSourceIdentifier": {
            "type": "String",
            "required": false,
            "description": "The Amazon Resource Name (ARN) of the source Amazon RDS MySQL DB instance or DB cluster, if this DB cluster is created as a Read Replica."
          },
          "DBClusterIdentifier": {
            "type": "String",
            "required": false,
            "description": "The DB cluster identifier. This parameter is stored as a lowercase string."
          },
          "BacktrackWindow": {
            "type": "Number",
            "required": false,
            "description": "The target backtrack window, in seconds."
          },
          "DeletionProtection": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the DB cluster should have deletion protection enabled."
          },
          "EnableCloudwatchLogsExports": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The list of log types that need to be enabled for exporting to CloudWatch Logs."
          },
          "EnableIAMDatabaseAuthentication": {
            "type": "Boolean",
            "required": false,
            "description": "If set to true, enables mapping of AWS Identity and Access Management (IAM) accounts to database accounts."
          },
          "EngineMode": {
            "type": "String",
            "required": false,
            "description": "The DB engine mode of the DB cluster.",
            "allowed-values": [
              "*",
              "provisioned",
              "serverless"
            ]
          },
          "ScalingConfiguration": {
            "type": "Object",
            "required": false,
            "description": "For DB clusters in serverless DB engine mode, the scaling properties of the DB cluster.",
            "properties": {
              "AutoPause": {
                "type": "Boolean",
                "required": false,
                "description": "A value that specifies whether to allow or disallow automatic pause for an Aurora DB cluster in serverless DB engine mode."
              },
              "MaxCapacity": {
                "type": "Number",
                "required": false,
                "description": "The maximum capacity for an Aurora DB cluster in serverless DB engine mode."
              },
              "MinCapacity": {
                "type": "Number",
                "required": false,
                "description": "The minimum capacity for an Aurora DB cluster in serverless DB engine mode."
              },
              "SecondsUntilAutoPause": {
                "type": "Number",
                "required": false,
                "description": "The time, in seconds, before an Aurora DB cluster in serverless mode is paused."
              }
            }
          },
          "SourceRegion": {
            "type": "String",
            "required": false,
            "description": "The source region."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::RDS::DBClusterParameterGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::RDS::DBClusterParameterGroup resource creates a new Amazon Relational Database Service (Amazon RDS) database (DB) cluster parameter group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::RDS::DBClusterParameterGroup resource creates a new Amazon Relational Database Service (Amazon RDS) database (DB) cluster parameter group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": true,
            "description": "A friendly description for this DB cluster parameter group."
          },
          "Family": {
            "type": "String",
            "required": true,
            "description": "The database family of this DB cluster parameter group."
          },
          "Parameters": {
            "type": "Json",
            "required": true,
            "description": "The parameters to set for this DB cluster parameter group."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::RDS::DBInstance": {
    "type": "Object",
    "required": false,
    "description": "The AWS::RDS::DBInstance type creates an Amazon RDS database instance.",
    "return-values": [
      {
        "name": "Endpoint.Address",
        "description": "The connection endpoint for the database. For example: mystack-mydb-1apw1j4phylrk.cg034hpkmmjt.us-east-1.rds.amazonaws.com."
      },
      {
        "name": "Endpoint.Port",
        "description": "The port number on which the database accepts connections. For example: 3306"
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::RDS::DBInstance type creates an Amazon RDS database instance."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain",
          "Snapshot"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AllocatedStorage": {
            "type": "String",
            "required": true,
            "description": "The allocated storage size specified in gigabytes (GB). If any value is used in the Iops parameter, AllocatedStorage must be at least 100 GB, which corresponds to the minimum Iops value of 1000. If Iops is increased (in 1000 IOPS increments), then AllocatedStorage must also be increased (in 100 GB increments) correspondingly."
          },
          "AllowMajorVersionUpgrade": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether major version upgrades are allowed. Changing this parameter does not result in an outage, and the change is applied asynchronously as soon as possible."
          },
          "AutoMinorVersionUpgrade": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates that minor engine upgrades will be applied automatically to the DB instance during the maintenance window. The default value is true."
          },
          "AvailabilityZone": {
            "type": "String",
            "required": false,
            "description": "The name of the Availability Zone where the DB instance is. You cannot set the AvailabilityZone parameter if the MultiAZ parameter is set to true.",
            "allowed-values": [
              "us-east-1b",
              "us-east-1c",
              "us-east-1d",
              "us-east-1e",
              "us-west-1b",
              "us-west-1c",
              "us-west-2a",
              "us-west-2b",
              "us-west-2c",
              "ap-northeast-1a",
              "ap-northeast-1c",
              "ap-northeast-2a",
              "ap-northeast-2c",
              "ap-south-1a",
              "ap-south-1b",
              "ap-southeast-1a",
              "ap-southeast-1b",
              "ap-southeast-2a",
              "ap-southeast-2b",
              "ap-southeast-2c",
              "sa-east-1a",
              "sa-east-1b",
              "sa-east-1c",
              "eu-west-1a",
              "eu-west-1b",
              "eu-west-1c",
              "eu-central-1a",
              "eu-central-1b"
            ]
          },
          "BackupRetentionPeriod": {
            "type": "String",
            "required": false,
            "description": "The number of days for which automatic DB snapshots are retained."
          },
          "CharacterSetName": {
            "type": "String",
            "required": false,
            "description": "For supported engines, specifies the character set to associate with the database instance."
          },
          "CopyTagsToSnapshot": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether to copy all of the user-defined tags from the DB instance to snapshots of the DB instance."
          },
          "DBClusterIdentifier": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::RDS::DBCluster",
            "description": "The identifier of an existing DB cluster that this instance will be associated with."
          },
          "DBInstanceClass": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "*",
              "db.t1.micro",
              "db.m1.small",
              "db.m1.medium",
              "db.m1.large",
              "db.m1.xlarge",
              "db.m2.xlarge",
              "db.m2.2xlarge",
              "db.m2.4xlarge",
              "db.m3.medium",
              "db.m3.large",
              "db.m3.xlarge",
              "db.m3.2xlarge",
              "db.m4.large",
              "db.m4.xlarge",
              "db.m4.2xlarge",
              "db.m4.4xlarge",
              "db.m4.10xlarge",
              "db.r3.large",
              "db.r3.xlarge",
              "db.r3.2xlarge",
              "db.r3.4xlarge",
              "db.r3.8xlarge",
              "db.t2.micro",
              "db.t2.small",
              "db.t2.medium",
              "db.t2.large"
            ],
            "description": "The name of the compute and memory capacity class of the DB instance."
          },
          "DBInstanceIdentifier": {
            "type": "String",
            "required": false,
            "description": "A name for the DB instance. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the DB instance."
          },
          "DBName": {
            "type": "String",
            "required": false,
            "description": "The name of the initial database of this instance that was provided at create time, if one was specified when the DB instance was created. This same name is returned for the life of the DB instance."
          },
          "DBParameterGroupName": {
            "type": "String",
            "resource-ref-type": "AWS::RDS::DBParameterGroup",
            "required": false,
            "description": "The name of an existing DB parameter group or a reference to an AWS::RDS::DBParameterGroup resource created in the template."
          },
          "DBSecurityGroups": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": "AWS::RDS::DBSecurityGroup",
            "required": false,
            "description": "A list containing the DB security groups to assign to the Amazon RDS instance. The list can contain both the name of existing DB security groups or references to AWS::RDS::DBSecurityGroup resources created in the template."
          },
          "DBSnapshotIdentifier": {
            "type": "String",
            "required": false,
            "description": "The identifier for the DB snapshot to restore from."
          },
          "DBSubnetGroupName": {
            "type": "String",
            "resource-ref-type": "AWS::RDS::DBSubnetGroup",
            "required": false,
            "description": "A DB Subnet Group to associate with this DB instance."
          },
          "Domain": {
            "type": "String",
            "required": false,
            "description": "For an Amazon RDS DB instance that is running Microsoft SQL Server, the Active Directory directory ID to create the instance in."
          },
          "DomainIAMRoleName": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The name of an IAM role that Amazon RDS uses when calling the Directory Service APIs."
          },
          "Engine": {
            "type": "String",
            "required": true,
            "description": "The name of the database engine to be used for this DB instance.",
            "allowed-values": [
              "*",
              "MySQL",
              "mariadb",
              "oracle-se1",
              "oracle-se",
              "oracle-ee",
              "sqlserver-ee",
              "sqlserver-se",
              "sqlserver-ex",
              "sqlserver-web",
              "postgres",
              "aurora"
            ]
          },
          "EngineVersion": {
            "type": "String",
            "required": false,
            "description": "The version number of the database engine to use."
          },
          "Iops": {
            "type": "String",
            "required": false,
            "description": "The number of I/O operations per second (IOPS) that the database should provision. This can be any value from 1000�10,000, in 1000 IOPS increments."
          },
          "KmsKeyId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::KMS::Key",
            "description": "The Amazon Resource Name (ARN) of the AWS Key Management Service master key that is used to encrypt the database instance."
          },
          "LicenseModel": {
            "type": "String",
            "required": false,
            "description": "The license model information for this DB instance."
          },
          "MasterUsername": {
            "type": "String",
            "required": true,
            "description": "The master username for the DB instance."
          },
          "MasterUserPassword": {
            "type": "String",
            "required": true,
            "description": "The master password for the DB instance."
          },
          "MonitoringInterval": {
            "type": "Number",
            "required": false,
            "description": "The interval, in seconds, between points when Amazon RDS collects enhanced monitoring metrics for the DB instance. To disable metrics collection, specify 0."
          },
          "MonitoringRoleArn": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The ARN of the AWS Identity and Access Management (IAM) role that permits Amazon RDS to send enhanced monitoring metrics to Amazon CloudWatch."
          },
          "MultiAZ": {
            "type": "Boolean",
            "required": false,
            "description": "Specifies if the DB instance is a multiple availability-zone deployment. You cannot set the AvailabilityZone parameter if the MultiAZ parameter is set to true."
          },
          "OptionGroupName": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::RDS::OptionGroup",
            "description": "An option group that this database instance is associated with."
          },
          "Port": {
            "type": "String",
            "required": false,
            "description": "The port for the instance."
          },
          "PreferredBackupWindow": {
            "type": "String",
            "required": false,
            "description": "The daily time range during which automated backups are created if automated backups are enabled, as determined by the BackupRetentionPeriod."
          },
          "PreferredMaintenanceWindow": {
            "type": "String",
            "required": false,
            "description": "The weekly time range (in UTC) during which system maintenance can occur."
          },
          "PubliclyAccessible": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the database instance is an Internet-facing instance. If you specify true, an instance is created with a publicly resolvable DNS name, which resolves to a public IP address. If you specify false, an internal instance is created with a DNS name that resolves to a private IP address."
          },
          "SourceDBInstanceIdentifier": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::RDS::DBInstance",
            "description": "If you want to create a read replica DB instance, specify the ID of the source DB instance."
          },
          "StorageEncrypted": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the database instance is encrypted."
          },
          "StorageType": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "standard",
              "gp2",
              "io1",
              "*"
            ],
            "description": "The storage type associated with this database instance."
          },
          "Timezone": {
            "type": "String",
            "required": false,
            "description": "The time zone of the DB instance, which you can specify to match the time zone of your applications."
          },
          "VPCSecurityGroups": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "A list of the VPC security groups to assign to the Amazon RDS instance."
          },
          "SourceRegion": {
            "type": "String",
            "required": false,
            "description": "The ID of the region that contains the source DB instance for the read replica."
          },
          "DeleteAutomatedBackups": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether automated backups should be deleted (true) or retained (false) when you delete a DB instance. The default is true."
          },
          "DeletionProtection": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the DB instance should have deletion protection enabled."
          },
          "EnableCloudwatchLogsExports": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The list of log types that need to be enabled for exporting to CloudWatch Logs."
          },
          "EnableIAMDatabaseAuthentication": {
            "type": "Boolean",
            "required": false,
            "description": "If set to true, enables mapping of AWS Identity and Access Management (IAM) accounts to database accounts."
          },
          "EnablePerformanceInsights": {
            "type": "Boolean",
            "required": false,
            "description": "If set to true, enables Performance Insights for the DB instance."
          },
          "PerformanceInsightsKMSKeyId": {
            "type": "String",
            "required": false,
            "description": "The AWS KMS key identifier for encryption of Performance Insights data."
          },
          "PerformanceInsightsRetentionPeriod": {
            "type": "Number",
            "required": false,
            "description": "The amount of time, in days, to retain Performance Insights data."
          },
          "ProcessorFeatures": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.",
            "properties": {
              "Name": {
                "type": "String",
                "required": false,
                "description": "The name of the processor feature",
                "allowed-values": [
                  "*",
                  "coreCount",
                  "threadsPerCore"
                ]
              },
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value of a processor feature name."
              }
            }
          },
          "PromotionTier": {
            "type": "Number",
            "required": false,
            "description": "A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance."
          },
          "UseDefaultProcessorFeatures": {
            "type": "Boolean",
            "required": false,
            "description": "Use default processor features."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      }
    }
  }
,
  "AWS::RDS::DBParameterGroup": {
    "type": "Object",
    "required": false,
    "description": "Creates a custom parameter group for an RDS database family.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a custom parameter group for an RDS database family."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": true,
            "description": "A friendly description of the RDS parameter group. For example, \"My Parameter Group\"."
          },
          "Family": {
            "type": "String",
            "required": true,
            "description": "The database family of this RDS parameter group. For example, \"MySQL5.1\"."
          },
          "Parameters": {
            "type": "Json",
            "required": true,
            "description": "The parameters to set for this RDS parameter group."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::RDS::DBSecurityGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::RDS::DBSecurityGroup type is used to create or update an Amazon RDS DB Security Group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::RDS::DBSecurityGroup type is used to create or update an Amazon RDS DB Security Group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "EC2VpcId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::VPC",
            "required": false,
            "description": "The Id of VPC. Indicates which VPC this DB Security Group should belong to. Required: Conditional. Must be specified to create a DB Security Group for a VPC; may not be specified otherwise."
          },
          "DBSecurityGroupIngress": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "Network ingress authorization for an Amazon EC2 security group or an IP address range.",
            "properties": {
              "CIDRIP": {
                "type": "String",
                "required": false,
                "description": "The IP range to authorize."
              },
              "EC2SecurityGroupId": {
                "type": "String",
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "required": false,
                "description": "Id of the VPC or EC2 Security Group to authorize."
              },
              "EC2SecurityGroupName": {
                "type": "String",
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "required": false,
                "description": "Name of the EC2 Security Group to authorize."
              },
              "EC2SecurityGroupOwnerId": {
                "type": "String",
                "required": false,
                "description": "AWS Account Number of the owner of the EC2 Security Group specified in the EC2SecurityGroupName parameter. The AWS Access Key ID is not an acceptable value."
              }
            }
          },
          "GroupDescription": {
            "type": "String",
            "required": true,
            "description": "Description of the security group."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::RDS::DBSecurityGroupIngress": {
    "type": "Object",
    "required": false,
    "description": "The AWS::RDS::DBSecurityGroupIngress type enables ingress to a DBSecurityGroup using one of two forms of authorization.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::RDS::DBSecurityGroupIngress type enables ingress to a DBSecurityGroup using one of two forms of authorization."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CIDRIP": {
            "type": "String",
            "required": false,
            "description": "The IP range to authorize."
          },
          "DBSecurityGroupName": {
            "type": "String",
            "resource-ref-type": "AWS::RDS::DBSecurityGroup",
            "required": false,
            "description": "The name (ARN) of the AWS::RDS::DBSecurityGroup to which this ingress will be added."
          },
          "EC2SecurityGroupId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "Id of the VPC or EC2 Security Group to authorize."
          },
          "EC2SecurityGroupName": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "Name of the EC2 Security Group to authorize."
          },
          "EC2SecurityGroupOwnerId": {
            "type": "String",
            "required": false,
            "description": "AWS Account Number of the owner of the EC2 Security Group specified in the EC2SecurityGroupName parameter. The AWS Access Key ID is not an acceptable value."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::RDS::DBSubnetGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::RDS::DBSubnetGroup type creates DB subnet group. DB subnet groups must contain at least one subnet in each AZ in the region.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::RDS::DBSubnetGroup type creates DB subnet group. DB subnet groups must contain at least one subnet in each AZ in the region."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DBSubnetGroupDescription": {
            "type": "String",
            "required": true,
            "description": "The description for the DB Subnet Group."
          },
          "SubnetIds": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": "AWS::EC2::Subnet",
            "required": true,
            "description": "The EC2 Subnet IDs for the DB Subnet Group."
          },
          "DBSubnetGroupName": {
            "type": "String",
            "required": false,
            "description": "The name for the DB Subnet Group. This value is stored as a lowercase string."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::RDS::EventSubscription": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS::RDS::EventSubscription resource to get notifications for Amazon Relational Database Service events through the Amazon Simple Notification Service.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS::RDS::EventSubscription resource to get notifications for Amazon Relational Database Service events through the Amazon Simple Notification Service."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Enabled": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether to activate the subscription. If you don't specify this property, AWS CloudFormation activates the subscription."
          },
          "EventCategories": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "A list of event categories that you want to subscribe to for a given source type. If you don't specify this property, you are notified about all event categories."
          },
          "SnsTopicArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::SNS::Topic",
            "description": "The Amazon Resource Name (ARN) of an Amazon SNS topic that you want to send event notifications to."
          },
          "SourceIds": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": [
              "AWS::RDS::DBInstance",
              "*"
            ],
            "description": "A list of identifiers for which Amazon RDS provides notification events."
          },
          "SourceType": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "db-instance",
              "*"
            ],
            "description": "The type of source for which Amazon RDS provides notification events."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::RDS::OptionGroup": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS::RDS::OptionGroup resource to create an option group that can make managing data and databases easier.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS::RDS::OptionGroup resource to create an option group that can make managing data and databases easier."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "EngineName": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "MySQL",
              "mariadb",
              "oracle-se1",
              "oracle-se",
              "oracle-ee",
              "sqlserver-ee",
              "sqlserver-se",
              "sqlserver-ex",
              "sqlserver-web",
              "postgres",
              "aurora",
              "*"
            ],
            "description": "The name of the database engine that this option group is associated with."
          },
          "MajorEngineVersion": {
            "type": "String",
            "required": true,
            "description": "The major version number of the database engine that this option group is associated with."
          },
          "OptionGroupDescription": {
            "type": "String",
            "required": true,
            "description": "A description of the option group."
          },
          "OptionConfigurations": {
            "type": "Object",
            "required": true,
            "description": "The configurations for this option group.",
            "properties": {
              "DBSecurityGroupMemberships": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "resource-ref-type": "AWS::RDS::DBSecurityGroup",
                "description": "A list of database security group names for this option. If the option requires access to a port, the security groups must allow access to that port. If you specify this property, don't specify the VPCSecurityGroupMemberships property."
              },
              "OptionName": {
                "type": "String",
                "required": true,
                "description": "The name of the option."
              },
              "OptionSettings": {
                "type": "Object",
                "required": false,
                "description": "The settings for this option.",
                "properties": {
                  "Name": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the option setting that you want to specify."
                  },
                  "Value": {
                    "type": "String",
                    "required": false,
                    "description": "The value of the option setting."
                  }
                }
              },
              "Port": {
                "type": "Number",
                "required": false,
                "description": "The port number that this option uses."
              },
              "VpcSecurityGroupMemberships": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "description": "A list of VPC security group IDs for this option. If the option requires access to a port, the security groups must allow access to that port. If you specify this property, don't specify the DBSecurityGroupMemberships property."
              },
              "OptionVersion": {
                "type": "String",
                "required": false,
                "description": "The version for the option."
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Redshift::Cluster": {
    "type": "Object",
    "required": false,
    "description": "Creates an Amazon Redshift cluster. A cluster is a fully managed data warehouse that consists of set of compute nodes.",
    "return-values": [
      {
        "name": "Endpoint.Address",
        "description": "The connection endpoint for the Amazon Redshift cluster. For example: examplecluster.cg034hpkmmjt.us-east-1.redshift.amazonaws.com ."
      },
      {
        "name": "Endpoint.Port",
        "description": "The port number on which the Amazon Redshift cluster accepts connections. For example: 5439."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an Amazon Redshift cluster. A cluster is a fully managed data warehouse that consists of set of compute nodes."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AllowVersionUpgrade": {
            "type": "Boolean",
            "required": false,
            "description": "When a new version of the Amazon Redshift is released, indicates whether upgrades can be applied to the engine that is running on the cluster. The upgrades are applied during the maintenance window."
          },
          "AutomatedSnapshotRetentionPeriod": {
            "type": "Number",
            "required": false,
            "description": "The number of days that automated snapshots are retained. If you set the value to 0, automated snapshots are disabled."
          },
          "AvailabilityZone": {
            "type": "String",
            "required": false,
            "description": "The Amazon EC2 Availability Zone in which you want to provision your Amazon Redshift cluster. For example, if you have several Amazon EC2 instances running in a specific Availability Zone, you might want the cluster to be provisioned in the same zone in order to decrease network latency."
          },
          "ClusterParameterGroupName": {
            "type": "String",
            "resource-ref-type": "AWS::Redshift::ClusterParameterGroup",
            "required": false,
            "description": "The name of the parameter group that you want to associate with this cluster."
          },
          "ClusterSecurityGroups": {
            "type": "String",
            "resource-ref-type": "AWS::Redshift::ClusterSecurityGroup",
            "required": false,
            "description": "A list of security groups that you want to associate with this cluster."
          },
          "ClusterSubnetGroupName": {
            "type": "String",
            "resource-ref-type": "AWS::Redshift::ClusterSubnetGroup",
            "required": false,
            "description": "The name of a cluster subnet group that you want to associate with this cluster."
          },
          "ClusterType": {
            "type": "String",
            "required": true,
            "description": "The type of cluster. You can specify single-node or multi-node.",
            "allowed-values": [
              "single-node",
              "multi-node"
            ]
          },
          "ClusterVersion": {
            "type": "String",
            "required": false,
            "description": "The Amazon Redshift engine version that you want to deploy on the cluster."
          },
          "DBName": {
            "type": "String",
            "required": true,
            "description": "The name of the first database that is created when the cluster is created."
          },
          "ElasticIp": {
            "type": "String",
            "required": false,
            "description": "The Elastic IP (EIP) address for the cluster."
          },
          "Encrypted": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the data in the cluster is encrypted at rest."
          },
          "HsmClientCertificateIdentifier": {
            "type": "String",
            "required": false,
            "description": "Specifies the name of the HSM client certificate that the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM."
          },
          "HsmConfigurationIdentifier": {
            "type": "String",
            "required": false,
            "description": "Specifies the name of the HSM configuration that contains the information that the Amazon Redshift cluster can use to retrieve and store keys in an HSM."
          },
          "IamRoles": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "A list of AWS Identity and Access Management (IAM) roles that the cluster can use to access other AWS services. Supply the IAM roles by their Amazon Resource Name (ARN)."
          },
          "KmsKeyId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::KMS::Key",
            "description": "The AWS Key Management Service (AWS KMS) key ID that you want to use to encrypt data in the cluster."
          },
          "MasterUsername": {
            "type": "String",
            "required": true,
            "description": "The user name that is associated with the master user account for this cluster."
          },
          "MasterUserPassword": {
            "type": "String",
            "required": true,
            "description": "The password associated with the master user account for this cluster."
          },
          "NodeType": {
            "type": "String",
            "required": true,
            "description": "The node type that is provisioned for this cluster.",
            "allowed-values": [
              "dw.hs1.xlarge",
              "dw.hs1.8xlarge",
              "*"
            ]
          },
          "NumberOfNodes": {
            "type": "Number",
            "required": false,
            "description": "The number of compute nodes in the cluster. If you specify multi-node for the ClusterType parameter, you must specify a number greater than 1."
          },
          "OwnerAccount": {
            "type": "String",
            "required": false,
            "description": "When you restore from a snapshot from another AWS account, the 12-digit AWS account ID that contains that snapshot."
          },
          "Port": {
            "type": "Number",
            "required": false,
            "description": "The port number on which the cluster accepts incoming connections."
          },
          "PreferredMaintenanceWindow": {
            "type": "String",
            "required": false,
            "description": "The weekly time range (in UTC) during which automated cluster maintenance can occur. The format of the time range is ddd:hh24:mi-ddd:hh24:mi."
          },
          "PubliclyAccessible": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the cluster can be accessed from a public network."
          },
          "SnapshotClusterIdentifier": {
            "type": "String",
            "required": false,
            "description": "The cluster identifier for which you want a snapshot."
          },
          "SnapshotIdentifier": {
            "type": "String",
            "required": false,
            "description": "A unique identifier for the snapshot that you are requesting. This identifier must be unique for all snapshots within the AWS account."
          },
          "VpcSecurityGroupIds": {
            "type": "String",
            "required": false,
            "description": "A list of VPC security groups that are associated with this cluster.",
            "resource-ref-type": "AWS::EC2::SecurityGroup"
          },
          "LoggingProperties": {
            "type": "Object",
            "required": false,
            "description": "Configures Amazon Redshift to create audit log files, containing logging information such as queries and connection attempts, for this cluster.",
            "properties": {
              "BucketName": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::S3::Bucket",
                "description": "The name of an existing S3 bucket where the log files are to be stored."
              },
              "S3KeyPrefix": {
                "type": "String",
                "required": false,
                "description": "The prefix applied to the log file names."
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Specifies an arbitrary set of tags (key�value pairs) to associate with this cluster. Use tags to manage your resources.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          },
          "ClusterIdentifier": {
            "type": "String",
            "required": false,
            "description": "The unique identifier of the cluster."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Redshift::ClusterParameterGroup": {
    "type": "Object",
    "required": false,
    "description": "Creates an Amazon Redshift parameter group that you can associate with an Amazon Redshift cluster. The parameters in the group apply to all the databases that you create in the cluster.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an Amazon Redshift parameter group that you can associate with an Amazon Redshift cluster. The parameters in the group apply to all the databases that you create in the cluster."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the parameter group."
          },
          "ParameterGroupFamily": {
            "type": "String",
            "required": true,
            "description": "The Amazon Redshift engine version that applies to this cluster parameter group. The cluster engine version determines the set of parameters that you can specify in the Parameters property."
          },
          "Parameters": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A description of the parameter group.",
            "properties": {
              "ParameterName": {
                "type": "String",
                "required": true,
                "description": "The name of the parameter."
              },
              "ParameterValue": {
                "type": "String",
                "required": true,
                "description": "The value of the parameter."
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Specifies an arbitrary set of tags (key�value pairs) to associate with this parameter group. Use tags to manage your resources.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Redshift::ClusterSecurityGroup": {
    "type": "Object",
    "required": false,
    "description": "Creates an Amazon Redshift security group. You use security groups to control access to Amazon Redshift clusters that are not in a VPC.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an Amazon Redshift security group. You use security groups to control access to Amazon Redshift clusters that are not in a VPC."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the security group."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Specifies an arbitrary set of tags (key�value pairs) to associate with this security group. Use tags to manage your resources.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Redshift::ClusterSecurityGroupIngress": {
    "type": "Object",
    "required": false,
    "description": "Specifies inbound (ingress) rules for an Amazon Redshift security group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Specifies inbound (ingress) rules for an Amazon Redshift security group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ClusterSecurityGroupName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Redshift::ClusterSecurityGroup",
            "description": "The name of the Amazon Redshift security group that will be associated with the ingress rule."
          },
          "CIDRIP": {
            "type": "String",
            "required": false,
            "description": "The IP address range that has inbound access to the Amazon Redshift security group."
          },
          "EC2SecurityGroupName": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "description": "The Amazon EC2 security group that will be added the Amazon Redshift security group."
          },
          "EC2SecurityGroupOwnerId": {
            "type": "String",
            "required": false,
            "description": "The 12-digit AWS account number of the owner of the Amazon EC2 security group that is specified by the EC2SecurityGroupName parameter."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Redshift::ClusterSubnetGroup": {
    "type": "Object",
    "required": false,
    "description": "Creates an Amazon Redshift subnet group. You must provide a list of one or more subnets in your existing Amazon VPC when creating an Amazon Redshift subnet group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an Amazon Redshift subnet group. You must provide a list of one or more subnets in your existing Amazon VPC when creating an Amazon Redshift subnet group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the security group."
          },
          "SubnetIds": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::Subnet",
            "description": "A list of VPC subnet IDs. You can modify a maximum of 20 subnets."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Specifies an arbitrary set of tags (key�value pairs) to associate with this subnet group. Use tags to manage your resources.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Route53::HealthCheck": {
    "type": "Object",
    "required": false,
    "description": "You can use the AWS::Route53::HealthCheck resource to check the health of your resources before Amazon Route 53 responds to a DNS query.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "You can use the AWS::Route53::HealthCheck resource to check the health of your resources before Amazon Route 53 responds to a DNS query."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "HealthCheckConfig": {
            "type": "Object",
            "required": false,
            "description": "An Amazon Route 53 health check.",
            "properties": {
              "AlarmIdentifier": {
                "type": "Object",
                "required": false,
                "description": "Identifies the CloudWatch alarm that you want Amazon Route 53 health checkers to use to determine whether this health check is healthy.",
                "properties": {
                  "Name": {
                    "type": "String",
                    "required": true,
                    "description": "The name of the Amazon CloudWatch alarm that you want Amazon Route 53 health checkers to use to determine whether this health check is healthy."
                  },
                  "Region": {
                    "type": "String",
                    "required": true,
                    "description": "A complex type that identifies the CloudWatch alarm that you want Amazon Route 53 health checkers to use to determine whether this health check is healthy. For example, us-west-2."
                  }
                }
              },
              "ChildHealthChecks": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "(CALCULATED Health Checks Only) A complex type that contains one ChildHealthCheck element for each health check that you want to associate with a CALCULATED health check."
              },
              "EnableSNI": {
                "type": "Boolean",
                "required": false,
                "description": "Specifies whether you want Amazon Route 53 to send the value of FullyQualifiedDomainName to the endpoint in the client_hello message during TLS negotiation."
              },
              "FailureThreshold": {
                "type": "Number",
                "required": false,
                "description": "The number of consecutive health checks that an endpoint must pass or fail for Amazon Route 53 to change the current status of the endpoint from unhealthy to healthy or healthy to unhealthy."
              },
              "FullyQualifiedDomainName": {
                "type": "String",
                "required": false,
                "description": "If you specified the IPAddress property, the value that you want Amazon Route 53 to pass in the host header in all health checks except for TCP health checks. If you don't specify an IP address, the domain that Amazon Route 53 sends a DNS request to. Amazon Route 53 uses the IP address that the DNS returns to check the health of the endpoint."
              },
              "HealthThreshold": {
                "type": "Number",
                "required": false,
                "description": "The number of child health checks that are associated with a CALCULATED health that Amazon Route 53 must consider healthy for the CALCULATED health check to be considered healthy."
              },
              "InsufficientDataHealthStatus": {
                "type": "String",
                "required": false,
                "description": "When Amazon CloudWatch has insufficient data about the metric to determine the alarm state, the status that you want Amazon Route 53 to assign to the health check."
              },
              "Inverted": {
                "type": "Boolean",
                "required": false,
                "description": "Specifies whether you want Amazon Route 53 to invert the status of a health check, for example, to consider a health check unhealthy when it otherwise would be considered healthy."
              },
              "IPAddress": {
                "type": "String",
                "required": false,
                "description": "The IPv4 IP address of the endpoint on which you want Amazon Route 53 to perform health checks. If you don't specify an IP address, Amazon Route 53 sends a DNS request to resolve the domain name that you specify in the FullyQualifiedDomainName property."
              },
              "MeasureLatency": {
                "type": "Boolean",
                "required": false,
                "description": "Specifies whether you want Amazon Route 53 to measure the latency between health checkers in multiple AWS regions and your endpoint and display CloudWatch latency graphs on the Health Checks page in the Amazon Route 53 console."
              },
              "Port": {
                "type": "Number",
                "required": false,
                "description": "The port on the endpoint on which you want Amazon Route 53 to perform health checks."
              },
              "RequestInterval": {
                "type": "Number",
                "required": false,
                "description": "The number of seconds between the time that Amazon Route 53 gets a response from your endpoint and the time that it sends the next health-check request. Each Amazon Route 53 health checker makes requests at this interval."
              },
              "ResourcePath": {
                "type": "String",
                "required": false,
                "description": "The path that you want Amazon Route 53 to request when performing health checks. The path can be any value for which your endpoint returns an HTTP status code of 2xx or 3xx when the endpoint is healthy, such as /docs/route53-health-check.html."
              },
              "SearchString": {
                "type": "String",
                "required": false,
                "description": "If the value of the Type property is HTTP_STR_MATCH or HTTP_STR_MATCH, the string that you want Amazon Route 53 to search for in the response body from the specified resource. If the string appears in the response body, Amazon Route 53 considers the resource healthy."
              },
              "Type": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "*",
                  "HTTP",
                  "HTTPS",
                  "HTTP_STR_MATCH",
                  "HTTPS_STR_MATCH",
                  "TCP"
                ],
                "description": "The type of health check that you want to create, which indicates how Amazon Route 53 determines whether an endpoint is healthy. You can specify HTTP, HTTPS, HTTP_STR_MATCH, HTTPS_STR_MATCH, or TCP."
              },
              "Regions": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The regions from which you want Amazon Route 53 health checkers to check the specified endpoint."
              }
            }
          },
          "HealthCheckTags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Route53::HostedZone": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Route53::HostedZone resource creates a hosted zone, which can contain a collection of record sets for a domain.",
    "return-values": [
      {
        "name": "NameServers",
        "description": "Returns the set of name servers for the specific hosted zone. For example: ns1.example.com."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Route53::HostedZone resource creates a hosted zone, which can contain a collection of record sets for a domain."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "HostedZoneConfig": {
            "type": "Object",
            "required": false,
            "description": "A complex type that contains an optional comment about your hosted zone.",
            "properties": {
              "Comment": {
                "type": "String",
                "required": false,
                "description": "Any comments that you want to include about the hosted zone."
              }
            }
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "The name of the domain. For resource record types that include a domain name, specify a fully qualified domain name."
          },
          "VPCs": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "One or more VPCs that you want to associate with this hosted zone. When you specify this property, AWS CloudFormation creates a private hosted zone.",
            "properties": {
              "VPCId": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::EC2::VPC",
                "description": "The ID of the Amazon VPC that you want to associate with the hosted zone."
              },
              "VPCRegion": {
                "type": "String",
                "required": true,
                "description": "The region in which the Amazon VPC was created as specified in the VPCId property."
              }
            }
          },
          "QueryLoggingConfig": {
            "type": "Object",
            "required": false,
            "description": "The configuration for DNS query logging.",
            "properties": {
              "CloudWatchLogsLogGroupArn": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::Log::LogGroup",
                "description": "The Amazon Resource Name (ARN) for the log group that you want Amazon Route 53 to send query logs to."
              }
            }
          },
          "HostedZoneTags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Route53::RecordSet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Route53::RecordSet type can be used as a standalone resource or as an embedded property in the AWS::Route53::RecordSetGroup type.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Route53::RecordSet type can be used as a standalone resource or as an embedded property in the AWS::Route53::RecordSetGroup type."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AliasTarget": {
            "type": "Object",
            "required": false,
            "description": "Alias resource record sets only: Information about the domain to which you are redirecting traffic. Required: Conditional. Required if you are creating an alias resource record set.",
            "properties": {
              "DNSName": {
                "type": "String",
                "required": true,
                "description": "The DNS name of the Load Balancer that is the target of the alias."
              },
              "EvaluateTargetHealth": {
                "type": "Boolean",
                "required": true,
                "description": "Whether Amazon Route 53 checks the health of the resource record sets in the alias target when responding to DNS queries."
              },
              "HostedZoneId": {
                "type": "String",
                "required": true,
                "description": "The hosted zone name ID of the Load Balancer that is the target of the alias."
              }
            }
          },
          "Comment": {
            "type": "String",
            "required": false,
            "description": "Any comments you want to include about the hosted zone."
          },
          "Failover": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "PRIMARY",
              "SECONDARY"
            ],
            "description": "Designates the record set as a PRIMARY or SECONDARY failover record set."
          },
          "GeoLocation": {
            "type": "Object",
            "required": false,
            "description": "Describes how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.",
            "properties": {
              "ContinentCode": {
                "type": "String",
                "required": false,
                "description": "All DNS queries from the continent that you specified are routed to this resource record set. If you specify this property, omit the CountryCode and SubdivisionCode properties."
              },
              "CountryCode": {
                "type": "String",
                "required": false,
                "description": "All DNS queries from the country that you specified are routed to this resource record set. If you specify this property, omit the ContinentCode property."
              },
              "SubdivisionCode": {
                "type": "String",
                "required": false,
                "description": "If you specified US for the country code, you can specify a state in the United States. All DNS queries from the state that you specified are routed to this resource record set. If you specify this property, you must specify US for the CountryCode and omit the ContinentCode property."
              }
            }
          },
          "HealthCheckId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::Route53::HealthCheck",
            "description": "The health check ID that you want to apply to this record set. Route 53 returns this resource record set in response to a DNS query only while record set is healthy."
          },
          "HostedZoneId": {
            "type": "String",
            "required": false,
            "description": "The ID of the hosted zone. Required: Conditional. You must specify either the HostedZoneName or HostedZoneId, but you cannot specify both."
          },
          "HostedZoneName": {
            "type": "String",
            "required": false,
            "description": "The name of the domain for the hosted zone where you want to add the record set. Required: Conditional. You must specify either the HostedZoneName or HostedZoneId, but you cannot specify both."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "The name of the domain. This must be a fully-specified domain, ending with a period as the last label indication. If you omit the final period, Amazon Route 53 assumes the domain is relative to the root."
          },
          "Region": {
            "type": "String",
            "required": false,
            "description": "Latency resource record sets only: The Amazon EC2 region where the resource that is specified in this resource record set resides. The resource typically is an AWS resource, for example, Amazon EC2 instance or an Elastic Load Balancing load balancer, and is referred to by an IP address or a DNS domain name, depending on the record type."
          },
          "ResourceRecords": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::EIP",
            "description": "List of resource records to add. Each record should be in the format appropriate for the record type specified by the Type property. Required: Conditional. Required if TTL is specified."
          },
          "SetIdentifier": {
            "type": "String",
            "required": false,
            "description": "A unique identifier that differentiates among multiple resource record sets that have the same combination of DNS name and type. Required: Conditional. Required if you are creating a weighted resource record set."
          },
          "TTL": {
            "type": "String",
            "required": false,
            "description": "The resource record cache time to live (TTL), in seconds. If TTL is specified, ResourceRecords is also required."
          },
          "Type": {
            "type": "String",
            "required": true,
            "description": "The type of records to add.",
            "allowed-values": [
              "A",
              "AAAA",
              "CNAME",
              "MX",
              "NS",
              "PTR",
              "SOA",
              "SPF",
              "SRV",
              "TXT"
            ]
          },
          "Weight": {
            "type": "Number",
            "required": false,
            "description": "Weighted resource record sets only: Among resource record sets that have the same combination of DNS name and type, a value that determines what portion of traffic for the current resource record set is routed to the associated location. Required: Conditional. Required if you are creating a weighted resource record set."
          },
          "MultiValueAnswer": {
            "type": "Boolean",
            "required": false,
            "description": "To route traffic approximately randomly to multiple resources, such as web servers, create one multivalue answer record for each resource and specify true for MultiValueAnswer."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Route53::RecordSetGroup": {
    "type": "Object",
    "required": false,
    "description": "Creates or updates a new Amazon Route 53RecordSetGroup.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates or updates a new Amazon Route 53RecordSetGroup."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "HostedZoneId": {
            "type": "String",
            "required": false,
            "description": "The ID of the hosted zone. Required: Conditional: You must specify either the HostedZoneName or HostedZoneId, but you cannot specify both."
          },
          "HostedZoneName": {
            "type": "String",
            "required": false,
            "description": "The name of the domain for the hosted zone where you want to add the record set. Required: Conditional. You must specify either the HostedZoneName or HostedZoneId, but you cannot specify both."
          },
          "Comment": {
            "type": "String",
            "required": false,
            "description": "Any comments you want to include about the hosted zone."
          },
          "RecordSets": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "List of resource record sets to add.",
            "properties": {
              "AliasTarget": {
                "type": "Object",
                "required": false,
                "description": "Alias resource record sets only: Information about the domain to which you are redirecting traffic. Required: Conditional. Required if you are creating an alias resource record set.",
                "properties": {
                  "DNSName": {
                    "type": "String",
                    "required": true,
                    "description": "The DNS name of the Load Balancer that is the target of the alias."
                  },
                  "EvaluateTargetHealth": {
                    "type": "Boolean",
                    "required": true,
                    "description": "Whether Amazon Route 53 checks the health of the resource record sets in the alias target when responding to DNS queries."
                  },
                  "HostedZoneId": {
                    "type": "String",
                    "required": true,
                    "description": "The hosted zone name ID of the Load Balancer that is the target of the alias."
                  }
                }
              },
              "Comment": {
                "type": "String",
                "required": false,
                "description": "Any comments you want to include about the hosted zone."
              },
              "Failover": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "PRIMARY",
                  "SECONDARY"
                ],
                "description": "Designates the record set as a PRIMARY or SECONDARY failover record set."
              },
              "GeoLocation": {
                "type": "Object",
                "required": false,
                "description": "Describes how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.",
                "properties": {
                  "ContinentCode": {
                    "type": "String",
                    "required": false,
                    "description": "All DNS queries from the continent that you specified are routed to this resource record set. If you specify this property, omit the CountryCode and SubdivisionCode properties."
                  },
                  "CountryCode": {
                    "type": "String",
                    "required": false,
                    "description": "All DNS queries from the country that you specified are routed to this resource record set. If you specify this property, omit the ContinentCode property."
                  },
                  "SubdivisionCode": {
                    "type": "String",
                    "required": false,
                    "description": "If you specified US for the country code, you can specify a state in the United States. All DNS queries from the state that you specified are routed to this resource record set. If you specify this property, you must specify US for the CountryCode and omit the ContinentCode property."
                  }
                }
              },
              "HealthCheckId": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::Route53::HealthCheck",
                "description": "The health check ID that you want to apply to this record set. Route 53 returns this resource record set in response to a DNS query only while record set is healthy."
              },
              "HostedZoneId": {
                "type": "String",
                "required": false,
                "description": "The ID of the hosted zone. Required: Conditional. You must specify either the HostedZoneName or HostedZoneId, but you cannot specify both."
              },
              "HostedZoneName": {
                "type": "String",
                "required": false,
                "description": "The name of the domain for the hosted zone where you want to add the record set. Required: Conditional. You must specify either the HostedZoneName or HostedZoneId, but you cannot specify both."
              },
              "Name": {
                "type": "String",
                "required": true,
                "description": "The name of the domain. This must be a fully-specified domain, ending with a period as the last label indication. If you omit the final period, Amazon Route 53 assumes the domain is relative to the root."
              },
              "Region": {
                "type": "String",
                "required": false,
                "description": "Latency resource record sets only: The Amazon EC2 region where the resource that is specified in this resource record set resides. The resource typically is an AWS resource, for example, Amazon EC2 instance or an Elastic Load Balancing load balancer, and is referred to by an IP address or a DNS domain name, depending on the record type."
              },
              "ResourceRecords": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "resource-ref-type": "AWS::EC2::EIP",
                "description": "List of resource records to add. Each record should be in the format appropriate for the record type specified by the Type property. Required: Conditional. Required if TTL is specified."
              },
              "SetIdentifier": {
                "type": "String",
                "required": false,
                "description": "A unique identifier that differentiates among multiple resource record sets that have the same combination of DNS name and type. Required: Conditional. Required if you are creating a weighted resource record set."
              },
              "TTL": {
                "type": "String",
                "required": false,
                "description": "The resource record cache time to live (TTL), in seconds. If TTL is specified, ResourceRecords is also required."
              },
              "Type": {
                "type": "String",
                "required": true,
                "description": "The type of records to add.",
                "allowed-values": [
                  "A",
                  "AAAA",
                  "CNAME",
                  "MX",
                  "NS",
                  "PTR",
                  "SOA",
                  "SPF",
                  "SRV",
                  "TXT"
                ]
              },
              "Weight": {
                "type": "Number",
                "required": false,
                "description": "Weighted resource record sets only: Among resource record sets that have the same combination of DNS name and type, a value that determines what portion of traffic for the current resource record set is routed to the associated location. Required: Conditional. Required if you are creating a weighted resource record set."
              },
              "MultiValueAnswer": {
                "type": "Boolean",
                "required": false,
                "description": "To route traffic approximately randomly to multiple resources, such as web servers, create one multivalue answer record for each resource and specify true for MultiValueAnswer."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Route53Resolver::ResolverEndpoint": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Route53Resolver::ResolverEndpoint resource includes settings for inbound or outbound endpoints for Amazon Route 53.",
    "return-values": [
      {
        "name": "ResolverEndpointId",
        "description": "The ID of the resolver endpoint."
      },
      {
        "name": "IpAddressCount",
        "description": "The number of IP addresses that the resolver endpoint can use for DNS queries."
      },
      {
        "name": "Arn",
        "description": "The Amazon Resource Name (ARN) of the resolver endpoint, such as arn:aws:route53Resolver:us-east-1:123456789012:resolver-endpoint/resolver-endpoint-a1bzhi."
      },
      {
        "name": "Direction",
        "description": "Indicates whether the resolver endpoint allows inbound or outbound DNS queries."
      },
      {
        "name": "HostVPCId",
        "description": "The ID of the VPC that you want to create the resolver endpoint in."
      },
      {
        "name": "Name",
        "description": "The name that you assigned to the resolver endpoint when you created the endpoint."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Route53Resolver::ResolverEndpoint resource includes settings for inbound or outbound endpoints for Amazon Route 53."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "IpAddresses": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "The subnets and IP addresses in your VPC that you want DNS queries to pass through on the way from your VPCs to your network (for outbound endpoints) or on the way from your network to your VPCs (for inbound resolver endpoints).",
            "properties": {
              "Ip": {
                "type": "String",
                "required": false,
                "description": "The IP address that you want to use for DNS queries."
              },
              "SubnetId": {
                "type": "String",
                "required": true,
                "description": "The subnet that contains the IP address.",
                "resource-ref-type": "AWS::EC2::Subnet"
              }
            }
          },
          "Direction": {
            "type": "String",
            "required": true,
            "description": "Indicates whether the resolver endpoint allows inbound or outbound DNS queries."
          },
          "SecurityGroupIds": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "description": "The ID of one or more security groups that you want to use to control access to this VPC.",
            "resource-ref-type": "AWS::EC2::SecurityGroup"
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A list of the tag keys and values that you want to associate with the endpoint.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "A friendly name that lets you easily find a configuration in the Resolver dashboard in the Route 53 console."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Route53Resolver::ResolverRule": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Route53Resolver::ResolverRule resource provides detailed information about a resolver rule, which specifies how to route DNS queries out of a VPC for Amazon Route 53 Resolver.",
    "return-values": [
      {
        "name": "ResolverEndpointId",
        "description": "The ID of the outbound endpoint that the rule is associated with, such as rslvr-out-fdc049932dexample."
      },
      {
        "name": "DomainName",
        "description": "DNS queries for this domain name are forwarded to the IP addresses that are specified in TargetIps. "
      },
      {
        "name": "ResolverRuleId",
        "description": "When the value of RuleType is FORWARD, the ID that Resolver assigned to the resolver rule when you created it, such as rslvr-rr-5328a0899aexample."
      },
      {
        "name": "Arn",
        "description": "The Amazon Resource Name (ARN) of the resolver rule, such as arn:aws:route53Resolver:us-east-1:123456789012:resolver-rule/resolver-rule-a1bzhi."
      },
      {
        "name": "TargetIps",
        "description": "When the value of RuleType is FORWARD, the IP addresses that the outbound endpoint forwards DNS queries to, typically the IP addresses for DNS resolvers on your network."
      },
      {
        "name": "Name",
        "description": "The resolver rule name."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Route53Resolver::ResolverRule resource provides detailed information about a resolver rule, which specifies how to route DNS queries out of a VPC for Amazon Route 53 Resolver."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ResolverEndpointId": {
            "type": "String",
            "required": false,
            "description": "The ID of the outbound endpoint that the rule is associated with."
          },
          "DomainName": {
            "type": "String",
            "required": true,
            "description": "DNS queries for this domain name are forwarded to the IP addresses that are specified in TargetIps. "
          },
          "RuleType": {
            "type": "String",
            "required": true,
            "description": "The resolver rule type.",
            "allowed-values": [
              "*",
              "FORWARD",
              "SYSTEM"
            ]
          },
          "TargetIps": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "When a DNS query matches the name that you specify in DomainName, the outbound endpoint forwards the query to the IP addresses that you specify here, typically the IP addresses for DNS resolvers on your network. Specify IPv4 addresses. IPv6 is not supported.",
            "properties": {
              "Ip": {
                "type": "String",
                "required": true,
                "description": "One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses."
              },
              "Port": {
                "type": "String",
                "required": true,
                "description": "The port at Ip that you want to forward DNS queries to."
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A list of the tag keys and values that you want to associate with the rule.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "A friendly name that lets you easily find a rule in the Resolver dashboard in the Route 53 console."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Route53Resolver::ResolverRuleAssociation": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Route53Resolver::ResolverRuleAssociation resource contains information about an association between a resolver rule and a VPC.",
    "return-values": [
      {
        "name": "VPCId",
        "description": "The ID of the VPC that you associated the resolver rule with, such as vpc-03cf94c75cexample."
      },
      {
        "name": "ResolverRuleId",
        "description": "The ID of the resolver rule that you associated with the VPC that is specified by VPCId, such as rslvr-rr-5328a0899example."
      },
      {
        "name": "ResolverRuleAssociationId",
        "description": "The ID of the resolver rule association that you want to get information about, such as rslvr-rrassoc-97242eaf88example."
      },
      {
        "name": "Name",
        "description": "The name of an association between a resolver rule and a VPC, such as test.example.com in beta VPC."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Route53Resolver::ResolverRuleAssociation resource contains information about an association between a resolver rule and a VPC."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "VPCId": {
            "type": "String",
            "required": true,
            "description": "The ID of the VPC that you associated the resolver rule with.",
            "resource-ref-type": "AWS::EC2::Vpc"
          },
          "ResolverRuleId": {
            "type": "String",
            "required": true,
            "description": "The ID of the resolver rule that you associated with the VPC that is specified by VPCId.",
            "resource-ref-type": "AWS::Route53Resolver::ResolverRule"
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "The name of an association between a resolver rule and a VPC."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::S3::Bucket": {
    "type": "Object",
    "required": false,
    "description": "The AWS::S3::Bucket type creates an Amazon S3 bucket.",
    "return-values": [
      {
        "name": "DomainName",
        "description": "The DNS name of the specified bucket."
      },
      {
        "name": "WebsiteURL",
        "description": "Amazon S3 website endpoint for the specified bucket."
      },
      {
        "name": "Arn",
        "description": "Returns the Amazon Resource Name (ARN) of the specified bucket."
      },
      {
        "name": "DualStackDomainName",
        "description": "Returns the IPv6 DNS name of the specified bucket."
      },
      {
        "name": "RegionalDomainName",
        "description": "Returns the regional domain name of the specified bucket."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::S3::Bucket type creates an Amazon S3 bucket."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AccessControl": {
            "type": "String",
            "required": false,
            "description": "A canned ACL that grants predefined permissions on the bucket. Default is Private.",
            "allowed-values": [
              "*",
              "Private",
              "PublicRead",
              "PublicReadWrite",
              "AuthenticatedRead",
              "LogDeliveryWrite",
              "BucketOwnerRead",
              "BucketOwnerFullControl"
            ]
          },
          "BucketName": {
            "type": "String",
            "required": false,
            "description": "A name for the bucket. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the bucket name."
          },
          "CorsConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Rules that define cross-origin resource sharing of objects in this bucket.",
            "properties": {
              "CorsRules": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "A set of origins and methods that you allow.",
                "properties": {
                  "AllowedHeaders": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "description": "Headers that are specified in the Access-Control-Request-Headers header. These headers are allowed in a preflight OPTIONS request. In response to any preflight OPTIONS request, Amazon S3 returns any requested headers that are allowed."
                  },
                  "AllowedMethods": {
                    "type": "Array",
                    "array-type": "String",
                    "required": true,
                    "description": "An HTTP method that you allow the origin to execute. The valid values are GET, PUT, HEAD, POST, and DELETE.",
                    "allowed-values": [
                      "GET",
                      "PUT",
                      "HEAD",
                      "POST",
                      "DELETE"
                    ]
                  },
                  "AllowedOrigins": {
                    "type": "Array",
                    "array-type": "String",
                    "required": true,
                    "description": "An origin that you allow to send cross-domain requests."
                  },
                  "ExposedHeaders": {
                    "type": "Array",
                    "array-type": "String",
                    "required": true,
                    "description": "One or more headers in the response that are accessible to client applications (for example, from a JavaScript XMLHttpRequest object)."
                  },
                  "Id": {
                    "type": "String",
                    "required": false,
                    "description": "A unique identifier for this rule. The value cannot be more than 255 characters."
                  },
                  "MaxAge": {
                    "type": "Number",
                    "required": false,
                    "description": "The time in seconds that your browser is to cache the preflight response for the specified resource."
                  }
                }
              }
            }
          },
          "LifecycleConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Rules that define how Amazon S3 manages objects during their lifetime.",
            "properties": {
              "Rules": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "A lifecycle rule for individual objects in a bucket.",
                "properties": {
                  "ExpirationDate": {
                    "type": "String",
                    "required": false,
                    "description": "Indicates when objects are deleted from Amazon S3 and Amazon Glacier. The date value must be in ISO 8601 format. The time is always midnight UTC."
                  },
                  "ExpirationInDays": {
                    "type": "Number",
                    "required": false,
                    "description": "Indicates the number of days after creation when objects are deleted from Amazon S3 and Amazon Glacier."
                  },
                  "Id": {
                    "type": "String",
                    "required": false,
                    "description": "A unique identifier for this rule. The value cannot be more than 255 characters."
                  },
                  "NoncurrentVersionExpirationInDays": {
                    "type": "Number",
                    "required": false,
                    "description": "For buckets with versioning enabled (or suspended), specifies the time, in days, between when a new version of the object is uploaded to the bucket and when old versions of the object expire."
                  },
                  "NoncurrentVersionTransition": {
                    "type": "Object",
                    "required": false,
                    "description": "For buckets with versioning enabled (or suspended), specifies when non-current objects transition to a specified storage class. If you specify a transition and expiration time, the expiration time must be later than the transition time.",
                    "properties": {
                      "StorageClass": {
                        "type": "String",
                        "required": true,
                        "description": "The storage class to which you want the object to transition. Currently, you can specify only Glacier.",
                        "allowed-values": [
                          "*",
                          "STANDARD",
                          "STANDARD_IA",
                          "REDUCED_REDUNDANCY",
                          "GLACIER"
                        ]
                      },
                      "TransitionInDays": {
                        "type": "Number",
                        "required": false,
                        "description": "Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601 format. The time is always midnight UTC."
                      }
                    }
                  },
                  "Prefix": {
                    "type": "String",
                    "required": false,
                    "description": "Object key prefix that identifies one or more objects to which this rule applies."
                  },
                  "Status": {
                    "type": "String",
                    "required": true,
                    "description": "Specify either Enabled or Disabled. If you specify Enabled, Amazon S3 executes this rule as scheduled. If you specify Disabled, Amazon S3 ignores this rule",
                    "allowed-values": [
                      "Enabled",
                      "Disabled"
                    ]
                  },
                  "Transition": {
                    "type": "Object",
                    "required": true,
                    "description": "Describes when an object transitions to a specified storage class.",
                    "properties": {
                      "StorageClass": {
                        "type": "String",
                        "required": true,
                        "description": "The storage class to which you want the object to transition. Currently, you can specify only Glacier.",
                        "allowed-values": [
                          "*",
                          "STANDARD",
                          "STANDARD_IA",
                          "REDUCED_REDUNDANCY",
                          "GLACIER"
                        ]
                      },
                      "TransitionDate": {
                        "type": "String",
                        "required": false,
                        "description": "Indicates the number of days after creation when objects are transitioned to the specified storage class."
                      },
                      "TransitionInDays": {
                        "type": "Number",
                        "required": false,
                        "description": "Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601 format. The time is always midnight UTC."
                      }
                    }
                  },
                  "Transitions": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": true,
                    "description": "Describes when an object transitions to a specified storage class.",
                    "properties": {
                      "StorageClass": {
                        "type": "String",
                        "required": true,
                        "description": "The storage class to which you want the object to transition. Currently, you can specify only Glacier.",
                        "allowed-values": [
                          "*",
                          "STANDARD",
                          "STANDARD_IA",
                          "REDUCED_REDUNDANCY",
                          "GLACIER"
                        ]
                      },
                      "TransitionDate": {
                        "type": "String",
                        "required": false,
                        "description": "Indicates the number of days after creation when objects are transitioned to the specified storage class."
                      },
                      "TransitionInDays": {
                        "type": "Number",
                        "required": false,
                        "description": "Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601 format. The time is always midnight UTC."
                      }
                    }
                  },
                  "AbortIncompleteMultipartUpload": {
                    "type": "Object",
                    "required": false,
                    "description": "Specifies a lifecycle rule that aborts incomplete multipart uploads to an Amazon S3 bucket.",
                    "properties": {
                      "DaysAfterInitiation": {
                        "type": "Number",
                        "required": true,
                        "description": "The number of days after the upload is initiated before aborting the upload."
                      }
                    }
                  },
                  "NoncurrentVersionTransitions": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "For buckets with versioning enabled (or suspended), specifies when non-current objects transition to a specified storage class. (Deprecated)",
                    "properties": {
                      "StorageClass": {
                        "type": "String",
                        "required": true,
                        "description": "The storage class to which you want the object to transition, such as GLACIER.",
                        "allowed-values": [
                          "*",
                          "STANDARD",
                          "STANDARD_IA",
                          "REDUCED_REDUNDANCY",
                          "GLACIER"
                        ]
                      },
                      "TransitionInDays": {
                        "type": "Number",
                        "required": true,
                        "description": "The number of days between the time that a new version of the object is uploaded to the bucket and when old versions of the object are transitioned to the specified storage class."
                      }
                    }
                  },
                  "TagFilters": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "Tags to use to identify a subset of objects to which the lifecycle rule applies.",
                    "properties": {
                      "Key": {
                        "type": "String",
                        "required": true,
                        "description": "The tag key."
                      },
                      "Value": {
                        "type": "String",
                        "required": true,
                        "description": "The tag value."
                      }
                    }
                  }
                }
              }
            }
          },
          "LoggingConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Settings that defines where logs are stored.",
            "properties": {
              "DestinationBucketName": {
                "type": "String",
                "required": false,
                "description": "The name of an Amazon S3 bucket where Amazon S3 store server access log files. You can store log files in any bucket that you own. By default, logs are stored in the bucket where the LoggingConfiguration property is defined.",
                "resource-ref-type": "AWS::S3::Bucket"
              },
              "LogFilePrefix": {
                "type": "String",
                "required": false,
                "description": "A prefix for the all log object keys. If you store log files from multiple Amazon S3 buckets in a single bucket, you can use a prefix to distinguish which log files came from which bucket."
              }
            }
          },
          "NotificationConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Configuration that defines which Amazon SNS topic to send messages to and what events to report.",
            "properties": {
              "LambdaConfigurations": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "The AWS Lambda functions to invoke and the events for which to invoke the functions.",
                "properties": {
                  "Event": {
                    "type": "String",
                    "required": true,
                    "description": "The Amazon S3 bucket event about which to send notifications.",
                    "allowed-values": [
                      "s3:ObjectCreated:*",
                      "s3:ObjectCreated:Put",
                      "s3:ObjectCreated:Post",
                      "s3:ObjectCreated:Copy",
                      "s3:ObjectCreated:CompleteMultipartUpload",
                      "s3:ObjectRemoved:*",
                      "s3:ObjectRemoved:Delete",
                      "s3:ObjectRemoved:DeleteMarkerCreated",
                      "s3:ReducedRedundancyLostObject",
                      "*"
                    ]
                  },
                  "Function": {
                    "type": "String",
                    "required": true,
                    "description": "The Amazon Resource Name (ARN) of the Lambda function that Amazon S3 invokes when the specified event type occurs.",
                    "resource-ref-type": "AWS::Lambda::Function"
                  },
                  "Filter": {
                    "type": "Object",
                    "required": false,
                    "description": "The filtering rules that determine which objects invoke the Lambda function.",
                    "properties": {
                      "S3Key": {
                        "type": "Object",
                        "required": true,
                        "description": "Amazon S3 filtering rules that describe for which object key names to send notifications.",
                        "properties": {
                          "Rules": {
                            "type": "Array",
                            "array-type": "Object",
                            "required": true,
                            "description": "The object key name to filter on and whether to filter on the suffix or prefix of the key name.",
                            "properties": {
                              "Name": {
                                "type": "String",
                                "required": true,
                                "description": "Whether the filter matches the prefix or suffix of object key names.",
                                "allowed-values": [
                                  "*",
                                  "prefix",
                                  "suffix"
                                ]
                              },
                              "Value": {
                                "type": "String",
                                "required": true,
                                "description": "The value that the filter searches for in object key names."
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "QueueConfigurations": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "The Amazon Simple Queue Service queues to publish messages to and the events for which to publish messages.",
                "properties": {
                  "Event": {
                    "type": "String",
                    "required": true,
                    "description": "The Amazon S3 bucket event about which to send notifications.",
                    "allowed-values": [
                      "s3:ObjectCreated:*",
                      "s3:ObjectCreated:Put",
                      "s3:ObjectCreated:Post",
                      "s3:ObjectCreated:Copy",
                      "s3:ObjectCreated:CompleteMultipartUpload",
                      "s3:ObjectRemoved:*",
                      "s3:ObjectRemoved:Delete",
                      "s3:ObjectRemoved:DeleteMarkerCreated",
                      "s3:ReducedRedundancyLostObject",
                      "*"
                    ]
                  },
                  "Queue": {
                    "type": "String",
                    "required": true,
                    "description": "The Amazon Resource Name (ARN) of the Amazon SQS queue that Amazon S3 publishes messages to when the specified event type occurs.",
                    "resource-ref-type": "AWS::SQS::Queue"
                  },
                  "Filter": {
                    "type": "Object",
                    "required": false,
                    "description": "The filtering rules that determine which objects invoke the Lambda function.",
                    "properties": {
                      "S3Key": {
                        "type": "Object",
                        "required": true,
                        "description": "Amazon S3 filtering rules that describe for which object key names to send notifications.",
                        "properties": {
                          "Rules": {
                            "type": "Array",
                            "array-type": "Object",
                            "required": true,
                            "description": "The object key name to filter on and whether to filter on the suffix or prefix of the key name.",
                            "properties": {
                              "Name": {
                                "type": "String",
                                "required": true,
                                "description": "Whether the filter matches the prefix or suffix of object key names.",
                                "allowed-values": [
                                  "*",
                                  "prefix",
                                  "suffix"
                                ]
                              },
                              "Value": {
                                "type": "String",
                                "required": true,
                                "description": "The value that the filter searches for in object key names."
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "TopicConfigurations": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "The topic to which notifications are sent and the events for which notification are generated.",
                "properties": {
                  "Event": {
                    "type": "String",
                    "required": true,
                    "description": "The Amazon S3 bucket event about which to send notifications.",
                    "allowed-values": [
                      "s3:ObjectCreated:*",
                      "s3:ObjectCreated:Put",
                      "s3:ObjectCreated:Post",
                      "s3:ObjectCreated:Copy",
                      "s3:ObjectCreated:CompleteMultipartUpload",
                      "s3:ObjectRemoved:*",
                      "s3:ObjectRemoved:Delete",
                      "s3:ObjectRemoved:DeleteMarkerCreated",
                      "s3:ReducedRedundancyLostObject",
                      "*"
                    ]
                  },
                  "Topic": {
                    "type": "String",
                    "required": true,
                    "description": "The Amazon SNS topic to which Amazon S3 reports the specified events.",
                    "resource-ref-type": "AWS::SNS::Topic"
                  },
                  "Filter": {
                    "type": "Object",
                    "required": false,
                    "description": "The filtering rules that determine which objects invoke the Lambda function.",
                    "properties": {
                      "S3Key": {
                        "type": "Object",
                        "required": true,
                        "description": "Amazon S3 filtering rules that describe for which object key names to send notifications.",
                        "properties": {
                          "Rules": {
                            "type": "Array",
                            "array-type": "Object",
                            "required": true,
                            "description": "The object key name to filter on and whether to filter on the suffix or prefix of the key name.",
                            "properties": {
                              "Name": {
                                "type": "String",
                                "required": true,
                                "description": "Whether the filter matches the prefix or suffix of object key names.",
                                "allowed-values": [
                                  "*",
                                  "prefix",
                                  "suffix"
                                ]
                              },
                              "Value": {
                                "type": "String",
                                "required": true,
                                "description": "The value that the filter searches for in object key names."
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "ReplicationConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Configuration for replicating objects in an S3 bucket. To enable replication, you must also enable versioning by using the VersioningConfiguration property.",
            "properties": {
              "Role": {
                "type": "String",
                "required": true,
                "description": "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that Amazon S3 assumes when replicating objects."
              },
              "Rules": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": " replication rule that specifies which objects to replicate and where they are stored.",
                "properties": {
                  "Destination": {
                    "type": "Object",
                    "required": true,
                    "description": "Defines the destination where Amazon S3 stores replicated objects.",
                    "properties": {
                      "Bucket": {
                        "type": "String",
                        "required": true,
                        "description": "The Amazon resource name (ARN) of an S3 bucket where Amazon S3 stores replicated objects.",
                        "resource-ref-type": "AWS::S3::Bucket"
                      },
                      "StorageClass": {
                        "type": "String",
                        "required": false,
                        "description": "The storage class to use when replicating objects",
                        "allowed-values": [
                          "*",
                          "STANDARD",
                          "STANDARD_IA",
                          "REDUCED_REDUNDANCY",
                          "GLACIER"
                        ]
                      },
                      "AccessControlTranslation": {
                        "type": "Object",
                        "required": false,
                        "description": "Specify this only in a cross-account scenario (where source and destination bucket owners are not the same), and you want to change replica ownership to the AWS account that owns the destination bucket.",
                        "properties": {
                          "Owner": {
                            "type": "String",
                            "required": true,
                            "description": "Specifies the replica ownership."
                          }
                        }
                      },
                      "Account": {
                        "type": "String",
                        "required": false,
                        "description": "Destination bucket owner account ID."
                      },
                      "EncryptionConfiguration": {
                        "type": "Object",
                        "required": false,
                        "description": "Specifies encryption-related information.",
                        "properties": {
                          "ReplicaKmsKeyID": {
                            "type": "String",
                            "required": true,
                            "description": "Specifies the AWS KMS Key ID (Key ARN or Alias ARN) for the destination bucket. Amazon S3 uses this key to encrypt replicas.",
                            "resource-ref-type": "AWS::KMS::Key"
                          }
                        }
                      }
                    }
                  },
                  "Id": {
                    "type": "String",
                    "required": false,
                    "description": "A unique identifier for the rule. If you don't specify a value, AWS CloudFormation generates a random ID."
                  },
                  "Prefix": {
                    "type": "String",
                    "required": true,
                    "description": "An object prefix. This rule applies to all Amazon S3 objects with this prefix. To specify all objects in an S3 bucket, specify an empty string."
                  },
                  "Status": {
                    "type": "String",
                    "required": true,
                    "description": "Whether the rule is enabled.",
                    "allowed-values": [
                      "Enabled",
                      "Disabled"
                    ]
                  },
                  "SourceSelectionCriteria": {
                    "type": "Object",
                    "required": false,
                    "description": "Specifies additional filters in identifying source objects that you want to replicate.",
                    "properties": {
                      "SseKmsEncryptedObjects": {
                        "type": "Object",
                        "required": true,
                        "description": "Contains the status of whether Amazon S3 replicates objects created with server-side encryption using an AWS KMS-managed key.",
                        "properties": {
                          "Status": {
                            "type": "String",
                            "required": true,
                            "description": "Specifies whether Amazon S3 replicates objects created with server-side encryption using an AWS KMS-managed key.",
                            "allowed-values": [
                              "*",
                              "Enabled",
                              "Disabled"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "VersioningConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Enables multiple variants of all objects in this bucket. You might enable versioning to prevent objects from being deleted or overwritten by mistake or to archive objects so that you can retrieve previous versions of them.",
            "properties": {
              "Status": {
                "type": "String",
                "required": true,
                "description": "The versioning state of an Amazon S3 bucket. If you enable versioning, you must suspend versioning to disable it.",
                "allowed-values": [
                  "Enabled",
                  "Suspended"
                ]
              }
            }
          },
          "WebsiteConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Information used to configure the bucket as a static website.",
            "properties": {
              "ErrorDocument": {
                "type": "String",
                "required": false,
                "description": "The name of the error document."
              },
              "IndexDocument": {
                "type": "String",
                "required": false,
                "description": "The name of the index document."
              },
              "RedirectAllRequestsTo": {
                "type": "Object",
                "required": false,
                "description": "The redirect behavior for every request to this bucket's website endpoint.",
                "properties": {
                  "HostName": {
                    "type": "String",
                    "required": true,
                    "description": "Name of the host where requests are redirected."
                  },
                  "Protocol": {
                    "type": "String",
                    "required": false,
                    "description": "Protocol to use (http or https) when redirecting requests. The default is the protocol that is used in the original request.",
                    "allowed-values": [
                      "http",
                      "https"
                    ]
                  }
                }
              },
              "RoutingRules": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "Rules that define when a redirect is applied and the redirect behavior.",
                "properties": {
                  "RedirectRule": {
                    "type": "Object",
                    "required": true,
                    "description": "Redirect requests to another host, to another page, or with another protocol.",
                    "properties": {
                      "HostName": {
                        "type": "String",
                        "required": true,
                        "description": "Name of the host where requests are redirected."
                      },
                      "HttpRedirectCode": {
                        "type": "String",
                        "required": false,
                        "description": "The HTTP redirect code to use on the response."
                      },
                      "Protocol": {
                        "type": "String",
                        "required": false,
                        "description": "Protocol to use (http or https) when redirecting requests. The default is the protocol that is used in the original request.",
                        "allowed-values": [
                          "http",
                          "https"
                        ]
                      },
                      "ReplaceKeyPrefixWith": {
                        "type": "String",
                        "required": false,
                        "description": "The object key prefix to use in the redirect request. For example, to redirect requests for all pages with the prefix docs/ (objects in the docs/ folder) to the documents/ prefix, you can set the KeyPrefixEquals property in routing condition property to docs/, and set the ReplaceKeyPrefixWith property to documents/."
                      },
                      "ReplaceKeyWith": {
                        "type": "String",
                        "required": false,
                        "description": "The specific object key to use in the redirect request. For example, redirect request to error.html."
                      }
                    }
                  },
                  "RoutingRuleCondition": {
                    "type": "Object",
                    "required": false,
                    "description": "Rules that define when a redirect is applied.",
                    "properties": {
                      "HttpErrorCodeReturnedEquals": {
                        "type": "String",
                        "required": false,
                        "description": "Applies this redirect if the error code equals this value in the event of an error."
                      },
                      "KeyPrefixEquals": {
                        "type": "String",
                        "required": false,
                        "description": "The object key name prefix when the redirect is applied."
                      }
                    }
                  }
                }
              }
            }
          },
          "AccelerateConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Configuration for the transfer acceleration state.",
            "properties": {
              "AccelerationStatus": {
                "type": "String",
                "required": true,
                "description": "Sets the transfer acceleration state of the bucket."
              }
            }
          },
          "AnalyticsConfigurations": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The configuration and any analyses for the analytics filter of an Amazon S3 bucket. Duplicates not allowed.",
            "properties": {
              "Id": {
                "type": "String",
                "required": true,
                "description": "The ID that identifies the analytics configuration."
              },
              "Prefix": {
                "type": "String",
                "required": false,
                "description": "The prefix that an object must have to be included in the analytics results."
              },
              "StorageClassAnalysis": {
                "type": "Object",
                "required": true,
                "description": "Contains data related to access patterns to be collected and made available to analyze the tradeoffs between different storage classes.",
                "properties": {
                  "DataExport": {
                    "type": "Object",
                    "required": false,
                    "description": "Describes how data related to the storage class analysis should be exported.",
                    "properties": {
                      "Destination": {
                        "type": "Object",
                        "required": true,
                        "description": "Information about where to publish the analytics results.",
                        "properties": {
                          "BucketAccountId": {
                            "type": "String",
                            "required": false,
                            "description": "The ID of the account that owns the destination bucket where the analytics is published."
                          },
                          "BucketArn": {
                            "type": "String",
                            "required": true,
                            "resource-ref-type": "AWS::S3::Bucket",
                            "description": "The Amazon Resource Name (ARN) of the bucket where analytics results are published."
                          },
                          "Format": {
                            "type": "String",
                            "required": true,
                            "description": "Specifies the output format of the analytics or inventory results. Currently, Amazon S3 supports the comma-separated value (CSV) format."
                          },
                          "Prefix": {
                            "type": "String",
                            "required": false,
                            "description": "The prefix that is prepended to all analytics results."
                          }
                        }
                      },
                      "OutputSchemaVersion": {
                        "type": "String",
                        "required": true,
                        "description": "The version of the output schema to use when exporting data.",
                        "allowed-values": [
                          "*",
                          "V_1"
                        ]
                      }
                    }
                  }
                }
              },
              "TagFilters": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "The tags to use when evaluating an analytics filter.",
                "properties": {
                  "Key": {
                    "type": "String",
                    "required": true,
                    "description": "The tag key."
                  },
                  "Value": {
                    "type": "String",
                    "required": true,
                    "description": "The tag value."
                  }
                }
              }
            }
          },
          "InventoryConfigurations": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The inventory configuration for an Amazon S3 bucket. Duplicates not allowed.",
            "properties": {
              "Destination": {
                "type": "Object",
                "required": true,
                "description": "Information about where to publish the inventory results.",
                "properties": {
                  "BucketAccountId": {
                    "type": "String",
                    "required": false,
                    "description": "The ID of the account that owns the destination bucket where the analytics is published."
                  },
                  "BucketArn": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::S3::Bucket",
                    "description": "The Amazon Resource Name (ARN) of the bucket where analytics results are published. "
                  },
                  "Format": {
                    "type": "String",
                    "required": true,
                    "description": "Specifies the output format of the analytics or inventory results. Currently, Amazon S3 supports the comma-separated value (CSV) format."
                  },
                  "Prefix": {
                    "type": "String",
                    "required": false,
                    "description": "The prefix that is prepended to all analytics results."
                  }
                }
              },
              "Enabled": {
                "type": "Boolean",
                "required": true,
                "description": "Specifies whether the inventory is enabled or disabled. If set to True, an inventory list is generated. If set to False, no inventory list is generated."
              },
              "Id": {
                "type": "String",
                "required": true,
                "description": "The ID that identifies the inventory configuration."
              },
              "IncludedObjectVersions": {
                "type": "String",
                "required": true,
                "description": "Object versions to include in the inventory list.",
                "allowed-values": [
                  "*",
                  "All",
                  "Current"
                ]
              },
              "OptionalFields": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The optional fields that are included in the inventory results."
              },
              "Prefix": {
                "type": "String",
                "required": false,
                "description": "The prefix that is prepended to all inventory results."
              },
              "ScheduleFrequency": {
                "type": "String",
                "required": true,
                "description": "The frequency of inventory results generation."
              }
            }
          },
          "MetricsConfigurations": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Settings that define a metrics configuration for the CloudWatch request metrics from the bucket.",
            "properties": {
              "Id": {
                "type": "String",
                "required": true,
                "description": "The ID used to identify the metrics configuration."
              },
              "Prefix": {
                "type": "String",
                "required": false,
                "description": "The prefix that an object must have to be included in the metrics results."
              },
              "TagFilters": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "Specifies a list of tag filters to use as a metrics configuration filter.",
                "properties": {
                  "Key": {
                    "type": "String",
                    "required": true,
                    "description": "The tag key."
                  },
                  "Value": {
                    "type": "String",
                    "required": true,
                    "description": "The tag value."
                  }
                }
              }
            }
          },
          "BucketEncryption": {
            "type": "Object",
            "required": false,
            "description": "Specifies default encryption for a bucket using server-side encryption with either Amazon S3-managed keys (SSE-S3) or AWS KMS-managed keys (SSE-KMS).",
            "properties": {
              "ServerSideEncryptionConfiguration": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "Specifies the server-side encryption by default configuration.",
                "properties": {
                  "ServerSideEncryptionByDefault": {
                    "type": "Object",
                    "required": false,
                    "description": "Sets server-side encryption by default.",
                    "properties": {
                      "KMSMasterKeyID": {
                        "type": "String",
                        "required": false,
                        "description": "The AWS KMS master key ID used for the SSE-KMS encryption.",
                        "resource-ref-type": "AWS::KMS::Key"
                      },
                      "SSEAlgorithm": {
                        "type": "String",
                        "required": true,
                        "description": "The server-side encryption algorithm to use.",
                        "allowed-values": [
                          "*",
                          "AES256",
                          "aws:kms"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "PublicAccessBlockConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Configuration that defines how Amazon S3 handles public access.",
            "properties": {
              "BlockPublicAcls": {
                "type": "Boolean",
                "required": false,
                "description": "Specifies whether Amazon S3 will reject public ACLs for this bucket."
              },
              "BlockPublicPolicy": {
                "type": "Boolean",
                "required": false,
                "description": "Specifies whether Amazon S3 will block public bucket policies for this bucket."
              },
              "IgnorePublicAcls": {
                "type": "Boolean",
                "required": false,
                "description": "Specifies whether Amazon S3 will ignore public ACLs for this bucket."
              },
              "RestrictPublicBuckets": {
                "type": "Boolean",
                "required": false,
                "description": "Specifies whether Amazon S3 will lock down public bucket policies for this bucket."
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::S3::BucketPolicy": {
    "type": "Object",
    "required": false,
    "description": "The AWS::S3::BucketPolicy type applies a policy to an Amazon S3 bucket.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::S3::BucketPolicy type applies a policy to an Amazon S3 bucket."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "PolicyDocument": {
            "type": "Policy",
            "required": true,
            "description": "A policy document containing permissions to add to the specified SNS topics."
          },
          "Bucket": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::S3::Bucket",
            "description": "Name of the bucket to which you want to add the policy."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SageMaker::Endpoint": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS::SageMaker::Endpoint resource to create an endpoint using the specified configuration in the request.",
    "return-values": [
      {
        "name": "EndpointName",
        "description": "The name of the endpoint, such as MyEndpoint."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS::SageMaker::Endpoint resource to create an endpoint using the specified configuration in the request."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "EndpointName": {
            "type": "String",
            "required": false,
            "description": "The name of the endpoint."
          },
          "EndpointConfigName": {
            "type": "String",
            "required": true,
            "description": "The name of the AWS::SageMaker::EndpointConfig resource that specifies the configuration for the endpoint.",
            "resource-ref-type": "AWS::SageMaker::EndpointConfig"
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "An array of key-value pairs.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SageMaker::EndpointConfig": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SageMaker::EndpointConfig resource creates a configuration for an Amazon SageMaker endpoint.",
    "return-values": [
      {
        "name": "EndpointConfigName",
        "description": "The name of the endpoint confugration, such as MyEndpointConfiguration."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SageMaker::EndpointConfig resource creates a configuration for an Amazon SageMaker endpoint."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ProductionVariants": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "A list of the production variants that specify the models you want to host at this endpoint.",
            "properties": {
              "ModelName": {
                "type": "String",
                "required": true,
                "description": "The name of the model that you want to host."
              },
              "VariantName": {
                "type": "String",
                "required": true,
                "description": "The name of the production variant."
              },
              "InitialInstanceCount": {
                "type": "Number",
                "required": true,
                "description": "The number of instances to launch initially for this production variant."
              },
              "InstanceType": {
                "type": "String",
                "required": true,
                "description": "The ML compute instance type to use for this production variant."
              },
              "InitialVariantWeight": {
                "type": "Number",
                "required": true,
                "description": "Determines initial traffic distribution among all of the models that you specify in the endpoint configuration. "
              },
              "AcceleratorType": {
                "type": "String",
                "required": false,
                "description": "The size of the Elastic Inference (EI) instance to use for the production variant."
              }
            }
          },
          "KmsKeyId": {
            "type": "String",
            "required": false,
            "description": "If you provide a AWS KMS key ID, Amazon SageMaker uses it to encrypt data at rest on the ML storage volume that is attached to your notebook instance.",
            "resource-ref-type": "AWS::KMS::Key"
          },
          "EndpointConfigName": {
            "type": "String",
            "required": false,
            "description": "The name of the endpoint configuration."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "An array of key-value pairs.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SageMaker::Model": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SageMaker::Model resource to create a model to host at an Amazon SageMaker endpoint. ",
    "return-values": [
      {
        "name": "ModelName",
        "description": "The name of the model, such as MyModel."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SageMaker::Model resource to create a model to host at an Amazon SageMaker endpoint. "
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ExecutionRoleArn": {
            "type": "String",
            "required": true,
            "description": "The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker can assume to access model artifacts and docker image for deployment on ML compute instances.",
            "resource-ref-type": "AWS::IAM::Role"
          },
          "PrimaryContainer": {
            "type": "Object",
            "required": true,
            "description": "The location of the primary docker image containing inference code, associated artifacts, and custom environment map that the inference code uses when the model is deployed into production.",
            "properties": {
              "ContainerHostname": {
                "type": "String",
                "required": false,
                "description": "The DNS host name for the container after Amazon SageMaker deploys it."
              },
              "Environment": {
                "type": "Json",
                "required": false,
                "description": "The environment variables to set in the Docker container."
              },
              "ModelDataUrl": {
                "type": "String",
                "required": false,
                "description": "The S3 path where the model artifacts, which result from model training, are stored."
              },
              "Image": {
                "type": "String",
                "required": true,
                "description": "The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored.",
                "resource-ref-type": [
                  "*"
                ]
              }
            }
          },
          "ModelName": {
            "type": "String",
            "required": false,
            "description": "The name of the model."
          },
          "VpcConfig": {
            "type": "Object",
            "required": false,
            "description": "A VpcConfig object that specifies the VPC that you want your model to connect to.",
            "properties": {
              "Subnets": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "description": "The ID of the subnets in the VPC to which you want to connect your training job or model.",
                "resource-ref-type": "AWS::EC2::Subnet"
              },
              "SecurityGroupIds": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "description": "The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.",
                "resource-ref-type": "AWS::EC2::SecurityGroup"
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "An array of key-value pairs.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          },
          "Containers": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Specifies the containers in the inference pipeline.",
            "properties": {
              "ContainerHostname": {
                "type": "String",
                "required": false,
                "description": "The DNS host name for the container after Amazon SageMaker deploys it."
              },
              "Environment": {
                "type": "Json",
                "required": false,
                "description": "The environment variables to set in the Docker container."
              },
              "ModelDataUrl": {
                "type": "String",
                "required": false,
                "description": "The S3 path where the model artifacts, which result from model training, are stored."
              },
              "Image": {
                "type": "String",
                "required": true,
                "description": "The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SageMaker::NotebookInstance": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SageMaker::NotebookInstance resource Creates an Amazon SageMaker notebook instance. ",
    "return-values": [
      {
        "name": "NotebookInstanceName",
        "description": "The name of the notebook instance, such as MyNotebookInstance."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SageMaker::NotebookInstance resource Creates an Amazon SageMaker notebook instance. "
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "KmsKeyId": {
            "type": "String",
            "required": false,
            "description": "If you provide a AWS KMS key ID, Amazon SageMaker uses it to encrypt data at rest on the ML storage volume that is attached to your notebook instance.",
            "resource-ref-type": "AWS::KMS::Key"
          },
          "DirectInternetAccess": {
            "type": "String",
            "required": false,
            "description": "Sets whether Amazon SageMaker provides internet access to the notebook instance."
          },
          "SubnetId": {
            "type": "String",
            "required": false,
            "description": "The ID of the subnet in a VPC to which you would like to have a connectivity from your ML compute instance.",
            "resource-ref-type": "AWS::EC2::Subnet"
          },
          "NotebookInstanceName": {
            "type": "String",
            "required": false,
            "description": "The name of the notebook instance."
          },
          "InstanceType": {
            "type": "String",
            "required": true,
            "description": "The type of ML compute instance to launch for the notebook instance."
          },
          "LifecycleConfigName": {
            "type": "String",
            "required": false,
            "description": "The name of a lifecycle configuration to associate with the notebook instance.",
            "resource-ref-type": "AWS::SageMaker::NotebookInstanceLifecycleConfig"
          },
          "SecurityGroupIds": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The VPC security group IDs, in the form sg-xxxxxxxx.",
            "resource-ref-type": "AWS::EC2::SecurityGroup"
          },
          "RoleArn": {
            "type": "String",
            "required": true,
            "description": "When you send any requests to AWS resources from the notebook instance, Amazon SageMaker assumes this role to perform tasks on your behalf.",
            "resource-ref-type": "AWS::IAM::Role"
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A list of tags to associate with the notebook instance.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          },
          "VolumeSizeInGB": {
            "type": "Number",
            "required": false,
            "description": "The size of the ML storage volume that you want to provision."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SageMaker::NotebookInstanceLifecycleConfig": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SageMaker::NotebookInstanceLifecycleConfig resource specifies shell scripts that run when you create and/or start a notebook instance.",
    "return-values": [
      {
        "name": "NotebookInstanceLifecycleConfigName",
        "description": "The name of the lifecycle configuration, such as MyLifecycleConfig."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SageMaker::NotebookInstanceLifecycleConfig resource specifies shell scripts that run when you create and/or start a notebook instance."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "OnStart": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A shell script that runs once when you create a notebook instance, and then each time you start the notebook instance.",
            "properties": {
              "Content": {
                "type": "String",
                "required": false,
                "description": "A base64-encoded string that contains a shell script for a notebook instance lifecycle configuration."
              }
            }
          },
          "NotebookInstanceLifecycleConfigName": {
            "type": "String",
            "required": false,
            "description": "The name of the lifecycle configuration."
          },
          "OnCreate": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A shell script that runs only once, when you create a notebook instance.",
            "properties": {
              "Content": {
                "type": "String",
                "required": false,
                "description": "A base64-encoded string that contains a shell script for a notebook instance lifecycle configuration."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SDB::Domain": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SDB::Domain creates a Amazon SimpleDB Domain.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SDB::Domain creates a Amazon SimpleDB Domain."
      },
      "Properties": {
        "type": "Object",
        "required": false,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "Information about the Amazon SimpleDB domain."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SecretsManager::ResourcePolicy": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SecretsManager::ResourcePolicy resource lets you define a resource-based policy and attach it to a secret that's stored in Secrets Manager.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SecretsManager::ResourcePolicy resource lets you define a resource-based policy and attach it to a secret that's stored in Secrets Manager."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "SecretId": {
            "type": "String",
            "required": true,
            "description": "Specifies the Amazon Resource Name (ARN) or the friendly name of the secret that you want to attach a resource-based permissions policy to.",
            "resource-ref-type": "AWS::SecretsManager::Secret"
          },
          "ResourcePolicy": {
            "type": "Json",
            "required": true,
            "description": "Specifies a JSON object that's constructed according to the grammar and syntax for an AWSresource-based policy."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SecretsManager::RotationSchedule": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SecretsManager::RotationSchedule resource configures rotation for a secret.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SecretsManager::RotationSchedule resource configures rotation for a secret."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "SecretId": {
            "type": "String",
            "required": true,
            "description": "Specifies the Amazon Resource Name (ARN) or the friendly name of the secret that you want to rotate.",
            "resource-ref-type": "AWS::SecretsManager::Secret"
          },
          "RotationLambdaARN": {
            "type": "String",
            "required": false,
            "description": "Specifies the ARN of the Lambda function that can rotate the secret.",
            "resource-ref-type": "AWS::Lambda::Function"
          },
          "RotationRules": {
            "type": "Object",
            "required": false,
            "description": "Specifies a structure that defines the rotation schedule for this secret.",
            "properties": {
              "AutomaticallyAfterDays": {
                "type": "Number",
                "required": false,
                "description": "Specifies the number of days after the previous rotation before Secrets Manager triggers the next automatic rotation."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SecretsManager::Secret": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SecretsManager::Secret resource creates a secret and stores it in Secrets Manager.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SecretsManager::Secret resource creates a secret and stores it in Secrets Manager."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "Specifies a user-provided description of the secret."
          },
          "KmsKeyId": {
            "type": "String",
            "required": false,
            "description": "Specifies the ARN, Key ID, or alias of the AWS KMS customer master key (CMK) that's used to encrypt the secret values for versions of this secret.",
            "resource-ref-type": "AWS::KMS::Key"
          },
          "SecretString": {
            "type": "String",
            "required": false,
            "description": "Specifies a literal string to use as the secret value in the initial version of this secret."
          },
          "GenerateSecretString": {
            "type": "Object",
            "required": false,
            "description": "A structure that specifies how to generate a random password by using the functionality of the GetRandomPassword API.",
            "properties": {
              "ExcludeUppercase": {
                "type": "Boolean",
                "required": false,
                "description": "Specifies that the generated password shouldn't include uppercase letters."
              },
              "RequireEachIncludedType": {
                "type": "Boolean",
                "required": false,
                "description": "Specifies whether the generated password must include at least one of every allowed character type."
              },
              "IncludeSpace": {
                "type": "Boolean",
                "required": false,
                "description": "Specifies that the generated password can include the space character."
              },
              "ExcludeCharacters": {
                "type": "String",
                "required": false,
                "description": "A string that includes characters that shouldn't be included in the generated password."
              },
              "GenerateStringKey": {
                "type": "String",
                "required": false,
                "description": "The JSON key name that's used to add the generated password to the JSON structure specified by the SecretStringTemplate parameter."
              },
              "PasswordLength": {
                "type": "Number",
                "required": false,
                "description": "The desired length of the generated password."
              },
              "ExcludePunctuation": {
                "type": "Boolean",
                "required": false,
                "description": "Specifies that the generated password shouldn't include punctuation characters."
              },
              "ExcludeLowercase": {
                "type": "Boolean",
                "required": false,
                "description": "Specifies that the generated password shouldn't include lowercase letters."
              },
              "SecretStringTemplate": {
                "type": "String",
                "required": false,
                "description": "A properly structured JSON string that the generated password can be added to."
              },
              "ExcludeNumbers": {
                "type": "Boolean",
                "required": false,
                "description": "Specifies that the generated password shouldn't include digits."
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Specifies an arbitrary set of tags (key�value pairs) to associate with this secret. Use tags to manage your AWS resources.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "Specifies the friendly name of the new secret."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SecretsManager::SecretTargetAttachment": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SecretsManager::SecretTargetAttachment resource completes the final link between a Secrets Manager secret and its associated database.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SecretsManager::SecretTargetAttachment resource completes the final link between a Secrets Manager secret and its associated database."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "SecretId": {
            "type": "String",
            "required": true,
            "description": "The Amazon Resource Name (ARN) or the friendly name of the secret that contains the credentials that you want to use with the specified service or database.",
            "resource-ref-type": "AWS::SecretsManager::Secret"
          },
          "TargetType": {
            "type": "String",
            "required": true,
            "description": "A string that defines the type of service or database that's being associated with the secret.",
            "allowed-values": [
              "*",
              "AWS::RDS::DBInstance",
              "AWS::RDS::DBCluster"
            ]
          },
          "TargetId": {
            "type": "String",
            "required": true,
            "description": "The ARN of the service or database whose credentials are stored in the specified secret. ",
            "resource-ref-type": "*"
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Serverless::Api": {
    "type": "Object",
    "required": false,
    "description": "Creates a collection of Amazon API Gateway resources and methods that can be invoked through HTTPS endpoints.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a collection of Amazon API Gateway resources and methods that can be invoked through HTTPS endpoints."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Name": {
            "type": "String",
            "required": true,
            "description": "A name for the API Gateway RestApi resource."
          },
          "StageName": {
            "type": "String",
            "required": true,
            "description": "The name of the stage, which API Gateway uses as the first path segment in the invoke Uniform Resource Identifier (URI)."
          },
          "DefinitionUri": {
            "type": "String",
            "required": false,
            "description": "S3 URI to the Swagger document describing the API."
          },
          "DefinitionBody": {
            "type": "String",
            "required": false,
            "description": "Swagger specification that describes your API."
          },
          "CacheClusterEnabled": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether cache clustering is enabled for the stage."
          },
          "CacheClusterSize": {
            "type": "String",
            "required": false,
            "description": "The stage's cache cluster size."
          },
          "Variables": {
            "type": "Json",
            "required": false,
            "description": "A map (string to string map) that defines the stage variables, where the variable name is the key and the variable value is the value."
          },
          "MethodSettings": {
            "type": "Object",
            "required": false,
            "description": "Configures settings for all of the stage's methods.",
            "properties": {
              "CacheDataEncrypted": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether the cached responses are encrypted."
              },
              "CacheTtlInSeconds": {
                "type": "Number",
                "required": false,
                "description": "The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses."
              },
              "CachingEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether responses are cached and returned for requests."
              },
              "DataTraceEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether data trace logging is enabled for methods in the stage."
              },
              "HttpMethod": {
                "type": "String",
                "required": false,
                "description": "The HTTP method."
              },
              "LoggingLevel": {
                "type": "String",
                "required": false,
                "description": "The logging level for this method."
              },
              "MetricsEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether Amazon CloudWatch metrics are enabled for methods in the stage."
              },
              "ResourcePath": {
                "type": "String",
                "required": false,
                "description": "The resource path for this method. Forward slashes (/) are encoded as ~1 and the initial slash must include a forward slash. For example, the path value /resource/subresource must be encoded as /~1resource~1subresource. To specify the root path, use only a slash (/)."
              },
              "ThrottlingBurstLimit": {
                "type": "Number",
                "required": false,
                "description": "The number of burst requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account."
              },
              "ThrottlingRateLimit": {
                "type": "Number",
                "required": false,
                "description": "The number of steady-state requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account."
              }
            }
          },
          "EndpointConfiguration": {
            "type": "String",
            "required": false,
            "description": "Specify the type of endpoint for API endpoint.",
            "allowed-values": [
              "*",
              "REGIONAL",
              "EDGE"
            ]
          },
          "BinaryMediaTypes": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "List of MIME types that your API could return."
          },
          "Cors": {
            "type": "Json",
            "required": false,
            "description": "Enable CORS for all your APIs."
          },
          "Auth": {
            "type": "Json",
            "required": false,
            "description": "Configure Auth on APIs."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Serverless::Application": {
    "type": "Object",
    "required": false,
    "description": "Embeds a serverless application from the AWS Serverless Application Repository or from an Amazon S3 bucket as a nested application.",
    "return-values": [
      {
        "name": "ApplicationOutputName",
        "description": "The value of the stack output with name ApplicationOutputName."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Embeds a serverless application from the AWS Serverless Application Repository or from an Amazon S3 bucket as a nested application."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Location": {
            "type": "Json",
            "required": true,
            "description": "Template URL or location of nested application."
          },
          "Parameters": {
            "type": "Json",
            "required": true,
            "description": "Application parameter values."
          },
          "NotificationArns": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "A list of existing Amazon SNS topics where notifications about stack events are sent.",
            "resource-ref-type": [
              "*",
              "AWS::SNS::Topic"
            ]
          },
          "Tags": {
            "type": "Json",
            "required": false,
            "description": "A map (string to string) that specifies the tags to be added to this application."
          },
          "TimeoutInMinutes": {
            "type": "Number",
            "required": false,
            "description": "The length of time, in minutes, that AWS CloudFormation waits for the nested stack to reach the CREATE_COMPLETE state."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Serverless::Function": {
    "type": "Object",
    "required": false,
    "description": "Creates a Lambda function, IAM execution role, and event source mappings which trigger the function.",
    "return-values": [
      {
        "name": "Arn",
        "description": "The ARN of the Lambda function."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a Lambda function, IAM execution role, and event source mappings which trigger the function."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Handler": {
            "type": "String",
            "required": true,
            "description": "Function within your code that is called to begin execution."
          },
          "Runtime": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "*",
              "dotnetcore1.0",
              "dotnetcore2.0",
              "dotnetcore2.1",
              "go1.x",
              "java8",
              "nodejs",
              "nodejs4.3",
              "nodejs4.3-edge",
              "nodejs6.10",
              "nodejs8.10",
              "python2.7",
              "python3.6"
            ],
            "description": "The runtime environment for the Lambda function that you are uploading."
          },
          "CodeUri": {
            "type": "String",
            "required": true,
            "description": "S3 Uri to the function code. The S3 object this Uri references MUST be a Lambda deployment package."
          },
          "FunctionName": {
            "type": "String",
            "required": false,
            "description": "A name for the function. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the function's name."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "Description of the function."
          },
          "MemorySize": {
            "type": "Number",
            "required": false,
            "description": "The amount of memory, in MB, that is allocated to your Lambda function. Lambda uses this value to infer the amount of CPU and memory that is allocated to your function."
          },
          "Timeout": {
            "type": "Number",
            "required": false,
            "description": "The function execution time (in seconds) after which Lambda terminates the function. By default, Timeout is set to 3 seconds."
          },
          "Role": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that Lambda assumes when it runs your code to access AWS."
          },
          "Policies": {
            "type": "Array",
            "array-type": "Json",
            "required": false,
            "resource-ref-type": [
              "*",
              "AWS::IAM::Policy"
            ],
            "description": "Names of AWS managed IAM policies or IAM policy documents that this function needs, which should be appended to the default role for this function."
          },
          "Environment": {
            "type": "Object",
            "required": false,
            "description": "Key-value pairs that Lambda caches and makes available for your Lambda functions.",
            "properties": {
              "Variables": {
                "type": "Json",
                "required": false,
                "description": "A map of key-value pairs that the Lambda function can access."
              }
            }
          },
          "VpcConfig": {
            "type": "Object",
            "required": false,
            "description": "If the Lambda function requires access to resources in a VPC, specify a VPC configuration that Lambda uses to set up an elastic network interface (ENI).",
            "properties": {
              "SecurityGroupIds": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "description": "A list of one or more security groups IDs in the VPC that includes the resources to which your Lambda function requires access."
              },
              "SubnetIds": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "resource-ref-type": "AWS::EC2::Subnet",
                "description": "A list of one or more subnet IDs in the VPC that includes the resources to which your Lambda function requires access."
              }
            }
          },
          "Tags": {
            "type": "Json",
            "required": false,
            "description": "A map (string to string) that specifies the tags to be added to this function."
          },
          "Events": {
            "type": "Named-Array",
            "schema-lookup-property": "Type",
            "required": false,
            "description": "A map (string to Event source object) that defines the events that trigger this function.",
            "child-schemas": {
              "S3": {
                "type": "Object",
                "required": false,
                "description": "The object describing an event source with type S3.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The object describing an event source with type S3."
                  },
                  "Properties": {
                    "type": "Object",
                    "required": true,
                    "properties": {
                      "Bucket": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::S3::Bucket",
                        "description": "S3 bucket name."
                      },
                      "Events": {
                        "type": "Array",
                        "array-type": "String",
                        "required": true,
                        "allowed-values": [
                          "s3:ObjectCreated:*",
                          "s3:ObjectCreated:Put",
                          "s3:ObjectCreated:Post",
                          "s3:ObjectCreated:Copy",
                          "s3:ObjectCreated:CompleteMultipartUpload",
                          "s3:ObjectRemoved:*",
                          "s3:ObjectRemoved:Delete",
                          "s3:ObjectRemoved:DeleteMarkerCreated",
                          "s3:ReducedRedundancyLostObject",
                          "*"
                        ],
                        "description": "S3 event types."
                      },
                      "Filter": {
                        "type": "Object",
                        "required": false,
                        "description": "Rules to filter events on.",
                        "properties": {
                          "S3Key": {
                            "type": "String",
                            "required": true,
                            "description": "Amazon S3 filtering rules that describe for which object key names to send notifications."
                          }
                        }
                      }
                    }
                  }
                }
              },
              "SNS": {
                "type": "Object",
                "required": false,
                "description": "The object describing an event source with type SNS.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The object describing an event source with type SNS."
                  },
                  "Properties": {
                    "type": "Object",
                    "required": true,
                    "properties": {
                      "Topic": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::SNS::Topic",
                        "description": "Topic ARN."
                      }
                    }
                  }
                }
              },
              "Kinesis": {
                "type": "Object",
                "required": false,
                "description": "The object describing an event source with type Kinesis.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The object describing an event source with type Kinesis."
                  },
                  "Properties": {
                    "type": "Object",
                    "required": true,
                    "properties": {
                      "Stream": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::Kinesis::Stream",
                        "description": "ARN of the Amazon Kinesis stream."
                      },
                      "StartingPosition": {
                        "type": "String",
                        "required": true,
                        "allowed-values": [
                          "*",
                          "TRIM_HORIZON",
                          "LATEST"
                        ],
                        "description": "One of TRIM_HORIZON or LATEST."
                      },
                      "BatchSize": {
                        "type": "Number",
                        "required": false,
                        "description": "Maximum number of stream records to process per function invocation."
                      }
                    }
                  }
                }
              },
              "DynamoDB": {
                "type": "Object",
                "required": false,
                "description": "The object describing an event source with type DynamoDB.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The object describing an event source with type DynamoDB."
                  },
                  "Properties": {
                    "type": "Object",
                    "required": true,
                    "properties": {
                      "Stream": {
                        "type": "String",
                        "required": true,
                        "description": "ARN of the DynamoDB stream."
                      },
                      "StartingPosition": {
                        "type": "String",
                        "required": true,
                        "allowed-values": [
                          "*",
                          "TRIM_HORIZON",
                          "LATEST"
                        ],
                        "description": "One of TRIM_HORIZON or LATEST."
                      },
                      "BatchSize": {
                        "type": "Number",
                        "required": false,
                        "description": "Maximum number of stream records to process per function invocation."
                      }
                    }
                  }
                }
              },
              "SQS": {
                "type": "Object",
                "required": false,
                "description": "The object describing an event source with type SQS.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The object describing an event source with type SQS."
                  },
                  "Properties": {
                    "type": "Object",
                    "required": true,
                    "properties": {
                      "Queue": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::SQS::Queue",
                        "description": "ARN of the SQS queue."
                      },
                      "BatchSize": {
                        "type": "Number",
                        "required": false,
                        "description": "Maximum number of messages to process per function invocation."
                      }
                    }
                  }
                }
              },
              "Api": {
                "type": "Object",
                "required": false,
                "description": "The object describing an event source with type Api.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The object describing an event source with type Api."
                  },
                  "Properties": {
                    "type": "Object",
                    "required": true,
                    "properties": {
                      "Path": {
                        "type": "String",
                        "required": true,
                        "description": "Uri path for which this function is invoked. MUST start with /."
                      },
                      "Method": {
                        "type": "String",
                        "required": true,
                        "allowed-values": [
                          "*",
                          "ANY",
                          "DELETE",
                          "GET",
                          "HEAD",
                          "OPTIONS",
                          "PATCH",
                          "POST",
                          "PUT"
                        ],
                        "description": "HTTP method for which this function is invoked."
                      },
                      "RestApiId": {
                        "type": "String",
                        "required": false,
                        "resource-ref-type": [
                          "*",
                          "AWS::Serverless::Api"
                        ],
                        "description": "Identifier of a RestApi resource which MUST contain an operation with the given path and method."
                      }
                    }
                  }
                }
              },
              "Schedule": {
                "type": "Object",
                "required": false,
                "description": "The object describing an event source with type Schedule.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The object describing an event source with type Schedule."
                  },
                  "Properties": {
                    "type": "Object",
                    "required": true,
                    "properties": {
                      "Schedule": {
                        "type": "String",
                        "required": true,
                        "description": "Schedule expression for example \"rate(5 minutes)\", see the CloudWatch Events user guide for details on the format of this field."
                      },
                      "Input": {
                        "type": "Json",
                        "required": true,
                        "description": "JSON-formatted string to pass to the function as the event body."
                      }
                    }
                  }
                }
              },
              "CloudWatchEvent": {
                "type": "Object",
                "required": false,
                "description": "The object describing an event source with type CloudWatchEvent.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The object describing an event source with type CloudWatchEvent."
                  },
                  "Properties": {
                    "type": "Object",
                    "required": true,
                    "properties": {
                      "Pattern": {
                        "type": "Json",
                        "required": true,
                        "description": "Pattern describing which CloudWatch events trigger the function. Only matching events trigger the function."
                      },
                      "Input": {
                        "type": "Json",
                        "required": false,
                        "description": "JSON-formatted string to pass to the function as the event body."
                      },
                      "InputPath": {
                        "type": "String",
                        "required": false,
                        "description": "JSONPath describing the part of the event to pass to the function."
                      }
                    }
                  }
                }
              },
              "CloudWatchLogs": {
                "type": "Object",
                "required": false,
                "description": "The object describing an event source with type CloudWatchLogs.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The object describing an event source with type CloudWatchLogs."
                  },
                  "Properties": {
                    "type": "Object",
                    "required": true,
                    "properties": {
                      "LogGroupName": {
                        "type": "String",
                        "required": true,
                        "description": "Name of the CloudWatch Log Group from which to process logs.",
                        "resource-ref-type": "AWS::Logs::LogGroup"
                      },
                      "FilterPattern": {
                        "type": "String",
                        "required": false,
                        "description": "A CloudWatch Logs FilterPattern to specify which logs in the Log Group to process."
                      }
                    }
                  }
                }
              },
              "IoTRule": {
                "type": "Object",
                "required": false,
                "description": "The object describing an event source with type IoTRule.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The object describing an event source with type IoTRule."
                  },
                  "Properties": {
                    "type": "Object",
                    "required": true,
                    "properties": {
                      "Sql": {
                        "type": "String",
                        "required": true,
                        "description": "The SQL statement that queries the topic. For more information, see Rules for AWS IoT in the AWS IoT Developer Guide."
                      },
                      "AwsIotSqlVersion": {
                        "type": "String",
                        "required": false,
                        "description": "The version of the SQL rules engine to use when evaluating the rule."
                      }
                    }
                  }
                }
              },
              "AlexaSkill": {
                "type": "Object",
                "required": false,
                "description": "The object describing an event source with type AlexaSkill.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The object describing an event source with type AlexaSkill."
                  },
                  "Properties": {
                    "type": "Json",
                    "required": true
                  }
                }
              }
            }
          },
          "Tracing": {
            "type": "String",
            "required": false,
            "description": "String that specifies the function's X-Ray tracing mode.",
            "allowed-values": [
              "*",
              "Active",
              "PassThrough"
            ]
          },
          "KmsKeyArn": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::KMS::Key",
            "description": "The Amazon Resource Name (ARN) of an AWS Key Management Service (AWS KMS) key that Lambda uses to encrypt and decrypt your function's environment variables."
          },
          "DeadLetterQueue": {
            "type": "Json",
            "required": false,
            "description": "Configures SNS topic or SQS queue where Lambda sends events that it can't process.",
            "resource-ref-type": [
              "*",
              "AWS::SNS::Topic",
              "AWS::SQS::Queue"
            ]
          },
          "Layers": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "List of LayerVersion ARNs that should be used by this function."
          },
          "AutoPublishAlias": {
            "type": "String",
            "required": false,
            "description": "Name of the Alias."
          },
          "DeploymentPreference": {
            "type": "Json",
            "required": false,
            "description": "Settings to enable Safe Lambda Deployments."
          },
          "ReservedConcurrentExecutions": {
            "type": "Number",
            "required": false,
            "description": "The maximum of concurrent executions you want to reserve for the function."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Serverless::LayerVersion": {
    "type": "Object",
    "required": false,
    "description": "Creates a Lambda LayerVersion that contains library or runtime code needed by a Lambda Function.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a Lambda LayerVersion that contains library or runtime code needed by a Lambda Function."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "LayerName": {
            "type": "String",
            "required": false,
            "description": "Name of this layer."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "Description of this layer."
          },
          "ContentUri": {
            "type": "Json",
            "required": false,
            "description": "S3 Uri or location for the layer code."
          },
          "CompatibleRuntimes": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "List of runtimes compatible with this LayerVersion."
          },
          "LicenseInfo": {
            "type": "String",
            "required": false,
            "description": "Information about the license for this LayerVersion."
          },
          "RetentionPolicy": {
            "type": "String",
            "required": false,
            "description": "When Retain is set, SAM adds DeletionPolicy: Retain to the transformed resource so CloudFormation does not delete old versions after an update.",
            "allowed-values": [
              "*",
              "Retain",
              "Delete"
            ]
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Serverless::SimpleTable": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Serverless::SimpleTable resource creates a DynamoDB table with a single attribute primary key. It is useful when data only needs to be accessed via a primary key.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Serverless::SimpleTable resource creates a DynamoDB table with a single attribute primary key. It is useful when data only needs to be accessed via a primary key."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "PrimaryKey": {
            "type": "Object",
            "required": false,
            "description": "Attribute name and type to be used as the table's primary key. This cannot be modified without replacing the resource.",
            "properties": {
              "Name": {
                "type": "String",
                "required": false,
                "description": "Attribute name of the primary key. Defaults to id."
              },
              "Type": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "*",
                  "String",
                  "Number",
                  "Binary"
                ],
                "description": "Attribute type of the primary key."
              }
            }
          },
          "ProvisionedThroughput": {
            "type": "Object",
            "required": false,
            "description": "Read and write throughput provisioning information. Defaults to 5 read and 5 write capacity units per second.",
            "properties": {
              "ReadCapacityUnits": {
                "type": "Number",
                "required": false,
                "description": "Sets the desired minimum number of consistent reads of items (up to 1KB in size) per second for the specified table before Amazon DynamoDB balances the load."
              },
              "WriteCapacityUnits": {
                "type": "Number",
                "required": false,
                "description": "Sets the desired minimum number of consistent writes of items (up to 1KB in size) per second for the specified table before Amazon DynamoDB balances the load."
              }
            }
          },
          "Tags": {
            "type": "Json",
            "required": false,
            "description": "A map (string to string) that specifies the tags to be added to this table. Keys and values are limited to alphanumeric characters."
          },
          "TableName": {
            "type": "String",
            "required": false,
            "description": "Name for the DynamoDB Table"
          },
          "SSESpecification": {
            "type": "Object",
            "required": false,
            "description": "Specifies the settings to enable server-side encryption.",
            "properties": {
              "SSEEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Whether server-side encryption is enabled or not."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ServiceCatalog::AcceptedPortfolioShare": {
    "type": "Object",
    "required": false,
    "description": "Accepts an offer to share the specified portfolio for AWS Service Catalog.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Accepts an offer to share the specified portfolio for AWS Service Catalog."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AcceptLanguage": {
            "type": "String",
            "required": false,
            "description": "The language code."
          },
          "PortfolioId": {
            "type": "String",
            "required": true,
            "description": "The portfolio identifier.",
            "resource-ref-type": "AWS::ServiceCatalog::Portfolio"
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ServiceCatalog::CloudFormationProduct": {
    "type": "Object",
    "required": false,
    "description": "Creates the specified product for AWS Service Catalog.",
    "return-values": [
      {
        "name": "ProductName",
        "description": "The name of the product."
      },
      {
        "name": "ProvisioningArtifactIds",
        "description": "The IDs of the provisioning artifacts."
      },
      {
        "name": "ProvisioningArtifactNames",
        "description": "The names of the provisioning artifacts."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates the specified product for AWS Service Catalog."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Owner": {
            "type": "String",
            "required": true,
            "description": "The owner of the product."
          },
          "SupportDescription": {
            "type": "String",
            "required": false,
            "description": "The support information about the product."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "The description of the product."
          },
          "Distributor": {
            "type": "String",
            "required": false,
            "description": "The distributor of the product."
          },
          "SupportEmail": {
            "type": "String",
            "required": false,
            "description": "The contact email for product support."
          },
          "AcceptLanguage": {
            "type": "String",
            "required": false,
            "description": "The language code."
          },
          "SupportUrl": {
            "type": "String",
            "required": false,
            "description": "The contact URL for product support."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "One or more tags.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "The name of the product."
          },
          "ProvisioningArtifactParameters": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "The configuration of the provisioning artifact (also known as a version) for a product.",
            "properties": {
              "Description": {
                "type": "String",
                "required": false,
                "description": "The description of the provisioning artifact."
              },
              "Info": {
                "type": "Json",
                "required": true,
                "description": "The URL of the CloudFormation template in Amazon S3."
              },
              "Name": {
                "type": "String",
                "required": false,
                "description": "The name of the provisioning artifact."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ServiceCatalog::CloudFormationProvisionedProduct": {
    "type": "Object",
    "required": false,
    "description": "Provisions the specified product for AWS Service Catalog.",
    "return-values": [
      {
        "name": "CloudformationStackArn",
        "description": "The Amazon Resource Name (ARN) of the CloudFormation stack"
      },
      {
        "name": "RecordId",
        "description": "The ID of the record, such as rec-rjeatvy434trk."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Provisions the specified product for AWS Service Catalog."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "PathId": {
            "type": "String",
            "required": false,
            "description": "The path identifier of the product."
          },
          "ProvisioningParameters": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Parameters specified by the administrator that are required for provisioning the product.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The parameter value."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The parameter key."
              }
            }
          },
          "ProductName": {
            "type": "String",
            "required": false,
            "description": "The product name. This name must be unique for the user."
          },
          "ProvisioningArtifactName": {
            "type": "String",
            "required": false,
            "description": "The name of the provisioning artifact."
          },
          "NotificationArns": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The SNS topic ARNs for stack-related events.",
            "resource-ref-type": [
              "*",
              "AWS::SNS::Topic"
            ]
          },
          "AcceptLanguage": {
            "type": "String",
            "required": false,
            "description": "The language code."
          },
          "ProductId": {
            "type": "String",
            "required": false,
            "description": "The product identifier. You must specify either the ID or the name of the product, but not both."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "One or more tags.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          },
          "ProvisionedProductName": {
            "type": "String",
            "required": false,
            "description": "A user-friendly name for the provisioned product. "
          },
          "ProvisioningArtifactId": {
            "type": "String",
            "required": false,
            "description": "The identifier of the provisioning artifact."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ServiceCatalog::LaunchNotificationConstraint": {
    "type": "Object",
    "required": false,
    "description": "Creates a notification constraint for AWS Service Catalog.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a notification constraint for AWS Service Catalog."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "The description of the constraint."
          },
          "NotificationArns": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "description": "The notification ARNs.",
            "resource-ref-type": [
              "*",
              "AWS::SNS::Topic"
            ]
          },
          "AcceptLanguage": {
            "type": "String",
            "required": false,
            "description": "The language code."
          },
          "PortfolioId": {
            "type": "String",
            "required": true,
            "description": "The portfolio identifier.",
            "resource-ref-type": [
              "*",
              "AWS::ServiceCatalog::Portfolio"
            ]
          },
          "ProductId": {
            "type": "String",
            "required": true,
            "description": "The product identifier."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ServiceCatalog::LaunchRoleConstraint": {
    "type": "Object",
    "required": false,
    "description": "Creates a launch constraint for AWS Service Catalog.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a launch constraint for AWS Service Catalog."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "The description of the constraint."
          },
          "AcceptLanguage": {
            "type": "String",
            "required": false,
            "description": "The language code."
          },
          "PortfolioId": {
            "type": "String",
            "required": true,
            "description": "The portfolio identifier.",
            "resource-ref-type": [
              "*",
              "AWS::ServiceCatalog::Portfolio"
            ]
          },
          "ProductId": {
            "type": "String",
            "required": true,
            "description": "The product identifier."
          },
          "RoleArn": {
            "type": "String",
            "required": true,
            "description": "The ARN of the launch role.",
            "resource-ref-type": "AWS::IAM::Role"
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ServiceCatalog::LaunchTemplateConstraint": {
    "type": "Object",
    "required": false,
    "description": "Creates a template constraint for AWS Service Catalog.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a template constraint for AWS Service Catalog."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "The description of the constraint."
          },
          "AcceptLanguage": {
            "type": "String",
            "required": false,
            "description": "The language code."
          },
          "PortfolioId": {
            "type": "String",
            "required": true,
            "description": "The portfolio identifier.",
            "resource-ref-type": [
              "*",
              "AWS::ServiceCatalog::Portfolio"
            ]
          },
          "ProductId": {
            "type": "String",
            "required": true,
            "description": "The product identifier."
          },
          "Rules": {
            "type": "String",
            "required": true,
            "description": "The constraint rules."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ServiceCatalog::Portfolio": {
    "type": "Object",
    "required": false,
    "description": "Creates a portfolio for AWS Service Catalog.",
    "return-values": [
      {
        "name": "PortfolioName",
        "description": "The name of the portfolio."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a portfolio for AWS Service Catalog."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ProviderName": {
            "type": "String",
            "required": true,
            "description": "The name of the portfolio provider."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "The description of the portfolio."
          },
          "DisplayName": {
            "type": "String",
            "required": true,
            "description": "The name to use for display purposes."
          },
          "AcceptLanguage": {
            "type": "String",
            "required": false,
            "description": "The language code."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "One or more tags.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ServiceCatalog::PortfolioPrincipalAssociation": {
    "type": "Object",
    "required": false,
    "description": "Associates the specified principal with the specified portfolio for AWS Service Catalog.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Associates the specified principal with the specified portfolio for AWS Service Catalog."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "PrincipalARN": {
            "type": "String",
            "required": true,
            "description": "The ARN of the principal",
            "resource-ref-type": [
              "*",
              "AWS::IAM::User",
              "AWS::IAM::Group",
              "AWS::IAM::Role"
            ]
          },
          "AcceptLanguage": {
            "type": "String",
            "required": false,
            "description": "The language code."
          },
          "PortfolioId": {
            "type": "String",
            "required": true,
            "description": "The portfolio identifier.",
            "resource-ref-type": [
              "*",
              "AWS::ServiceCatalog::Portfolio"
            ]
          },
          "PrincipalType": {
            "type": "String",
            "required": true,
            "description": "The principal type (IAM)."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ServiceCatalog::PortfolioProductAssociation": {
    "type": "Object",
    "required": false,
    "description": "Associates the specified product with the specified portfolio for AWS Service Catalog.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Associates the specified product with the specified portfolio for AWS Service Catalog."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "SourcePortfolioId": {
            "type": "String",
            "required": false,
            "description": "The identifier of the source portfolio.",
            "resource-ref-type": [
              "*",
              "AWS::ServiceCatalog::Portfolio"
            ]
          },
          "AcceptLanguage": {
            "type": "String",
            "required": false,
            "description": "The language code."
          },
          "PortfolioId": {
            "type": "String",
            "required": true,
            "description": "The portfolio identifier.",
            "resource-ref-type": [
              "*",
              "AWS::ServiceCatalog::Portfolio"
            ]
          },
          "ProductId": {
            "type": "String",
            "required": true,
            "description": "The product identifier."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ServiceCatalog::PortfolioShare": {
    "type": "Object",
    "required": false,
    "description": "Shares the specified portfolio for AWS Service Catalog with the specified account.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Shares the specified portfolio for AWS Service Catalog with the specified account."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AccountId": {
            "type": "String",
            "required": true,
            "description": "The AWS account ID."
          },
          "AcceptLanguage": {
            "type": "String",
            "required": false,
            "description": "The language code."
          },
          "PortfolioId": {
            "type": "String",
            "required": true,
            "description": "The portfolio identifier.",
            "resource-ref-type": [
              "*",
              "AWS::ServiceCatalog::Portfolio"
            ]
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ServiceCatalog::TagOption": {
    "type": "Object",
    "required": false,
    "description": "A TagOption is a key-value pair managed by AWS Service Catalog that serves as a template for creating an AWS tag.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "A TagOption is a key-value pair managed by AWS Service Catalog that serves as a template for creating an AWS tag."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Active": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the TagOption is active."
          },
          "Value": {
            "type": "String",
            "required": true,
            "description": "The TagOption value."
          },
          "Key": {
            "type": "String",
            "required": true,
            "description": "The TagOption key."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ServiceCatalog::TagOptionAssociation": {
    "type": "Object",
    "required": false,
    "description": "Associates the specified TagOption with the specified AWS Service Catalog resource.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Associates the specified TagOption with the specified AWS Service Catalog resource."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "TagOptionId": {
            "type": "String",
            "required": true,
            "description": "The TagOption identifier.",
            "resource-ref-type": [
              "*"
            ]
          },
          "ResourceId": {
            "type": "String",
            "required": true,
            "description": "The resource identifier.",
            "resource-ref-type": [
              "*"
            ]
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ServiceDiscovery::HttpNamespace": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ServiceDiscovery::HttpNamespace resource specifies values for an AWS Cloud Map HTTP namespace.",
    "return-values": [
      {
        "name": "Id",
        "description": "The ID of the namespace."
      },
      {
        "name": "Arn",
        "description": "The Amazon Resource Name (ARN) of the namespace, such as arn:aws:service-discovery:us-east-1:123456789012:http-namespace/http-namespace-a1bzhi."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ServiceDiscovery::HttpNamespace resource specifies values for an AWS Cloud Map HTTP namespace."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the namespace."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "A name for the namespace."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ServiceDiscovery::Instance": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ServiceDiscovery::Instance resource specifies information about an instance that Amazon Route 53 creates.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ServiceDiscovery::Instance resource specifies information about an instance that Amazon Route 53 creates."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "InstanceAttributes": {
            "type": "Json",
            "required": true,
            "description": "A string map that contains attribute keys and values."
          },
          "InstanceId": {
            "type": "String",
            "required": false,
            "description": "An identifier that you want to associate with the instance."
          },
          "ServiceId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ServiceDiscovery::Service",
            "description": "The ID of the service that you want to use for settings for the resource record sets and health check that Route 53 will create."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ServiceDiscovery::PrivateDnsNamespace": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ServiceDiscovery::PrivateDnsNamespace resource specifies information about a private namespace for Amazon Route 53.",
    "return-values": [
      {
        "name": "Id",
        "description": "The ID of the private namespace."
      },
      {
        "name": "Arn",
        "description": "The Amazon Resource Name (ARN) of the private namespace."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ServiceDiscovery::PrivateDnsNamespace resource specifies information about a private namespace for Amazon Route 53."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description for the namespace."
          },
          "Vpc": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::EC2::Vpc",
            "description": "The ID of the Amazon VPC that you want to associate the namespace with."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "The name that you want to assign to this namespace."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ServiceDiscovery::PublicDnsNamespace": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ServiceDiscovery::PublicDnsNamespace resource specifies information about a public namespace for Amazon Route 53.",
    "return-values": [
      {
        "name": "Id",
        "description": "The ID of the public namespace."
      },
      {
        "name": "Arn",
        "description": "The Amazon Resource Name (ARN) of the public namespace."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ServiceDiscovery::PublicDnsNamespace resource specifies information about a public namespace for Amazon Route 53."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description for the namespace."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "The name that you want to assign to this namespace."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ServiceDiscovery::Service": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ServiceDiscovery::Service resource defines a template for up to five records and an optional health check that you want Amazon Route 53 to create when you register an instance.",
    "return-values": [
      {
        "name": "Id",
        "description": "The ID of the service."
      },
      {
        "name": "Arn",
        "description": "The Amazon Resource Name (ARN) of the service."
      },
      {
        "name": "Name",
        "description": "The name that you assigned to the service."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ServiceDiscovery::Service resource defines a template for up to five records and an optional health check that you want Amazon Route 53 to create when you register an instance."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description for the service."
          },
          "DnsConfig": {
            "type": "Object",
            "required": true,
            "description": "A complex type that contains information about the resource record sets that you want Route 53 to create when you register an instance.",
            "properties": {
              "DnsRecords": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "Contains one DnsRecord element for each DNS record that you want Route 53 to create when you register an instance.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The DNS type of the record that you want Route 53 to create.",
                    "allowed-values": [
                      "*",
                      "A",
                      "AAAA",
                      "SRV"
                    ]
                  },
                  "TTL": {
                    "type": "String",
                    "required": true,
                    "description": "The amount of time, in seconds, that you want DNS resolvers to cache the settings for this record."
                  }
                }
              },
              "NamespaceId": {
                "type": "String",
                "required": true,
                "description": "The ID of the namespace that you want to use for DNS configuration."
              },
              "RoutingPolicy": {
                "type": "String",
                "required": false,
                "description": "The routing policy."
              }
            }
          },
          "HealthCheckConfig": {
            "type": "Object",
            "required": false,
            "description": "A complex type that contains settings for an optional health check.",
            "properties": {
              "Type": {
                "type": "String",
                "required": true,
                "description": "The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy.",
                "allowed-values": [
                  "*",
                  "HTTP",
                  "HTTPS",
                  "TCP"
                ]
              },
              "ResourcePath": {
                "type": "String",
                "required": false,
                "description": "The path that you want Route 53 to request when performing health checks."
              },
              "FailureThreshold": {
                "type": "Number",
                "required": false,
                "description": "The number of consecutive health checks that an endpoint must pass or fail for Route 53 to change the current status of the endpoint from unhealthy to healthy or vice versa."
              }
            }
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "The name that you want to assign to the service."
          },
          "HealthCheckCustomConfig": {
            "type": "Object",
            "required": false,
            "description": "A complex type that contains settings for an optional health check.",
            "properties": {
              "Type": {
                "type": "String",
                "required": false,
                "description": "The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy.",
                "allowed-values": [
                  "*",
                  "HTTP",
                  "HTTPS",
                  "TCP"
                ]
              },
              "ResourcePath": {
                "type": "String",
                "required": false,
                "description": "The path that you want Route 53 to request when performing health checks."
              },
              "FailureThreshold": {
                "type": "Number",
                "required": false,
                "description": "The number of consecutive health checks that an endpoint must pass or fail for Route 53 to change the current status of the endpoint from unhealthy to healthy or vice versa."
              }
            }
          },
          "NamespaceId": {
            "type": "String",
            "required": false,
            "description": "The ID of the namespace that you want to use to create the service."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SES::ConfigurationSet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SES::ConfigurationSet resource let syou create groups of rules that you can apply to the emails you send using Amazon SES.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SES::ConfigurationSet resource let syou create groups of rules that you can apply to the emails you send using Amazon SES."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Name": {
            "type": "String",
            "required": false,
            "description": "The name of the configuration set."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SES::ConfigurationSetEventDestination": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SES::ConfigurationSetEventDestination resource specifies a configuration set event destination for Amazon SES.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SES::ConfigurationSetEventDestination resource specifies a configuration set event destination for Amazon SES."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ConfigurationSetName": {
            "type": "String",
            "required": true,
            "description": "The name of the configuration set that the event destination should be associated with."
          },
          "EventDestination": {
            "type": "Object",
            "required": true,
            "description": "The AWS service that email sending event information will be published to.",
            "properties": {
              "CloudWatchDestination": {
                "type": "Object",
                "required": false,
                "description": "The names, default values, and sources of the dimensions associated with an CloudWatch event destination.",
                "properties": {
                  "DimensionConfigurations": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": false,
                    "description": "A list of dimensions upon which to categorize your emails when you publish email sending events to CloudWatch.",
                    "properties": {
                      "DimensionValueSource": {
                        "type": "String",
                        "required": true,
                        "description": "The place where Amazon SES finds the value of a dimension to publish to CloudWatch."
                      },
                      "DefaultDimensionValue": {
                        "type": "String",
                        "required": true,
                        "description": "The default value of the dimension that is published to Amazon CloudWatch if you do not provide the value of the dimension when you send an email."
                      },
                      "DimensionName": {
                        "type": "String",
                        "required": true,
                        "description": "The name of an Amazon CloudWatch dimension associated with an email sending metric."
                      }
                    }
                  }
                }
              },
              "Enabled": {
                "type": "Boolean",
                "required": false,
                "description": "Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set."
              },
              "MatchingEventTypes": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "description": "The type of email sending events to publish to the event destination.",
                "allowed-values": [
                  "*",
                  "send",
                  "reject",
                  "bounce",
                  "complaint",
                  "delivery",
                  "open",
                  "click",
                  "renderingFailure"
                ]
              },
              "Name": {
                "type": "String",
                "required": false,
                "description": "The name of the event destination."
              },
              "KinesisFirehoseDestination": {
                "type": "Object",
                "required": false,
                "description": "Contains the delivery stream ARN and the IAM role ARN associated with an Kinesis Firehose event destination.",
                "properties": {
                  "IAMRoleARN": {
                    "type": "String",
                    "required": true,
                    "description": "The ARN of the IAM role under which Amazon SES publishes email sending events to the Amazon Kinesis Firehose stream.",
                    "resource-ref-type": "AWS::IAM::Role"
                  },
                  "DeliveryStreamARN": {
                    "type": "String",
                    "required": true,
                    "description": "The ARN of the Amazon Kinesis Firehose stream that email sending events should be published to.",
                    "resource-ref-type": "AWS::KinesisFirehose::DeliveryStream"
                  }
                }
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SES::ReceiptFilter": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SES::ReceiptFilter resource whether to accept or reject mail originating from an IP address or range of IP addresses for Amazon SES.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SES::ReceiptFilter resource whether to accept or reject mail originating from an IP address or range of IP addresses for Amazon SES."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Filter": {
            "type": "Object",
            "required": true,
            "description": "The IP addresses to block or allow, and whether to block or allow incoming mail from them.",
            "properties": {
              "IpFilter": {
                "type": "Object",
                "required": true,
                "description": "The IP addresses to block or allow, and whether to block or allow incoming mail from them.",
                "properties": {
                  "Policy": {
                    "type": "String",
                    "required": true,
                    "description": "Indicates whether to block or allow incoming mail from the specified IP addresses."
                  },
                  "Cidr": {
                    "type": "String",
                    "required": true,
                    "description": "A single IP address or a range of IP addresses that you want to block or allow, specified in Classless Inter-Domain Routing (CIDR) notation."
                  }
                }
              },
              "Name": {
                "type": "String",
                "required": false,
                "description": "The name of the IP address filter."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SES::ReceiptRule": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SES::ReceiptRule resource specifies which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SES::ReceiptRule resource specifies which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "After": {
            "type": "String",
            "required": false,
            "description": "The name of an existing rule after which the new rule will be placed."
          },
          "Rule": {
            "type": "Object",
            "required": true,
            "description": "The specified rule's name, actions, recipients, domains, enabled status, scan status, and TLS policy.",
            "properties": {
              "ScanEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "If true, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is false."
              },
              "Recipients": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The recipient domains and email addresses that the receipt rule applies to."
              },
              "Actions": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.",
                "properties": {
                  "BounceAction": {
                    "type": "Object",
                    "required": false,
                    "description": "Rejects the received email by returning a bounce response to the sender and, optionally, publishes a notification to Amazon SNS.",
                    "properties": {
                      "Sender": {
                        "type": "String",
                        "required": true,
                        "description": "The email address of the sender of the bounced email. This is the address from which the bounce message will be sent."
                      },
                      "SmtpReplyCode": {
                        "type": "String",
                        "required": true,
                        "description": "The SMTP reply code, as defined by RFC 5321."
                      },
                      "Message": {
                        "type": "String",
                        "required": true,
                        "description": "Human-readable text to include in the bounce message."
                      },
                      "TopicArn": {
                        "type": "String",
                        "required": false,
                        "description": "The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the bounce action is taken.",
                        "resource-ref-type": "AWS::SNS::Topic"
                      },
                      "StatusCode": {
                        "type": "String",
                        "required": false,
                        "description": "The SMTP enhanced status code, as defined by RFC 3463."
                      }
                    }
                  },
                  "S3Action": {
                    "type": "Object",
                    "required": false,
                    "description": "Saves the received message to an Amazon S3 bucket and, optionally, publishes a notification to Amazon SNS.",
                    "properties": {
                      "BucketName": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the Amazon S3 bucket that incoming email will be saved to.",
                        "resource-ref-type": "AWS::S3::Bucket"
                      },
                      "KmsKeyArn": {
                        "type": "String",
                        "required": false,
                        "description": "The customer master key that Amazon SES should use to encrypt your emails before saving them to the Amazon S3 bucket.",
                        "resource-ref-type": "AWS::KMS::Key"
                      },
                      "TopicArn": {
                        "type": "String",
                        "required": false,
                        "description": "The ARN of the Amazon SNS topic to notify when the message is saved to the Amazon S3 bucket. ",
                        "resource-ref-type": "AWS::SNS::Topic"
                      },
                      "ObjectKeyPrefix": {
                        "type": "String",
                        "required": false,
                        "description": "The key prefix of the Amazon S3 bucket."
                      }
                    }
                  },
                  "StopAction": {
                    "type": "Object",
                    "required": false,
                    "description": "Terminates the evaluation of the receipt rule set and optionally publishes a notification to Amazon SNS.",
                    "properties": {
                      "Scope": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the RuleSet that is being stopped."
                      },
                      "TopicArn": {
                        "type": "String",
                        "required": false,
                        "description": "The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the stop action is taken.",
                        "resource-ref-type": "AWS::SNS::Topic"
                      }
                    }
                  },
                  "SNSAction": {
                    "type": "Object",
                    "required": false,
                    "description": "Publishes the email content within a notification to Amazon SNS.",
                    "properties": {
                      "TopicArn": {
                        "type": "String",
                        "required": false,
                        "description": "The Amazon Resource Name (ARN) of the Amazon SNS topic to notify.",
                        "resource-ref-type": "AWS::SNS::Topic"
                      },
                      "Encoding": {
                        "type": "String",
                        "required": false,
                        "description": "The encoding to use for the email within the Amazon SNS notification."
                      }
                    }
                  },
                  "WorkmailAction": {
                    "type": "Object",
                    "required": false,
                    "description": "Calls Amazon WorkMail and, optionally, publishes a notification to Amazon SNS.",
                    "properties": {
                      "TopicArn": {
                        "type": "String",
                        "required": false,
                        "description": "The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the WorkMail action is called.",
                        "resource-ref-type": "AWS::SNS::Topic"
                      },
                      "OrganizationArn": {
                        "type": "String",
                        "required": true,
                        "description": "The ARN of the Amazon WorkMail organization."
                      }
                    }
                  },
                  "AddHeaderAction": {
                    "type": "Object",
                    "required": false,
                    "description": "Adds a header to the received email.",
                    "properties": {
                      "HeaderValue": {
                        "type": "String",
                        "required": true,
                        "description": "Must be less than 2048 characters, and must not contain newline characters."
                      },
                      "HeaderName": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the header to add."
                      }
                    }
                  },
                  "LambdaAction": {
                    "type": "Object",
                    "required": false,
                    "description": "Calls an AWS Lambda function, and optionally, publishes a notification to Amazon SNS.",
                    "properties": {
                      "FunctionArn": {
                        "type": "String",
                        "required": true,
                        "description": "The Amazon Resource Name (ARN) of the AWS Lambda function.",
                        "resource-ref-type": "AWS::Lambda::Function"
                      },
                      "TopicArn": {
                        "type": "String",
                        "required": false,
                        "description": "The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the Lambda action is taken.",
                        "resource-ref-type": "AWS::SNS::Topic"
                      },
                      "InvocationType": {
                        "type": "String",
                        "required": false,
                        "description": "The invocation type of the AWS Lambda function.",
                        "allowed-values": [
                          "*",
                          "Event",
                          "RequestResponse"
                        ]
                      }
                    }
                  }
                }
              },
              "Enabled": {
                "type": "Boolean",
                "required": false,
                "description": "If true, the receipt rule is active. The default value is false."
              },
              "Name": {
                "type": "String",
                "required": false,
                "description": "The name of the receipt rule."
              },
              "TlsPolicy": {
                "type": "String",
                "required": false,
                "description": "Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS)."
              }
            }
          },
          "RuleSetName": {
            "type": "String",
            "required": true,
            "description": "The name of the rule set that the receipt rule will be added to.",
            "resource-ref-type": [
              "*",
              "AWS::SES::ReceiptRuleSet"
            ]
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SES::ReceiptRuleSet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SES::ReceiptRuleSet resource specifies an empty rule set for Amazon SES.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SES::ReceiptRuleSet resource specifies an empty rule set for Amazon SES."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "RuleSetName": {
            "type": "String",
            "required": false,
            "description": "The name of the rule set to create. "
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SES::Template": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SES::Template resource specifies the content of an email (composed of a subject line, an HTML part, and a text-only part) for Amazon SES.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SES::Template resource specifies the content of an email (composed of a subject line, an HTML part, and a text-only part) for Amazon SES."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Template": {
            "type": "Object",
            "required": false,
            "description": "The content of the email, composed of a subject line, an HTML part, and a text-only part.",
            "properties": {
              "HtmlPart": {
                "type": "String",
                "required": false,
                "description": "The HTML body of the email."
              },
              "TextPart": {
                "type": "String",
                "required": false,
                "description": "The email body that will be visible to recipients whose email clients do not display HTML."
              },
              "TemplateName": {
                "type": "String",
                "required": false,
                "description": "The name of the template."
              },
              "SubjectPart": {
                "type": "String",
                "required": false,
                "description": "The subject line of the email."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SNS::Subscription": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SNS::Subscription resource subscribes an endpoint to an Amazon Simple Notification Service (Amazon SNS) topic.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SNS::Subscription resource subscribes an endpoint to an Amazon Simple Notification Service (Amazon SNS) topic."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Endpoint": {
            "type": "String",
            "required": false,
            "resource-ref-type": [
              "*",
              "AWS::SQS::Queue",
              "AWS::Lambda::Function"
            ],
            "description": "The endpoint that receives notifications from the Amazon SNS topic."
          },
          "Protocol": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "http",
              "https",
              "email",
              "email-json",
              "sms",
              "sqs",
              "application",
              "lambda"
            ],
            "description": "The subscription's protocol."
          },
          "TopicArn": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::SNS::Topic",
            "description": "The Amazon Resource Name (ARN) of the topic to subscribe to."
          },
          "DeliveryPolicy": {
            "type": "Json",
            "required": false,
            "description": "The JSON serialization of the subscription's delivery policy. "
          },
          "FilterPolicy": {
            "type": "Json",
            "required": false,
            "description": "The filter policy JSON that is assigned to the subscription."
          },
          "RawMessageDelivery": {
            "type": "Boolean",
            "required": false,
            "description": "true if raw message delivery is enabled for the subscription."
          },
          "Region": {
            "type": "String",
            "required": false,
            "description": "The region in which the topic resides."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SNS::Topic": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SNS::Topic type creates an Amazon SNS topic.",
    "return-values": [
      {
        "name": "TopicName",
        "description": "Returns the name for an Amazon SNS topic."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SNS::Topic type creates an Amazon SNS topic."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DisplayName": {
            "type": "String",
            "required": false,
            "description": "The human-readable name used in the \"From\" field for notifications to email and email-json endpoints"
          },
          "TopicName": {
            "type": "String",
            "required": false,
            "description": "A name for the topic. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the topic name."
          },
          "Subscription": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "Array of SNS Subscription type.",
            "properties": {
              "Endpoint": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "The subscription's endpoint (format depends on the protocol)."
              },
              "Protocol": {
                "type": "String",
                "required": true,
                "description": "The subscription's protocol.",
                "allowed-values": [
                  "http",
                  "https",
                  "email",
                  "email-json",
                  "sqs",
                  "sms",
                  "application",
                  "lambda"
                ]
              }
            }
          },
          "KmsMasterKeyId": {
            "type": "String",
            "required": false,
            "description": "An AWS KMS key identifier.",
            "resource-ref-type": "AWS::KMS::Key"
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SNS::TopicPolicy": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SNS::TopicPolicy type applies a policy to SNS topics.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SNS::TopicPolicy type applies a policy to SNS topics."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "PolicyDocument": {
            "type": "Policy",
            "required": true,
            "description": "A policy document containing permissions to add to the specified SNS topics."
          },
          "Topics": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "resource-ref-type": "AWS::SNS::Topic",
            "description": "The Amazon Resource Names (ARN) of the topics to which you want to add the policy."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SQS::Queue": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SQS::Queue type creates an Amazon SQS queue.",
    "return-values": [
      {
        "name": "Arn",
        "description": "Returns the Amazon Resource Name (ARN) of the queue. For example: arn:aws:sqs:us-east-1:123456789012:mystack-myqueue-15PG5C2FC1CW8"
      },
      {
        "name": "QueueName",
        "description": "Returns the queue name. For example: mystack-myqueue-1VF9BKQH5BJVI"
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SQS::Queue type creates an Amazon SQS queue."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ContentBasedDeduplication": {
            "type": "Boolean",
            "required": false,
            "description": "For First-In-First-Out (FIFO) queues, specifies whether to enable content-based deduplication."
          },
          "DelaySeconds": {
            "type": "Number",
            "required": false,
            "description": "The time in seconds that the delivery of all messages in the queue will be delayed. You can specify an integer value of 0 to 900 (15 minutes). The default value is 0."
          },
          "FifoQueue": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether this queue is a FIFO queue."
          },
          "MaximumMessageSize": {
            "type": "Number",
            "required": false,
            "description": "The limit of how many bytes a message can contain before Amazon SQS rejects it."
          },
          "MessageRetentionPeriod": {
            "type": "Number",
            "required": false,
            "description": "The number of seconds Amazon SQS retains a message."
          },
          "QueueName": {
            "type": "String",
            "required": false,
            "description": "A name for the queue. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the queue name."
          },
          "ReceiveMessageWaitTimeSeconds": {
            "type": "Number",
            "required": false,
            "description": "Specifies the duration, in seconds, that the ReceiveMessage action call waits until a message is in the queue to include in the response, as opposed to returning an empty response if a message is not yet available to return."
          },
          "RedrivePolicy": {
            "type": "Object",
            "required": false,
            "description": "Specifies an existing dead letter queue to receive messages after the source queue (this queue) fails to process a message a specified number of times.",
            "properties": {
              "deadLetterTargetArn": {
                "type": "String",
                "required": false,
                "description": "The Amazon Resource Name (ARN) of the dead letter queue to which the messages are sent to after the maxReceiveCount value has been exceeded.",
                "resource-ref-type": "AWS::SQS::Queue"
              },
              "maxReceiveCount": {
                "type": "Number",
                "required": false,
                "description": "The number of times a message is delivered to the source queue before being sent to the dead letter queue."
              }
            }
          },
          "VisibilityTimeout": {
            "type": "Number",
            "required": false,
            "description": "The length of time during which the queue will be unavailable once a message is delivered from the queue. This blocks other components from receiving the same message and gives the initial component time to process and delete the message from the queue. Values must be from 0 to 43200 seconds (12 hours). If no value is specified, the default value of 30 seconds will be used."
          },
          "KmsDataKeyReusePeriodSeconds": {
            "type": "Number",
            "required": false,
            "description": "The length of time in seconds that Amazon SQS can reuse a data key to encrypt or decrypt messages before calling AWS KMS again."
          },
          "KmsMasterKeyId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::KMS::Key",
            "description": "The ID of an AWS managed customer master key (CMK) for Amazon SQS or a custom CMK."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach to this queue.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SQS::QueuePolicy": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SQS::QueuePolicy type applies a policy to SQS queues.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SQS::QueuePolicy type applies a policy to SQS queues."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "PolicyDocument": {
            "type": "Policy",
            "required": true,
            "description": "A policy document containing permissions to add to the specified SQS queues."
          },
          "Queues": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "resource-ref-type": "AWS::SQS::Queue",
            "description": "The URLs of the queues to which you want to add the policy."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SSM::Association": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SSM::Association resource associates an Amazon EC2 Simple Systems Manager (SSM) document with EC2 instances that contain a configuration agent to process the document.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SSM::Association resource associates an Amazon EC2 Simple Systems Manager (SSM) document with EC2 instances that contain a configuration agent to process the document."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DocumentVersion": {
            "type": "String",
            "required": false,
            "description": "The version of the SSM document to associate with the target."
          },
          "InstanceId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::Instance",
            "description": "The ID of the instance that the SSM document is associated with."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "The name of the SSM document."
          },
          "Parameters": {
            "type": "Json",
            "required": false,
            "description": "Parameter values that the SSM document uses at runtime."
          },
          "ScheduleExpression": {
            "type": "String",
            "required": false,
            "description": "A Cron expression that specifies when the association is applied to the target."
          },
          "Targets": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The targets that the SSM document sends commands to.",
            "properties": {
              "Key": {
                "type": "String",
                "required": false,
                "description": "The name of the criteria that EC2 instances must meet. "
              },
              "Values": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "resource-ref-type": "*",
                "description": "The value of the criteria. SSM runs targeted commands on EC2 instances that match the criteria."
              }
            }
          },
          "AssociationName": {
            "type": "String",
            "required": false,
            "description": "The name of the association."
          },
          "OutputLocation": {
            "type": "Object",
            "required": false,
            "description": "An Amazon S3 bucket where you want to store the results of this request.",
            "properties": {
              "S3Location": {
                "type": "Object",
                "required": false,
                "description": "An Amazon S3 bucket where you want to store the results of this request.",
                "properties": {
                  "OutputS3BucketName": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the Amazon S3 bucket.",
                    "resource-ref-type": "AWS::S3::Bucket"
                  },
                  "OutputS3KeyPrefix": {
                    "type": "String",
                    "required": false,
                    "description": "The Amazon S3 bucket subfolder."
                  }
                }
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SSM::Document": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SSM::Document resource creates an Amazon EC2 Simple Systems Manager (SSM) document that describes an instance configuration, which you can use to set up and run commands on your instances.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SSM::Document resource creates an Amazon EC2 Simple Systems Manager (SSM) document that describes an instance configuration, which you can use to set up and run commands on your instances."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Content": {
            "type": "Json",
            "required": true,
            "description": "A JSON object that describes an instance configuration."
          },
          "DocumentType": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "Command",
              "Policy",
              "Automation"
            ],
            "description": "The type of document to create that relates to the purpose of your document."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "AWS CloudFormation resource tags to apply to the document, which can help you identify and categorize these resources.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value for the tag."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SSM::MaintenanceWindow": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SSM::MaintenanceWindow resource represents general information about a Maintenance Window for AWS Systems Manager.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SSM::MaintenanceWindow resource represents general information about a Maintenance Window for AWS Systems Manager."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "StartDate": {
            "type": "String",
            "required": false,
            "description": "The date and time, in ISO-8601 Extended format, for when you want the Maintenance Window to become active."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the Maintenance Window."
          },
          "AllowUnassociatedTargets": {
            "type": "Boolean",
            "required": true,
            "description": "Enables a Maintenance Window task to execute on managed instances, even if you haven't registered those instances as targets."
          },
          "Cutoff": {
            "type": "Number",
            "required": true,
            "description": "The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution."
          },
          "Schedule": {
            "type": "String",
            "required": true,
            "description": "The schedule of the Maintenance Window in the form of a cron or rate expression."
          },
          "Duration": {
            "type": "Number",
            "required": true,
            "description": "The duration of the Maintenance Window in hours."
          },
          "EndDate": {
            "type": "String",
            "required": false,
            "description": "The date and time, in ISO-8601 Extended format, for when you want the Maintenance Window to become inactive."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "The name of the Maintenance Window."
          },
          "ScheduleTimezone": {
            "type": "String",
            "required": false,
            "description": "The time zone that the scheduled Maintenance Window executions are based on, in Internet Assigned Numbers Authority (IANA) format."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SSM::MaintenanceWindowTask": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SSM::MaintenanceWindowTask resource defines information about a task for a Maintenance Window for Amazon EC2 Systems Manager.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SSM::MaintenanceWindowTask resource defines information about a task for a Maintenance Window for Amazon EC2 Systems Manager."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "MaxErrors": {
            "type": "String",
            "required": true,
            "description": "The maximum number of errors allowed before this task stops being scheduled."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the task."
          },
          "ServiceRoleArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAME::Role",
            "description": "The role that's used when the task is executed."
          },
          "Priority": {
            "type": "Number",
            "required": true,
            "description": "The priority of the task in the Maintenance Window."
          },
          "MaxConcurrency": {
            "type": "String",
            "required": true,
            "description": "The maximum number of targets that you can run this task for, in parallel."
          },
          "Targets": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "The targets, either instances or tags.",
            "properties": {
              "Values": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "User-defined criteria that maps to Key."
              },
              "Key": {
                "type": "String",
                "required": true,
                "description": "MUser-defined criteria for sending commands that target instances that meet the criteria. "
              }
            }
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "The task name."
          },
          "TaskArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "*",
            "description": "The resource that the task uses during execution."
          },
          "TaskInvocationParameters": {
            "type": "Object",
            "required": false,
            "description": "The parameters for task execution.",
            "properties": {
              "MaintenanceWindowRunCommandParameters": {
                "type": "Object",
                "required": false,
                "description": "MaintenanceWindowRunCommandParameters",
                "properties": {
                  "TimeoutSeconds": {
                    "type": "Number",
                    "required": false,
                    "description": "If this time is reached and the command hasn't already started executing, it doesn't execute."
                  },
                  "Comment": {
                    "type": "String",
                    "required": false,
                    "description": "Information about the command or commands to execute."
                  },
                  "OutputS3KeyPrefix": {
                    "type": "String",
                    "required": false,
                    "description": "The Amazon S3 bucket subfolder."
                  },
                  "Parameters": {
                    "type": "Json",
                    "required": false,
                    "description": "The parameters for the RUN_COMMAND task execution."
                  },
                  "DocumentHashType": {
                    "type": "String",
                    "required": false,
                    "description": "The SHA-256 or SHA-1 hash type. SHA-1 hashes are deprecated.",
                    "allowed-values": [
                      "*",
                      "SHA-256",
                      "SHA-1"
                    ]
                  },
                  "ServiceRoleArn": {
                    "type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::IAM::Role",
                    "description": "The IAM service role that's used during task execution."
                  },
                  "NotificationConfig": {
                    "type": "Object",
                    "required": false,
                    "description": "Configurations for sending notifications about command status changes on a per-instance basis.",
                    "properties": {
                      "NotificationArn": {
                        "type": "String",
                        "required": false,
                        "resource-ref-type": "AWS::SNS::Topic",
                        "description": "An Amazon Resource Name (ARN) for an Amazon SNS topic. Run Command pushes notifications about command status changes to this topic."
                      },
                      "NotificationType": {
                        "type": "String",
                        "required": false,
                        "description": "The notification type.",
                        "allowed-values": [
                          "*",
                          "Command",
                          "Invocation"
                        ]
                      },
                      "NotificationEvents": {
                        "type": "Array",
                        "array-type": "String",
                        "required": false,
                        "description": "The different events that you can receive notifications for.",
                        "allowed-values": [
                          "*",
                          "All",
                          "InProgress",
                          "Success",
                          "TimedOut",
                          "Cancelled",
                          "Failed"
                        ]
                      }
                    }
                  },
                  "OutputS3BucketName": {
                    "type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::S3::Bucket",
                    "description": "The name of the Amazon S3 bucket."
                  },
                  "DocumentHash": {
                    "type": "String",
                    "required": false,
                    "description": "The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes are deprecated."
                  }
                }
              },
              "MaintenanceWindowAutomationParameters": {
                "type": "Object",
                "required": false,
                "description": "The parameters for an AUTOMATION task type.",
                "properties": {
                  "Parameters": {
                    "type": "Json",
                    "required": false,
                    "description": "The parameters for the AUTOMATION task."
                  },
                  "DocumentVersion": {
                    "type": "String",
                    "required": false,
                    "description": "The version of an Automation document to use during task execution."
                  }
                }
              },
              "MaintenanceWindowStepFunctionsParameters": {
                "type": "Object",
                "required": false,
                "description": "The parameters for a STEP_FUNCTION task type.",
                "properties": {
                  "Input": {
                    "type": "String",
                    "required": false,
                    "description": "The inputs for the STEP_FUNCTION task."
                  },
                  "Name": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the STEP_FUNCTION task."
                  }
                }
              },
              "MaintenanceWindowLambdaParameters": {
                "type": "Object",
                "required": false,
                "description": "The parameters for a LAMBDA task type.",
                "properties": {
                  "ClientContext": {
                    "type": "String",
                    "required": false,
                    "description": "Client-specific information to pass to the Lambda function that you're invoking."
                  },
                  "Qualifier": {
                    "type": "String",
                    "required": false,
                    "description": "A Lambda function version or alias name."
                  },
                  "Payload": {
                    "type": "String",
                    "required": false,
                    "description": "JSON to provide to your Lambda function as input."
                  }
                }
              }
            }
          },
          "WindowId": {
            "type": "String",
            "required": false,
            "description": "The ID of the Maintenance Window where the task is registered."
          },
          "TaskParameters": {
            "type": "Json",
            "required": false,
            "description": "The parameters to pass to the task when it's executed."
          },
          "TaskType": {
            "type": "String",
            "required": true,
            "description": "The type of task.",
            "allowed-values": [
              "*",
              "RUN_COMMAND",
              "AUTOMATION",
              "LAMBDA",
              "STEP_FUNCTION"
            ]
          },
          "LoggingInfo": {
            "type": "Object",
            "required": false,
            "description": "Information about an Amazon S3 bucket to write task-level logs to.",
            "properties": {
              "S3Bucket": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::S3::Bucket",
                "description": "The name of the Amazon S3 bucket where execution logs are stored."
              },
              "Region": {
                "type": "String",
                "required": true,
                "description": "The region where the Amazon S3 bucket is located."
              },
              "S3Prefix": {
                "type": "String",
                "required": false,
                "description": "The Amazon S3 bucket subfolder."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SSM::Parameter": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SSM::Parameter resource creates an Amazon EC2 Systems Manager (SSM) parameter in Parameter Store.",
    "return-values": [
      {
        "name": "Type",
        "description": "Returns the type of the parameter. Valid values include: String or StringList."
      },
      {
        "name": "Value",
        "description": "Returns the value of the parameter."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SSM::Parameter resource creates an Amazon EC2 Systems Manager (SSM) parameter in Parameter Store."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Name": {
            "type": "String",
            "required": false,
            "description": "The name of the parameter. Names must not be prefixed with aws or ssm."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "Information about the parameter that you want to add to the system."
          },
          "Type": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "String",
              "StringList"
            ],
            "description": "The type of parameter. Valid values include the following: String or StringList."
          },
          "Value": {
            "type": "String",
            "required": true,
            "description": "The parameter value. Value must not nest another parameter. Do not use {{}} in the value.",
            "resource-ref-type": "*"
          },
          "AllowedPattern": {
            "type": "String",
            "required": false,
            "description": "A regular expression used to validate the parameter value."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SSM::PatchBaseline": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SSM::PatchBaseline resource defines the basic information for an Amazon EC2 Systems Manager patch baseline.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SSM::PatchBaseline resource defines the basic information for an Amazon EC2 Systems Manager patch baseline."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "OperatingSystem": {
            "type": "String",
            "required": false,
            "description": "Defines the operating system that the patch baseline applies to.",
            "allowed-values": [
              "*",
              "WINDOWS",
              "AMAZON_LINUX",
              "UBUNTU",
              "REDHAT_ENTERPRISE_LINUX"
            ]
          },
          "ApprovedPatches": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "A list of explicitly approved patches for the baseline."
          },
          "PatchGroups": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The names of the patch groups to register with the patch baseline."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the patch baseline."
          },
          "ApprovedPatchesComplianceLevel": {
            "type": "String",
            "required": false,
            "description": "The compliance level for approved patches.",
            "allowed-values": [
              "*",
              "CRITICAL",
              "HIGH",
              "MEDIUM",
              "LOW",
              "INFORMATIONAL",
              "UNSPECIFIED"
            ]
          },
          "ApprovalRules": {
            "type": "Object",
            "required": false,
            "description": "A set of rules that are used to include patches in the baseline.",
            "properties": {
              "PatchRules": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "The rules that make up the rule group.",
                "properties": {
                  "PatchFilterGroup": {
                    "type": "Object",
                    "required": false,
                    "description": "The patch filter group that defines the criteria for the rule.",
                    "properties": {
                      "PatchFilters": {
                        "type": "Array",
                        "array-type": "Object",
                        "required": false,
                        "description": "The set of patch filters that make up the group.",
                        "properties": {
                          "Values": {
                            "type": "Array",
                            "array-type": "String",
                            "required": false,
                            "description": "The values for the filter key."
                          },
                          "Key": {
                            "type": "String",
                            "required": false,
                            "description": "The key for the filter."
                          }
                        }
                      }
                    }
                  },
                  "ApproveAfterDays": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of days after the release date of each patch that matches the rule to mark the patch as approved in the patch baseline."
                  },
                  "ComplianceLevel": {
                    "type": "String",
                    "required": false,
                    "description": "A compliance severity level for all approved patches in a patch baseline.",
                    "allowed-values": [
                      "*",
                      "CRITICAL",
                      "HIGH",
                      "MEDIUM",
                      "LOW",
                      "INFORMATIONAL",
                      "UNSPECIFIED"
                    ]
                  },
                  "EnableNonSecurity": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Enables non-security updates."
                  }
                }
              }
            }
          },
          "GlobalFilters": {
            "type": "Object",
            "required": false,
            "description": "A set of global filters that are used to exclude patches from the baseline.",
            "properties": {
              "PatchFilters": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "The set of patch filters that make up the group.",
                "properties": {
                  "Values": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "description": "The values for the filter key."
                  },
                  "Key": {
                    "type": "String",
                    "required": false,
                    "description": "The key for the filter."
                  }
                }
              }
            }
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "The name of the patch baseline."
          },
          "RejectedPatches": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "A list of explicitly rejected patches for the baseline."
          },
          "ApprovedPatchesEnableNonSecurity": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the list of approved patches includes non-security updates that should be applied to the instances."
          },
          "Sources": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Information about the patches to use to update the instances, including target operating systems and source repositories.",
            "properties": {
              "Products": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The specific operating system versions a patch repository applies to."
              },
              "Configuration": {
                "type": "String",
                "required": false,
                "description": "The value of the yum repo configuration."
              },
              "Name": {
                "type": "String",
                "required": false,
                "description": "The name specified to identify the patch source."
              }
            }
          },
          "RejectedPatchesAction": {
            "type": "String",
            "required": false,
            "description": "The action for Patch Manager to take on patches included in the RejectedPackages list."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SSM::ResourceDataSync": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SSM::ResourceDataSync resource creates or deletes a Resource Data Sync for Systems Manager Inventory.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SSM::ResourceDataSync resource creates or deletes a Resource Data Sync for Systems Manager Inventory."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "KMSKeyArn": {
            "type": "String",
            "required": false,
            "description": "The ARN of an encryption key for a destination in Amazon S3.",
            "resource-ref-type": "AWS::KMS::Key"
          },
          "BucketName": {
            "type": "String",
            "required": true,
            "description": "The name of the Amazon S3 bucket where the aggregated data is stored.",
            "resource-ref-type": "AWS::S3::Bucket"
          },
          "BucketRegion": {
            "type": "String",
            "required": true,
            "description": "The AWS Region with the Amazon S3 bucket targeted by the Resource Data Sync."
          },
          "SyncFormat": {
            "type": "String",
            "required": true,
            "description": "The format in which Resource Data Sync output will be stored in Amazon S3"
          },
          "SyncName": {
            "type": "String",
            "required": true,
            "description": "A name for the Resource Data Sync."
          },
          "BucketPrefix": {
            "type": "String",
            "required": false,
            "description": "An Amazon S3 prefix for the bucket."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::StepFunctions::Activity": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS::StepFunctions::Activity resource to create an AWS Step Functions activity.",
    "return-values": [
      {
        "name": "Name",
        "description": "Returns the name of the activity."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS::StepFunctions::Activity resource to create an AWS Step Functions activity."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Name": {
            "type": "String",
            "required": false,
            "description": "The name of the activity to create. This name must be unique for your AWS account and region."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::StepFunctions::StateMachine": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS::StepFunctions::StateMachine resource to create an AWS Step Functions state machine.",
    "return-values": [
      {
        "name": "Name",
        "description": "Returns the name of the state machine."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS::StepFunctions::StateMachine resource to create an AWS Step Functions state machine."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DefinitionString": {
            "type": "String",
            "required": true,
            "description": "The Amazon States Language definition of the state machine."
          },
          "RoleArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The Amazon Resource Name (ARN) of the IAM role to use for this state machine."
          },
          "StateMachineName": {
            "type": "String",
            "required": false,
            "description": "The name of the state machine."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::WAF::ByteMatchSet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::WAF::ByteMatchSet resource creates an AWS WAF ByteMatchSet that identifies a part of a web request that you want to inspect.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::WAF::ByteMatchSet resource creates an AWS WAF ByteMatchSet that identifies a part of a web request that you want to inspect."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ByteMatchTuples": {
            "type": "Object",
            "required": false,
            "description": "Settings for the ByteMatchSet, such as the bytes (typically a string that corresponds with ASCII characters) that you want AWS WAF to search for in web requests.",
            "properties": {
              "FieldToMatch": {
                "type": "Object",
                "required": true,
                "description": "The part of a web request that you want AWS WAF to search, such as a specific header or a query string.",
                "properties": {
                  "Data": {
                    "type": "String",
                    "required": false,
                    "description": "If you specify HEADER for the Type property, the name of the header that AWS WAF searches for, such as User-Agent or Referer. If you specify any other value for the Type property, do not specify this property."
                  },
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The part of the web request in which AWS WAF searches for the target string. For valid values, see FieldToMatch in the AWS WAF API Reference.",
                    "allowed-values": [
                      "HEADER",
                      "METHOD",
                      "QUERY_STRING",
                      "URI",
                      "BODY",
                      "*"
                    ]
                  }
                }
              },
              "PositionalConstraint": {
                "type": "String",
                "required": true,
                "description": "How AWS WAF finds matches within the web request part in which you are searching."
              },
              "TargetString": {
                "type": "String",
                "required": false,
                "description": "The value that AWS WAF searches for."
              },
              "TargetStringBase64": {
                "type": "String",
                "required": false,
                "description": "The base64-encoded value that AWS WAF searches for."
              },
              "TextTransformation": {
                "type": "String",
                "required": true,
                "description": "Specifies how AWS WAF processes the target string value. "
              }
            }
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description of the ByteMatchSet."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::WAF::IPSet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::WAF::IPSet resource creates an AWS WAF IPSet that specifies which web requests to permit or block based on the IP addresses from which the requests originate.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::WAF::IPSet resource creates an AWS WAF IPSet that specifies which web requests to permit or block based on the IP addresses from which the requests originate."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "IPSetDescriptors": {
            "type": "Object",
            "required": false,
            "description": "The IP address type and IP address range (in CIDR notation) from which web requests originate.",
            "properties": {
              "Type": {
                "type": "String",
                "required": true,
                "description": "The IP address type, such as IPV4.",
                "allowed-values": [
                  "IPV4",
                  "IPV6",
                  "*"
                ]
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "An IP address (in CIDR notation) that AWS WAF permits, blocks, or counts."
              }
            }
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description of the IPSet."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::WAFRegional::ByteMatchSet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::WAFRegional::ByteMatchSet resource creates an AWS WAF Regional ByteMatchSet that identifies a part of a web request that you want to inspect.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::WAFRegional::ByteMatchSet resource creates an AWS WAF Regional ByteMatchSet that identifies a part of a web request that you want to inspect."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ByteMatchTuples": {
            "type": "Object",
            "required": false,
            "description": "Settings for the ByteMatchSet, such as the bytes (typically a string that corresponds with ASCII characters) that you want AWS WAF to search for in web requests.",
            "properties": {
              "FieldToMatch": {
                "type": "Object",
                "required": true,
                "description": "The part of a web request that you want AWS WAF to search, such as a specific header or a query string.",
                "properties": {
                  "Data": {
                    "type": "String",
                    "required": false,
                    "description": "If you specify HEADER for the Type property, the name of the header that AWS WAF searches for, such as User-Agent or Referer. If you specify any other value for the Type property, do not specify this property."
                  },
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The part of the web request in which AWS WAF searches for the target string. For valid values, see FieldToMatch in the AWS WAF API Reference.",
                    "allowed-values": [
                      "HEADER",
                      "METHOD",
                      "QUERY_STRING",
                      "URI",
                      "BODY",
                      "*"
                    ]
                  }
                }
              },
              "PositionalConstraint": {
                "type": "String",
                "required": true,
                "description": "How AWS WAF finds matches within the web request part in which you are searching."
              },
              "TargetString": {
                "type": "String",
                "required": false,
                "description": "The value that AWS WAF searches for."
              },
              "TargetStringBase64": {
                "type": "String",
                "required": false,
                "description": "The base64-encoded value that AWS WAF searches for."
              },
              "TextTransformation": {
                "type": "String",
                "required": true,
                "description": "Specifies how AWS WAF processes the target string value. "
              }
            }
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description of the ByteMatchSet."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::WAFRegional::IPSet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::WAFRegional::IPSet resource creates an AWS WAF Regional IPSet that specifies which web requests to permit or block based on the IP addresses from which the requests originate.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::WAFRegional::IPSet resource creates an AWS WAF Regional IPSet that specifies which web requests to permit or block based on the IP addresses from which the requests originate."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "IPSetDescriptors": {
            "type": "Object",
            "required": false,
            "description": "The IP address type and IP address range (in CIDR notation) from which web requests originate.",
            "properties": {
              "Type": {
                "type": "String",
                "required": true,
                "description": "The IP address type, such as IPV4.",
                "allowed-values": [
                  "IPV4",
                  "IPV6",
                  "*"
                ]
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "An IP address (in CIDR notation) that AWS WAF permits, blocks, or counts."
              }
            }
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description of the IPSet."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::WAFRegional::Rule": {
    "type": "Object",
    "required": false,
    "description": "The AWS::WAFRegional::Rule resource creates an AWS WAF Regional rule that specifies a combination of IPSet, ByteMatchSet, and SqlInjectionMatchSet objects that identify the web requests to allow, block, or count.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::WAFRegional::Rule resource creates an AWS WAF Regional rule that specifies a combination of IPSet, ByteMatchSet, and SqlInjectionMatchSet objects that identify the web requests to allow, block, or count."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "MetricName": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description for the metrics of this rule."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description of the rule."
          },
          "Predicates": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The ByteMatchSet, IPSet, or SqlInjectionMatchSet objects to include in a rule.",
            "properties": {
              "DataId": {
                "type": "String",
                "required": true,
                "description": "A unique identifier for the predicate.",
                "resource-ref-type": [
                  "AWS::WAFRegional::ByteMatchSet",
                  "AWS::WAFRegional::IPSet",
                  "AWS::WAFRegional::SqlInjectionMatchSet",
                  "*"
                ]
              },
              "Negated": {
                "type": "Boolean",
                "required": true,
                "description": "Whether to use the settings or the negated settings that you specified in the ByteMatchSet, IPSet, or SqlInjectionMatchSet objects."
              },
              "Type": {
                "type": "String",
                "required": true,
                "description": "The type of predicate in a rule, such as an IPSet (IPMatch). ",
                "allowed-values": [
                  "IPMatch",
                  "ByteMatch",
                  "SqlInjectionMatch",
                  "*"
                ]
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::WAFRegional::SizeConstraintSet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::WAFRegional::SizeConstraintSet resource specifies a size constraint that AWS WAF uses to check the size of a web request and which parts of the request to check.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::WAFRegional::SizeConstraintSet resource specifies a size constraint that AWS WAF uses to check the size of a web request and which parts of the request to check."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Name": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description for the SizeConstraintSet."
          },
          "SizeConstraints": {
            "type": "Object",
            "required": true,
            "description": "The size constraint and the part of the web request to check.",
            "properties": {
              "ComparisonOperator": {
                "type": "String",
                "required": true,
                "description": "The type of comparison that you want AWS WAF to perform. AWS WAF uses this value in combination with the Size and FieldToMatch property values to check if the size constraint is a match."
              },
              "FieldToMatch": {
                "type": "Json",
                "required": true,
                "description": "The part of a web request that you want AWS WAF to search, such as a specific header or a query string."
              },
              "Size": {
                "type": "Number",
                "required": true,
                "description": "The size in bytes that you want AWS WAF to compare against the size of the specified FieldToMatch."
              },
              "TextTransformation": {
                "type": "String",
                "required": true,
                "description": "Specifies how AWS WAF processes the FieldToMatch property before inspecting a request for a match."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::WAFRegional::SqlInjectionMatchSet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::WAFRegional::SqlInjectionMatchSet resource creates an AWS WAF Regional SqlInjectionMatchSet, which you use to allow, block, or count requests that contain malicious SQL code in a specific part of web requests.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::WAFRegional::SqlInjectionMatchSet resource creates an AWS WAF Regional SqlInjectionMatchSet, which you use to allow, block, or count requests that contain malicious SQL code in a specific part of web requests."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Name": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description of the SqlInjectionMatchSet."
          },
          "SqlInjectionMatchTuples": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "The parts of web requests that you want AWS WAF to inspect for malicious SQL code and, if you want AWS WAF to inspect a header, the name of the header. ",
            "properties": {
              "FieldToMatch": {
                "type": "String",
                "required": true,
                "description": "The part of a web request that you want AWS WAF to search, such as a specific header or a query string.",
                "properties": {
                  "Data": {
                    "type": "String",
                    "required": false,
                    "description": "If you specify HEADER for the Type property, the name of the header that AWS WAF searches for, such as User-Agent or Referer."
                  },
                  "Type": {
                    "type": "String",
                    "required": true,
                    "allowed-values": [
                      "*",
                      "HEADER",
                      "METHOD",
                      "QUERY_STRING",
                      "URI",
                      "BODY"
                    ],
                    "description": "The part of the web request in which AWS WAF searches for the target string."
                  }
                }
              },
              "TextTransformation": {
                "type": "String",
                "required": true,
                "description": "Specifies how AWS WAF processes the FieldToMatch property before inspecting a request for a match."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::WAFRegional::WebACLAssociation": {
    "type": "Object",
    "required": false,
    "description": "The AWS::WAFRegional::WebACL resource creates an AWS WAF Regional web access control group (ACL) containing the rules that identify the Amazon CloudFront (CloudFront) web requests that you want to allow, block, or count.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::WAFRegional::WebACL resource creates an AWS WAF Regional web access control group (ACL) containing the rules that identify the Amazon CloudFront (CloudFront) web requests that you want to allow, block, or count."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DefaultAction": {
            "type": "Object",
            "required": true,
            "description": "The action that you want AWS WAF to take when a request doesn't match the criteria in any of the rules that are associated with the web ACL. ",
            "properties": {
              "Type": {
                "type": "String",
                "required": true,
                "description": "For actions that are associated with a rule, the action that AWS WAF takes when a web request matches all conditions in a rule.",
                "allowed-values": [
                  "*",
                  "BLOCK",
                  "ALLOW",
                  "COUNT"
                ]
              }
            }
          },
          "MetricName": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description for the Amazon CloudWatch metric of this web ACL."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description of the web ACL."
          },
          "Rules": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "The rules to associate with the web ACL and the settings for each rule.",
            "properties": {
              "Action": {
                "type": "Object",
                "required": true,
                "description": "The action that Amazon CloudFront (CloudFront) or AWS WAF takes when a web request matches all conditions in the rule, such as allow, block, or count the request. ",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "For actions that are associated with a rule, the action that AWS WAF takes when a web request matches all conditions in a rule.",
                    "allowed-values": [
                      "*",
                      "BLOCK",
                      "ALLOW",
                      "COUNT"
                    ]
                  }
                }
              },
              "Priority": {
                "type": "Number",
                "required": true,
                "description": "The order in which AWS WAF evaluates the rules in a web ACL."
              },
              "RuleId": {
                "type": "String",
                "required": true,
                "description": "The ID of an AWS WAF Regional rule to associate with a web ACL."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::WAFRegional::WebACLAssociation": {
    "type": "Object",
    "required": false,
    "description": "The AWS::WAFRegional::WebACLAssociation resource associates an AWS WAF Regional web access control group (ACL) with a resource.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::WAFRegional::WebACLAssociation resource associates an AWS WAF Regional web access control group (ACL) with a resource."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ResourceArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": [
              "*"
            ],
            "description": "The Amazon Resource Name (ARN) of the resource to protect with the web ACL."
          },
          "WebACLId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::WAFRegional::WebACL",
            "description": "A unique identifier (ID) for the web ACL."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::WAFRegional::XssMatchSet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::WAFRegional::XssMatchSet resource specifies the parts of web requests that you want AWS WAF to inspect for cross-site scripting attacks and the name of the header to inspect.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::WAFRegional::XssMatchSet resource specifies the parts of web requests that you want AWS WAF to inspect for cross-site scripting attacks and the name of the header to inspect."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Name": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description of the IPSet."
          },
          "XssMatchTuples": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The parts of web requests that you want to inspect for cross-site scripting attacks.",
            "properties": {
              "FieldToMatch": {
                "type": "String",
                "required": true,
                "description": "The part of a web request that you want AWS WAF to search, such as a specific header or a query string.",
                "properties": {
                  "Data": {
                    "type": "String",
                    "required": false,
                    "description": "If you specify HEADER for the Type property, the name of the header that AWS WAF searches for, such as User-Agent or Referer."
                  },
                  "Type": {
                    "type": "String",
                    "required": true,
                    "allowed-values": [
                      "*",
                      "HEADER",
                      "METHOD",
                      "QUERY_STRING",
                      "URI",
                      "BODY"
                    ],
                    "description": "The part of the web request in which AWS WAF searches for the target string."
                  }
                }
              },
              "TextTransformation": {
                "type": "String",
                "required": true,
                "description": "Specifies how AWS WAF processes the FieldToMatch property before inspecting a request for a match."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::WAF::Rule": {
    "type": "Object",
    "required": false,
    "description": "The AWS::WAF::Rule resource creates an AWS WAF rule that specifies a combination of IPSet, ByteMatchSet, and SqlInjectionMatchSet objects that identify the web requests to allow, block, or count.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::WAF::Rule resource creates an AWS WAF rule that specifies a combination of IPSet, ByteMatchSet, and SqlInjectionMatchSet objects that identify the web requests to allow, block, or count."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "MetricName": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description for the metrics of this rule."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description of the rule."
          },
          "Predicates": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The ByteMatchSet, IPSet, or SqlInjectionMatchSet objects to include in a rule.",
            "properties": {
              "DataId": {
                "type": "String",
                "required": true,
                "description": "A unique identifier for the predicate.",
                "resource-ref-type": [
                  "AWS::WAF::ByteMatchSet",
                  "AWS::WAF::IPSet",
                  "AWS::WAF::SqlInjectionMatchSet",
                  "*"
                ]
              },
              "Negated": {
                "type": "Boolean",
                "required": true,
                "description": "Whether to use the settings or the negated settings that you specified in the ByteMatchSet, IPSet, or SqlInjectionMatchSet objects."
              },
              "Type": {
                "type": "String",
                "required": true,
                "description": "The type of predicate in a rule, such as an IPSet (IPMatch). ",
                "allowed-values": [
                  "IPMatch",
                  "ByteMatch",
                  "SqlInjectionMatch",
                  "*"
                ]
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::WAF::SizeConstraintSet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::WAF::SizeConstraintSet resource specifies a size constraint that AWS WAF uses to check the size of a web request and which parts of the request to check.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::WAF::SizeConstraintSet resource specifies a size constraint that AWS WAF uses to check the size of a web request and which parts of the request to check."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Name": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description for the SizeConstraintSet."
          },
          "SizeConstraints": {
            "type": "Object",
            "required": true,
            "description": "The size constraint and the part of the web request to check.",
            "properties": {
              "ComparisonOperator": {
                "type": "String",
                "required": true,
                "description": "The type of comparison that you want AWS WAF to perform. AWS WAF uses this value in combination with the Size and FieldToMatch property values to check if the size constraint is a match."
              },
              "FieldToMatch": {
                "type": "Json",
                "required": true,
                "description": "The part of a web request that you want AWS WAF to search, such as a specific header or a query string."
              },
              "Size": {
                "type": "Number",
                "required": true,
                "description": "The size in bytes that you want AWS WAF to compare against the size of the specified FieldToMatch."
              },
              "TextTransformation": {
                "type": "String",
                "required": true,
                "description": "Specifies how AWS WAF processes the FieldToMatch property before inspecting a request for a match."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::WAF::SqlInjectionMatchSet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::WAF::IPSet resource creates an AWS WAF SqlInjectionMatchSet, which you use to allow, block, or count requests that contain malicious SQL code in a specific part of web requests. ",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::WAF::IPSet resource creates an AWS WAF SqlInjectionMatchSet, which you use to allow, block, or count requests that contain malicious SQL code in a specific part of web requests. "
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Name": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description of the SqlInjectionMatchSet."
          },
          "SqlInjectionMatchTuples": {
            "type": "Object",
            "required": false,
            "description": "The parts of web requests that you want AWS WAF to inspect for malicious SQL code and, if you want AWS WAF to inspect a header, the name of the header.",
            "properties": {
              "FieldToMatch": {
                "type": "Object",
                "required": true,
                "description": "The part of a web request that you want AWS WAF to search, such as a specific header or a query string.",
                "properties": {
                  "Data": {
                    "type": "String",
                    "required": false,
                    "description": "If you specify HEADER for the Type property, the name of the header that AWS WAF searches for, such as User-Agent or Referer. If you specify any other value for the Type property, do not specify this property."
                  },
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The part of the web request in which AWS WAF searches for the target string. For valid values, see FieldToMatch in the AWS WAF API Reference.",
                    "allowed-values": [
                      "HEADER",
                      "METHOD",
                      "QUERY_STRING",
                      "URI",
                      "*"
                    ]
                  }
                },
                "TextTransformation": {
                  "type": "String",
                  "required": true,
                  "description": "Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass AWS WAF."
                }
              },
              "TextTransformation": {
                "type": "String",
                "required": true,
                "description": "Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass AWS WAF."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::WAF::WebACL": {
    "type": "Object",
    "required": false,
    "description": "The AWS::WAF::WebACL resource creates an AWS WAF web access control group (ACL) containing the rules that identify the Amazon CloudFront (CloudFront) web requests that you want to allow, block, or count.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::WAF::Rule resource creates an AWS WAF rule that specifies a combination of IPSet, ByteMatchSet, and SqlInjectionMatchSet objects that identify the web requests to allow, block, or count."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DefaultAction": {
            "type": "Object",
            "required": true,
            "description": "The action that you want AWS WAF to take when a request doesn't match the criteria in any of the rules that are associated with the web ACL.",
            "properties": {
              "Type": {
                "type": "String",
                "required": true,
                "description": "For actions that are associated with a rule, the action that AWS WAF takes when a web request matches all conditions in a rule.",
                "allowed-values": [
                  "ALLOW",
                  "BLOCK",
                  "COUNT",
                  "*"
                ]
              }
            }
          },
          "MetricName": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description for the Amazon CloudWatch metric of this web ACL."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description of the web ACL."
          },
          "Rules": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The rules to associate with the web ACL and the settings for each rule.",
            "properties": {
              "Action": {
                "type": "Object",
                "required": true,
                "description": "The action that Amazon CloudFront (CloudFront) or AWS WAF takes when a web request matches all conditions in the rule, such as allow, block, or count the request.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "For actions that are associated with a rule, the action that AWS WAF takes when a web request matches all conditions in a rule.",
                    "allowed-values": [
                      "ALLOW",
                      "BLOCK",
                      "COUNT",
                      "*"
                    ]
                  }
                }
              },
              "Priority": {
                "type": "Number",
                "required": true,
                "description": "The order in which AWS WAF evaluates the rules in a web ACL. AWS WAF evaluates rules with a lower value before rules with a higher value."
              },
              "RuleId": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::WAF::Rule",
                "description": "The ID of an AWS WAF rule to associate with a web ACL."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::WAF::XssMatchSet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::WAF::XssMatchSet resource specifies the parts of web requests that you want AWS WAF to inspect for cross-site scripting attacks and the name of the header to inspect.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::WAF::XssMatchSet resource specifies the parts of web requests that you want AWS WAF to inspect for cross-site scripting attacks and the name of the header to inspect."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Name": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description for the XssMatchSet."
          },
          "XssMatchTuples": {
            "type": "Object",
            "required": false,
            "description": "The parts of web requests that you want to inspect for cross-site scripting attacks.",
            "properties": {
              "FieldToMatch": {
                "type": "Json",
                "required": true,
                "description": "The part of a web request that you want AWS WAF to search, such as a specific header or a query string."
              },
              "TextTransformation": {
                "type": "String",
                "required": true,
                "description": "Specifies how AWS WAF processes the FieldToMatch property before inspecting a request for a match."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::WorkSpaces::Workspace": {
    "type": "Object",
    "required": false,
    "description": "The AWS::WorkSpaces::Workspace resource creates an Amazon WorkSpaces workspace, which is a cloud-based desktop experience for end users.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::WorkSpaces::Workspace resource creates an Amazon WorkSpaces workspace, which is a cloud-based desktop experience for end users."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "BundleId": {
            "type": "String",
            "required": true,
            "description": "The identifier of the bundle from which you want to create the workspace."
          },
          "DirectoryId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::DirectoryService::SimpleAD",
            "description": "The identifier of the AWS Directory Service directory in which you want to create the workspace."
          },
          "RootVolumeEncryptionEnabled": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether Amazon WorkSpaces encrypts data stored on the root volume (C: drive)."
          },
          "UserName": {
            "type": "String",
            "required": true,
            "description": "The name of the user to which the workspace is assigned. "
          },
          "UserVolumeEncryptionEnabled": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether Amazon WorkSpaces encrypts data stored on the user volume (D: drive)."
          },
          "VolumeEncryptionKey": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::KMS::Key",
            "description": "The AWS Key Management Service (AWS KMS) key ID that Amazon WorkSpaces uses to encrypt data stored on your workspace."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags (key-value pairs) for the WorkSpace.",
            "properties": {
              "Value": {
                "type": "String",
                "required": false,
                "description": "The value for the tag."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The key name of the tag."
              }
            }
          },
          "WorkspaceProperties": {
            "type": "Object",
            "required": false,
            "description": "The WorkSpace properties.",
            "properties": {
              "ComputeTypeName": {
                "type": "String",
                "required": false,
                "description": "The compute type.",
                "allowed-values": [
                  "*",
                  "VALUE",
                  "STANDARD",
                  "PERFORMANCE",
                  "POWER",
                  "GRAPHICS"
                ]
              },
              "RootVolumeSizeGib": {
                "type": "Number",
                "required": false,
                "description": "The size of the root volume."
              },
              "RunningMode": {
                "type": "String",
                "required": false,
                "description": "The running mode.",
                "allowed-values": [
                  "*",
                  "AUTO_STOP",
                  "ALWAYS_ON"
                ]
              },
              "RunningModeAutoStopTimeoutInMinutes": {
                "type": "Number",
                "required": false,
                "description": "The time after a user logs off when WorkSpaces are automatically stopped."
              },
              "UserVolumeSizeGib": {
                "type": "Number",
                "required": false,
                "description": "The size of the user storage."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
}},
  "Outputs": {
    "type": "Named-Array",
    "required": false,
    "description": "The optional Outputs section enables you to return one or more values to the user.",
    "default-child-schema": {
      "type": "Object",
      "required": false,
      "properties": {
        "Value": {
          "type": "String",
          "required": true,
          "description": "The value of the property that is returned."
        },
        "Description": {
          "type": "String",
          "required": false,
          "description": "A String type up to 4K in length describing the output value."
        },
        "Condition": {
          "type": "ConditionDeclaration",
          "required": false,
          "description": "Associated condition that if true will allow the output to be returned."
        },
        "Export": {
          "type": "Object",
          "required": false,
          "description": "The name of the resource output to be exported for a cross-stack reference.",
          "properties": {
            "Name": {
              "type": "String",
              "required": true,
              "description": "The name of the resource being exported."
            }
          }
        }
      }
    }
  }
}}}