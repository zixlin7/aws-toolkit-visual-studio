//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Amazon.AwsToolkit.Telemetry.Events.Core;
using Amazon.AwsToolkit.Telemetry.Events.Generated;
using System.Collections.Generic;

/// --------------------------------------------------------------------------------
/// This file is generated from https://github.com/aws/aws-toolkit-common/tree/master/telemetry
/// --------------------------------------------------------------------------------

namespace Amazon.AWSToolkit.Telemetry
{
    
    
    /// Contains methods to record telemetry events
    public static partial class ToolkitTelemetryEvent
    {
        
        /// Records Telemetry Event:
        /// Called when deploying a Lambda Function
        public static void RecordLambdaDeploy(this ITelemetryLogger telemetryLogger, LambdaDeploy payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "lambda_deploy";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("lambdaPackageType", payload.LambdaPackageType);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("initialDeploy", payload.InitialDeploy);

                if (payload.Runtime.HasValue)
                {
                    datum.AddMetadata("runtime", payload.Runtime.Value);
                }

                datum.AddMetadata("platform", payload.Platform);

                if (payload.LambdaArchitecture.HasValue)
                {
                    datum.AddMetadata("lambdaArchitecture", payload.LambdaArchitecture.Value);
                }

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
    }
    
    /// Metric field type
    /// The Lambda Architecture of the function
    public struct LambdaArchitecture
    {
        
        private string _value;
        
        /// x86_64
        public static readonly LambdaArchitecture X86_64 = new LambdaArchitecture("x86_64");
        
        /// arm64
        public static readonly LambdaArchitecture Arm64 = new LambdaArchitecture("arm64");
        
        public LambdaArchitecture(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Called when deploying a Lambda Function
    public sealed class LambdaDeploy : BaseTelemetryEvent
    {
        
        /// The Lambda Package type of the function
        public LambdaPackageType LambdaPackageType;
        
        /// The result of the operation
        public Result Result;
        
        /// Whether or not the deploy targets a new destination (true) or an existing destination (false)
        public bool InitialDeploy;
        
        /// Optional - The lambda runtime
        public AwsToolkit.Telemetry.Events.Generated.Runtime? Runtime;
        
        /// Optional - Language-specific identification. Examples: v4.6.1, netcoreapp3.1, nodejs12.x. Not AWS Lambda specific. Allows for additional details when other fields are opaque, such as the Lambda runtime value 'provided'.
        public string Platform;
        
        /// Optional - The Lambda Architecture of the function
        public LambdaArchitecture? LambdaArchitecture;
        
        public LambdaDeploy()
        {
            this.Passive = false;
        }
    }
}
