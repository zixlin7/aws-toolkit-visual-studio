//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Amazon.AwsToolkit.Telemetry.Events.Core;
using System;
using System.Collections.Generic;

/// --------------------------------------------------------------------------------
/// This file is generated from https://github.com/aws/aws-toolkit-common/tree/master/telemetry
/// --------------------------------------------------------------------------------

namespace Amazon.AwsToolkit.Telemetry.Events.Generated
{
    
    
    /// Contains methods to record telemetry events
    public static partial class ToolkitTelemetryEvent
    {
        
        /// Records Telemetry Event:
        /// Called when deploying a Serverless Application Project
        public static void RecordServerlessapplicationDeploy(this ITelemetryLogger telemetryLogger, ServerlessapplicationDeploy payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "serverlessapplication_deploy";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when Visual Studio requests credentials from the Toolkit in order to communicate with a CodeArtifact package repository
        public static void RecordCodeartifactCredentialsRequest(this ITelemetryLogger telemetryLogger, CodeartifactCredentialsRequest payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codeartifact_credentialsRequest";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("reason", payload.Reason);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when user selects a profile
        public static void RecordCodeartifactGetRepoUrl(this ITelemetryLogger telemetryLogger, CodeartifactGetRepoUrl payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codeartifact_getRepoUrl";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("codeartifactPackageType", payload.CodeartifactPackageType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when user get an endpoint url
        public static void RecordCodeartifactSetRepoCredentialProfile(this ITelemetryLogger telemetryLogger, CodeartifactSetRepoCredentialProfile payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codeartifact_setRepoCredentialProfile";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("codeartifactPackageType", payload.CodeartifactPackageType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when user starts the Publish to AWS workflow
        public static void RecordPublishStart(this ITelemetryLogger telemetryLogger, PublishStart payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "publish_start";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when user exits the Publish to AWS workflow
        public static void RecordPublishEnd(this ITelemetryLogger telemetryLogger, PublishEnd payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "publish_end";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("published", payload.Published);

                datum.AddMetadata("duration", payload.Duration);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when user publishes the project
        public static void RecordPublishDeploy(this ITelemetryLogger telemetryLogger, PublishDeploy payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "publish_deploy";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("framework", payload.Framework);

                datum.AddMetadata("duration", payload.Duration);

                datum.AddMetadata("applicationType", payload.ApplicationType);

                datum.AddMetadata("initialPublish", payload.InitialPublish);

                datum.AddMetadata("defaultConfiguration", payload.DefaultConfiguration);

                if (payload.RecommendedTarget.HasValue)
                {
                    datum.AddMetadata("recommendedTarget", payload.RecommendedTarget.Value);
                }

                datum.AddMetadata("recipeId", payload.RecipeId);

                if (payload.IsGeneratedProject.HasValue)
                {
                    datum.AddMetadata("isGeneratedProject", payload.IsGeneratedProject.Value);
                }

                datum.AddMetadata("errorCode", payload.ErrorCode);

                datum.AddMetadata("reason", payload.Reason);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Starting the Publish to AWS experience
        public static void RecordPublishSetup(this ITelemetryLogger telemetryLogger, PublishSetup payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "publish_setup";
                datum.Unit = Unit.Milliseconds;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("duration", payload.Duration);

                datum.AddMetadata("publishSetupStage", payload.PublishSetupStage);

                if (payload.PublishInstallCliMode.HasValue)
                {
                    datum.AddMetadata("publishInstallCliMode", payload.PublishInstallCliMode.Value);
                }

                datum.AddMetadata("errorCode", payload.ErrorCode);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when user exits the publish workflow to record unsupported setting types
        public static void RecordPublishUnsupportedSetting(this ITelemetryLogger telemetryLogger, PublishUnsupportedSetting payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "publish_unsupportedSetting";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("recipeId", payload.RecipeId);

                datum.AddMetadata("publishSettingType", payload.PublishSettingType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when cleaning up IAM Role trusted policy
        public static void RecordLambdaIamRoleCleanup(this ITelemetryLogger telemetryLogger, LambdaIamRoleCleanup payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "lambda_iamRoleCleanup";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("reason", payload.Reason);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when adding an event to a lambda function
        public static void RecordLambdaAddEvent(this ITelemetryLogger telemetryLogger, LambdaAddEvent payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "lambda_addEvent";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("variant", payload.Variant);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Clone a Amazon CodeCatalyst code repository locally
        public static void RecordCodecatalystLocalClone(this ITelemetryLogger telemetryLogger, CodecatalystLocalClone payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codecatalyst_localClone";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("userId", payload.UserId);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
    }
    
    /// Metric field type
    /// The operation that occurred when an attempt was made to download the CLI
    public struct PublishInstallCliMode
    {
        
        private string _value;
        
        /// install
        public static readonly PublishInstallCliMode Install = new PublishInstallCliMode("install");
        
        /// upgrade
        public static readonly PublishInstallCliMode Upgrade = new PublishInstallCliMode("upgrade");
        
        /// noop
        public static readonly PublishInstallCliMode Noop = new PublishInstallCliMode("noop");
        
        public PublishInstallCliMode(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Represents a phase of the publish experience startup sequence
    public struct PublishSetupStage
    {
        
        private string _value;
        
        /// install
        public static readonly PublishSetupStage Install = new PublishSetupStage("install");
        
        /// validate
        public static readonly PublishSetupStage Validate = new PublishSetupStage("validate");
        
        /// initialize
        public static readonly PublishSetupStage Initialize = new PublishSetupStage("initialize");
        
        /// show
        public static readonly PublishSetupStage Show = new PublishSetupStage("show");
        
        /// all
        public static readonly PublishSetupStage All = new PublishSetupStage("all");
        
        public PublishSetupStage(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Called when deploying a Serverless Application Project
    public sealed class ServerlessapplicationDeploy : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public ServerlessapplicationDeploy()
        {
            this.Passive = false;
        }
    }
    
    /// Called when Visual Studio requests credentials from the Toolkit in order to communicate with a CodeArtifact package repository
    public sealed class CodeartifactCredentialsRequest : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The reason for a metric or exception depending on context
        public string Reason;
        
        public CodeartifactCredentialsRequest()
        {
            this.Passive = true;
        }
    }
    
    /// Called when user selects a profile
    public sealed class CodeartifactGetRepoUrl : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The CodeArtifact package type
        public string CodeartifactPackageType;
        
        public CodeartifactGetRepoUrl()
        {
            this.Passive = false;
        }
    }
    
    /// Called when user get an endpoint url
    public sealed class CodeartifactSetRepoCredentialProfile : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The CodeArtifact package type
        public string CodeartifactPackageType;
        
        public CodeartifactSetRepoCredentialProfile()
        {
            this.Passive = false;
        }
    }
    
    /// Called when user starts the Publish to AWS workflow
    public sealed class PublishStart : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The source of the operation
        public string Source;
        
        public PublishStart()
        {
            this.Passive = false;
        }
    }
    
    /// Called when user exits the Publish to AWS workflow
    public sealed class PublishEnd : BaseTelemetryEvent
    {
        
        /// Whether or not the user published an application
        public bool Published;
        
        /// The duration of the operation in milliseconds
        public double Duration;
        
        public PublishEnd()
        {
            this.Passive = false;
        }
    }
    
    /// Called when user publishes the project
    public sealed class PublishDeploy : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - Application framework being used
        public string Framework;
        
        /// The duration of the operation in milliseconds
        public double Duration;
        
        /// Optional - The type of application being published
        public string ApplicationType;
        
        /// Whether this was the initial publish or a republish
        public bool InitialPublish;
        
        /// Whether or not the default configuration values were used. False if at least one value was adjusted
        public bool DefaultConfiguration;
        
        /// Optional - Whether or not the recommended deployment target was used (initial publish only)
        public System.Boolean? RecommendedTarget;
        
        /// The recipe used for the deployment
        public string RecipeId;
        
        /// Optional - Whether or not the referenced project was generated
        public System.Boolean? IsGeneratedProject;
        
        /// Optional - The error code associated with an operation
        public string ErrorCode;
        
        /// Optional - The reason for a metric or exception depending on context
        public string Reason;
        
        public PublishDeploy()
        {
            this.Passive = false;
        }
    }
    
    /// Starting the Publish to AWS experience
    public sealed class PublishSetup : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The duration of the operation in milliseconds
        public double Duration;
        
        /// Represents a phase of the publish experience startup sequence
        public PublishSetupStage PublishSetupStage;
        
        /// Optional - The operation that occurred when an attempt was made to download the CLI
        public PublishInstallCliMode? PublishInstallCliMode;
        
        /// Optional - The error code associated with an operation
        public string ErrorCode;
        
        public PublishSetup()
        {
            this.Passive = true;
        }
    }
    
    /// Called when user exits the publish workflow to record unsupported setting types
    public sealed class PublishUnsupportedSetting : BaseTelemetryEvent
    {
        
        /// The recipe used for the deployment
        public string RecipeId;
        
        /// The type of a particular configuration setting/detail
        public string PublishSettingType;
        
        public PublishUnsupportedSetting()
        {
            this.Passive = false;
        }
    }
    
    /// Called when cleaning up IAM Role trusted policy
    public sealed class LambdaIamRoleCleanup : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The reason for a metric or exception depending on context
        public string Reason;
        
        public LambdaIamRoleCleanup()
        {
            this.Passive = false;
        }
    }
    
    /// Called when adding an event to a lambda function
    public sealed class LambdaAddEvent : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// A generic variant metadata
        public string Variant;
        
        public LambdaAddEvent()
        {
            this.Passive = false;
        }
    }
    
    /// Clone a Amazon CodeCatalyst code repository locally
    public sealed class CodecatalystLocalClone : BaseTelemetryEvent
    {
        
        /// Opaque AWS Builder ID identifier
        public string UserId;
        
        /// The result of the operation
        public Result Result;
        
        public CodecatalystLocalClone()
        {
            this.Passive = false;
        }
    }
}
