//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Amazon.AwsToolkit.Telemetry.Events.Core;
using System;
using System.Collections.Generic;

/// --------------------------------------------------------------------------------
/// This file is generated from https://github.com/aws/aws-toolkit-common/tree/master/telemetry
/// --------------------------------------------------------------------------------

namespace Amazon.AwsToolkit.Telemetry.Events.Generated
{
    
    
    /// Contains methods to record telemetry events
    public static partial class ToolkitTelemetryEvent
    {
        
        /// Records Telemetry Event:
        /// Called when deploying a Serverless Application Project
        public static void RecordServerlessapplicationDeploy(this ITelemetryLogger telemetryLogger, ServerlessapplicationDeploy payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "serverlessapplication_deploy";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when user selects a profile
        public static void RecordCodeartifactGetRepoUrl(this ITelemetryLogger telemetryLogger, CodeartifactGetRepoUrl payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codeartifact_getRepoUrl";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("codeartifactPackageType", payload.CodeartifactPackageType);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when user get an endpoint url
        public static void RecordCodeartifactSetRepoCredentialProfile(this ITelemetryLogger telemetryLogger, CodeartifactSetRepoCredentialProfile payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codeartifact_setRepoCredentialProfile";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("codeartifactPackageType", payload.CodeartifactPackageType);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
    }
    
    /// Called when deploying a Serverless Application Project
    public sealed class ServerlessapplicationDeploy : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public ServerlessapplicationDeploy()
        {
            this.Passive = false;
        }
    }
    
    /// Called when user selects a profile
    public sealed class CodeartifactGetRepoUrl : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The CodeArtifact package type
        public string CodeartifactPackageType;
        
        public CodeartifactGetRepoUrl()
        {
            this.Passive = false;
        }
    }
    
    /// Called when user get an endpoint url
    public sealed class CodeartifactSetRepoCredentialProfile : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The CodeArtifact package type
        public string CodeartifactPackageType;
        
        public CodeartifactSetRepoCredentialProfile()
        {
            this.Passive = false;
        }
    }
}
