<commonUi:BaseAWSControl x:Class="Amazon.AWSToolkit.CloudWatch.Logs.Views.LogGroupsViewerControl"
                         xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                         xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                         xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                         xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                         xmlns:local="clr-namespace:Amazon.AWSToolkit.CloudWatch.Logs.Views"
                         xmlns:commonUi="clr-namespace:Amazon.AWSToolkit.CommonUI;assembly=AWSToolkit"
                         xmlns:themes="clr-namespace:Amazon.AWSToolkit.Themes;assembly=AWSToolkit"
                         xmlns:converters="clr-namespace:Amazon.AWSToolkit.CommonUI.Converters;assembly=AWSToolkit"
                         xmlns:images="clr-namespace:Amazon.AWSToolkit.CommonUI.Images;assembly=AWSToolkit"
                         xmlns:viewModels="clr-namespace:Amazon.AWSToolkit.CloudWatch.Logs.ViewModels"
                         xmlns:generated="clr-namespace:Amazon.AwsToolkit.Telemetry.Events.Generated;assembly=Amazon.AwsToolkit.Telemetry.Events"
                         themes:ToolkitThemes.UseToolkitTheme="True"
                         mc:Ignorable="d"
                         d:DesignHeight="450" d:DesignWidth="800">
    <commonUi:BaseAWSControl.Resources>
        <ResourceDictionary>
            <commonUi:VsImages x:Key="VsImages" />
            <converters:HasItemsVisibilityConverter x:Key="HasItemsVisibilityConverter" />
            <converters:InverseVisibilityConverter x:Key="InverseVisibilityConverter" />
            <converters:HasValueVisibilityConverter x:Key="HasValueVisibilityConverter"/>
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        </ResourceDictionary>
    </commonUi:BaseAWSControl.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <ToolBarTray Grid.Row="0"
                     ToolBar.OverflowMode="Never"
                     Background="{DynamicResource {x:Static themes:ToolkitThemes.ToolBarBackgroundBrushKey}}">
            <ToolBar
                ToolBarTray.IsLocked="True"
                OverflowMode="Never"
                themes:ToolkitThemes.UseToolkitTheme="True"
                Background="{DynamicResource {x:Static themes:ToolkitThemes.ToolBarBackgroundBrushKey}}">
                <Button ToolTip="Refresh"
                        Command="{Binding RefreshCommand}"
                        Focusable="False"
                        ToolBar.OverflowMode="Never">
                    <images:VsImage
                        Width="16"
                        Height="16"
                        Source="{Binding Source={StaticResource VsImages}, Path=Refresh}" />
                </Button>
            </ToolBar>
        </ToolBarTray>

        <local:SearchBar Grid.Row="1" FilterText="{Binding FilterText}" />

        <ProgressBar Grid.Row="1"  
                     VerticalAlignment="Bottom"
                     IsIndeterminate="True" Height="6" 
                     themes:ToolkitThemes.UseToolkitTheme="True"
                     Visibility="{Binding LoadingLogs, Converter={StaticResource BooleanToVisibilityConverter}}" />
       
            <!-- Indicates status of results eg. no results found, error message -->
        <local:ResultsStatus Grid.Row="2"
                             Margin="11"
                             LoadingLogs="{Binding LoadingLogs}"
                             ErrorMessage="{Binding ErrorMessage}"
                             HasInitialized="{Binding HasInitialized}"
                             FilterText ="{Binding FilterText}"
                             NoResultSuggestions="{Binding NoResultSuggestions}"
                             Visibility="{Binding Visibility, ElementName=LogGroupsList, Converter={StaticResource InverseVisibilityConverter}}"/>
      
        <ListBox Grid.Row="3"
                 x:Name="LogGroupsList"
                 x:FieldModifier="private"
                 ItemsSource="{Binding LogGroups}"
                 SelectedItem="{Binding LogGroup}"
                 VirtualizingStackPanel.VirtualizationMode="Standard"
                 ScrollViewer.ScrollChanged="ScrollViewer_OnScrollChanged"
                 ScrollViewer.VerticalScrollBarVisibility="Auto"
                 themes:ToolkitThemes.UseToolkitTheme="True">
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding Name}"></TextBlock>
                </DataTemplate>
            </ListBox.ItemTemplate>
            <ListBox.ItemContainerStyle>
                <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                    <EventSetter Event="MouseDoubleClick" Handler="ListBoxItem_MouseDoubleClick"/>
                </Style>
            </ListBox.ItemContainerStyle>
            <ListBox.Style>
                <!-- Do not show the listbox when there are no matching results or if an error occurred -->
                <Style TargetType="ListBox">
                    <Setter Property="Visibility"
                            Value="{Binding LogGroups, Converter={StaticResource HasItemsVisibilityConverter}}" />
                    <Style.Triggers>

                        <DataTrigger
                            Binding="{Binding ErrorMessage, Converter={StaticResource HasValueVisibilityConverter}}"
                            Value="Visible">
                            <Setter Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ListBox.Style>
            <ListBox.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="View Log Group" Command="{Binding ViewCommand}" CommandParameter="{Binding LogGroup.Name}">
                        <MenuItem.Icon>
                            <Image Width="16" Height="16" Source="{Binding Source={StaticResource VsImages}, Path=Search}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Copy Arn" Command="{Binding CopyArnCommand}" CommandParameter="{Binding LogGroup.Arn}">
                        <MenuItem.Icon>
                            <Image Width="16" Height="16" Source="{Binding Source={StaticResource VsImages}, Path=Copy}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator />
                    <MenuItem Header="Delete Log Group" Command="{Binding DeleteCommand}" CommandParameter="{Binding LogGroup}">
                        <MenuItem.Icon>
                            <Image Width="16" Height="16" Source="{Binding Source={StaticResource VsImages}, Path=Cancel}" />
                        </MenuItem.Icon>
                    </MenuItem>
                </ContextMenu>
            </ListBox.ContextMenu>
        </ListBox>

        <local:ConnectionStatus Grid.Row="4"
                                ConnectionSettings="{Binding ConnectionSettings}"
                                FeedbackSource="{Binding Source={x:Static viewModels:BaseLogsViewModel.FeedbackSource}}"
                                FeedbackCommand="{Binding FeedbackCommand}"/>

    </Grid>
</commonUi:BaseAWSControl>
