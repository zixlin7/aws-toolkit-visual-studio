<commonUi:BaseAWSControl x:Class="Amazon.AWSToolkit.CloudWatch.Logs.Views.LogEventsViewerControl"
                         xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                         xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                         xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                         xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                         xmlns:local="clr-namespace:Amazon.AWSToolkit.CloudWatch.Logs.Views"
                         xmlns:commonUi="clr-namespace:Amazon.AWSToolkit.CommonUI;assembly=AWSToolkit"
                         xmlns:converters="clr-namespace:Amazon.AWSToolkit.CommonUI.Converters;assembly=AWSToolkit"
                         xmlns:themes="clr-namespace:Amazon.AWSToolkit.Themes;assembly=AWSToolkit"
                         xmlns:images="clr-namespace:Amazon.AWSToolkit.CommonUI.Images;assembly=AWSToolkit"
                         xmlns:dateRangePicker="clr-namespace:Amazon.AWSToolkit.CommonUI.DateTimeRangePicker;assembly=AWSToolkit"
                         xmlns:glob="clr-namespace:System.Globalization;assembly=mscorlib"
                         xmlns:models="clr-namespace:Amazon.AWSToolkit.CloudWatch.Logs.Models"
                         xmlns:viewModels="clr-namespace:Amazon.AWSToolkit.CloudWatch.Logs.ViewModels"
                         xmlns:generated="clr-namespace:Amazon.AwsToolkit.Telemetry.Events.Generated;assembly=Amazon.AwsToolkit.Telemetry.Events"
                         themes:ToolkitThemes.UseToolkitTheme="True"
                         mc:Ignorable="d"
                         d:DesignHeight="450" d:DesignWidth="800">
    <commonUi:BaseAWSControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/AWSToolkit;component/Themes/Generic.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <commonUi:VsImages x:Key="VsImages" />
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
            <converters:HasItemsVisibilityConverter x:Key="HasItemsVisibilityConverter" />
            <converters:InverseVisibilityConverter x:Key="InverseVisibilityConverter" />
            <converters:HasValueVisibilityConverter x:Key="HasValueVisibilityConverter" />

            <Style x:Key="TimeColumnStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="Margin" Value="6" />
            </Style>
            <Style x:Key="MessageColumnStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="Margin" Value="6" />
                <Setter Property="TextWrapping" Value="NoWrap" />
                <Style.Triggers>
                    <DataTrigger
                        Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=DataGridCell}}"
                        Value="True">
                        <Setter Property="TextWrapping" Value="Wrap" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding DataContext.IsWrapped, 
                                         RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type commonUi:ToolkitDataGridWrapper}}}"
                        Value="True">
                        <Setter Property="TextWrapping" Value="Wrap" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <DataTemplate x:Key="EventTimeHeaderTemplate">
                <StackPanel Orientation="Vertical">
                    <TextBlock
                        Text="{Binding Content, RelativeSource=
                                         {RelativeSource Mode=TemplatedParent}}" />
                    <TextBlock
                        Text="{Binding Source={x:Static local:LogEventsViewerControl.TimeZone}, StringFormat={}({0})}" />
                </StackPanel>
            </DataTemplate>
        </ResourceDictionary>

    </commonUi:BaseAWSControl.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>


        <TextBox
            Grid.Row="0"
            HorizontalContentAlignment="Left"
            Background="Transparent"
            BorderThickness="0"
            IsReadOnly="True"
            Padding="6 8 6 0"
            FontSize="11"
            Text="{Binding LogGroup, StringFormat=Log Group: {0}}"/>

        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <TextBox
                Grid.Column="0"
                HorizontalContentAlignment="Left"
                Background="Transparent"
                BorderThickness="0"
                IsReadOnly="True"
                Padding="6 8 6 8"
                Text="{Binding LogStream, StringFormat=Log Stream: {0}}"/>

            <!--Shows query status of events fetched and actions to be performed-->
            <ContentControl Grid.Column="1" 
                        Margin="9 6 6 6" 
                        Content="{Binding}"   
                        Visibility="{Binding Visibility, ElementName=LoadingIndicator, Converter={StaticResource InverseVisibilityConverter}}">
                <ContentControl.Resources>
                    <DataTemplate x:Key="LoadMore">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="{Binding LogEvents.Count, StringFormat=Events fetched: {0}}"/>
                            <TextBlock  Margin="3 0 0 0">
                                <Hyperlink  Command="{Binding ContinueLoadingCommand}">(load more)</Hyperlink>
                            </TextBlock>
                        </StackPanel>
                    </DataTemplate>
                    <DataTemplate x:Key="Retry">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="{Binding LogEvents.Count, StringFormat=Events fetched: {0}}"/>
                            <TextBlock  Margin="3 0 0 0" >
                                <Hyperlink Command="{Binding ContinueLoadingCommand}">Retry</Hyperlink>
                            </TextBlock>
                        </StackPanel>
                    </DataTemplate>
                    <DataTemplate x:Key="None">
                        <TextBlock
                            Margin="3 0 0 0"
                            HorizontalAlignment="Right" Text="{Binding LogEvents.Count, StringFormat=Events fetched: {0}}"/>
                    </DataTemplate>
                </ContentControl.Resources>
                <ContentControl.Style>
                    <Style TargetType="ContentControl">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding PaginatedLoadingStatus}" Value="{x:Static models:PaginatedLoadingStatus.LoadMore}">
                                <Setter Property="ContentTemplate" Value="{StaticResource LoadMore}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding PaginatedLoadingStatus}" Value="{x:Static models:PaginatedLoadingStatus.Retry}">
                                <Setter Property="ContentTemplate" Value="{StaticResource Retry}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding PaginatedLoadingStatus}" Value="{x:Static models:PaginatedLoadingStatus.None}">
                                <Setter Property="ContentTemplate" Value="{StaticResource None}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ContentControl.Style>
            </ContentControl>


            <Grid x:Name="LoadingIndicator"
                  x:FieldModifier="private"
                  Margin="9 6 6 6" 
                  Grid.Column="1"  Visibility="{Binding LoadingLogs, Converter={StaticResource BooleanToVisibilityConverter}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <images:VsImage Grid.Row="0" Grid.Column="0"
                                Height="16"
                                Width="16"
                                VerticalAlignment="Top"
                                Source="{Binding Source={StaticResource VsImages}, Path=Loading}"/>
                <TextBlock
                    Grid.Column="1"
                    HorizontalAlignment="Right"
                    Margin="3 0 0 0"
                    Text="{Binding LogEvents.Count, StringFormat=Fetching events: {0}}"
                    themes:ToolkitThemes.UseToolkitTheme="True"/>
              
                <TextBlock  Grid.Column="2" Margin="3 0 0 0" HorizontalAlignment="Right"
                            Visibility="{Binding FilterText, Converter={StaticResource HasValueVisibilityConverter}}">
                    <Hyperlink Command="{Binding CancelLoadingCommand}">(pause)</Hyperlink>
                </TextBlock>
            </Grid>
        </Grid>

        <!--Search bar and the actions toolbar-->
        <DockPanel Grid.Row="2" LastChildFill="True">

            <TextBlock DockPanel.Dock="Top" 
                       Margin="9 0 6 6" 
                       TextWrapping="WrapWithOverflow"
                       Foreground="{DynamicResource {x:Static themes:ToolkitThemes.HintTextBrushKey}}">
                <Run Text="Case-sensitive search for terms in your log events. Enclose exact phrases in double quotation marks (&quot;&quot;)."/>
                <commonUi:BrowserHyperLink
                    NavigateUri="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html#matching-terms-events">
                    <Run Text="Learn more about filter patterns." />
                </commonUi:BrowserHyperLink>
            </TextBlock>

            <ToolBar DockPanel.Dock="Right"
                     ToolBarTray.IsLocked="True"
                     OverflowMode="Never"
                     themes:ToolkitThemes.UseToolkitTheme="True"
                     Background="{DynamicResource {x:Static themes:ToolkitThemes.ToolBarBackgroundBrushKey}}">

                <Button Margin="3"
                        ToolTip="Refresh"
                        Command="{Binding RefreshCommand}">
                    <images:VsImage
                        Width="16"
                        Height="16"
                        Source="{Binding Source={StaticResource VsImages}, Path=Refresh}" />
                </Button>
                <ToggleButton Margin="3"
                              x:Name="FilterByTimeButton"
                              x:FieldModifier="private"
                              ToolTip="Filter events by time"
                              IsChecked="{Binding IsTimeFilterEnabled}">
                    <images:VsImage
                        Width="16"
                        Height="16"
                        Source="{Binding Source={StaticResource VsImages}, Path=Calendar}" />
                </ToggleButton>
                <ToggleButton Margin="3"
                              IsChecked="{Binding IsWrapped, Mode=TwoWay}">
                    <images:VsImage
                        Width="16"
                        Height="16"
                        Source="{Binding Source={StaticResource VsImages}, Path=WordWrap32}" />
                    <ToggleButton.Style>
                        <Style TargetType="{x:Type ToggleButton}">
                            <Style.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="ToolTip" Value="Unwrap inline message text"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="False">
                                    <Setter Property="ToolTip" Value="Wrap message text inline"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </ToggleButton.Style>
                </ToggleButton>
            </ToolBar>
            <local:SearchBar DockPanel.Dock="Left" 
                             FilterText="{Binding FilterText}"
                             HintText="{Binding Source={x:Static local:LogEventsViewerControl.DefaultHintText}}"/>
            
        </DockPanel>

        <!--loading progress indicator-->
        <ProgressBar Grid.Row="2"  Grid.RowSpan="2"
                      VerticalAlignment="Bottom"
                      IsIndeterminate="True" Height="3"  
                      themes:ToolkitThemes.UseToolkitTheme="True"
                      Visibility="{Binding LoadingLogs, Converter={StaticResource BooleanToVisibilityConverter}}"/>


        <dateRangePicker:DateTimeRangePicker Grid.Row="3"
                                             DataContext="{Binding DateTimeRange}"
                                             Visibility="{Binding ElementName=FilterByTimeButton, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}" />

        <!-- Indicates status of results eg. no results found, error message -->
        <local:ResultsStatus Grid.Row="4"
                             Margin="11"
                             ErrorMessage="{Binding ErrorMessage}"
                             LoadingLogs="{Binding LoadingLogs}"
                             HasInitialized="{Binding HasInitialized}"
                             FilterText ="{Binding FilterText}"
                             NoResultSuggestions="{Binding NoResultSuggestions}"
                             Visibility="{Binding Visibility, ElementName=LogEventsList, Converter={StaticResource InverseVisibilityConverter}}">
        </local:ResultsStatus>


        <commonUi:ToolkitDataGridWrapper Grid.Row="5"
                                         x:Name="LogEventsList"
                                         x:FieldModifier="private"
                                         AutoGenerateColumns="False"
                                         CanUserAddRows="False" CanUserDeleteRows="False"
                                         CanUserSortColumns="False"
                                         ItemsSource="{Binding LogEventsView, NotifyOnTargetUpdated=True}"
                                         SelectedItem="{Binding LogEvent}"
                                         ScrollViewer.ScrollChanged="ScrollViewer_OnScrollChanged"
                                         ScrollViewer.VerticalScrollBarVisibility="Auto"
                                         EnableRowVirtualization="True"
                                         VirtualizingStackPanel.VirtualizationMode="Standard"
                                         themes:ToolkitThemes.UseToolkitTheme="True"
                                         GridLinesVisibility="None"
                                         SelectionMode="Extended"
                                         IsReadOnly="True"
                                         HeadersVisibility="Column"
                                         Visibility="{Binding LogEvents, Converter={StaticResource HasItemsVisibilityConverter}}">
            <commonUi:ToolkitDataGridWrapper.Columns>
                <DataGridTextColumn Header="Timestamp"
                                    Binding="{Binding Path=Timestamp, ConverterCulture={x:Static glob:CultureInfo.CurrentCulture}}"
                                    FontFamily="Consolas"
                                    HeaderTemplate="{StaticResource EventTimeHeaderTemplate}"
                                    ElementStyle="{StaticResource TimeColumnStyle}">
                </DataGridTextColumn>

                <DataGridTextColumn Header="Message"
                                    Binding="{Binding Path=Message}"
                                    Width="*"
                                    FontFamily="Consolas"
                                    ElementStyle="{StaticResource MessageColumnStyle}">
                </DataGridTextColumn>

            </commonUi:ToolkitDataGridWrapper.Columns>
            <commonUi:ToolkitDataGridWrapper.ContextMenu>
                <ContextMenu>
                    <MenuItem Command="Copy">
                        <MenuItem.Icon>
                            <Image Height="16" Width="16"
                                   Source="{Binding Source={StaticResource VsImages}, Path=Copy}" />
                        </MenuItem.Icon>
                    </MenuItem>
                </ContextMenu>
            </commonUi:ToolkitDataGridWrapper.ContextMenu>
        </commonUi:ToolkitDataGridWrapper>

        <local:ConnectionStatus Grid.Row="6" 
                                ConnectionSettings="{Binding ConnectionSettings}"
                                FeedbackSource="{Binding Source={x:Static viewModels:BaseLogsViewModel.FeedbackSource}}"
                                FeedbackCommand="{Binding FeedbackCommand}"
                                ErrorMessage="{Binding ErrorMessage}"
                                ShowErrorCommand="{Binding ShowErrorCommand}"/>
    </Grid>
</commonUi:BaseAWSControl>
