<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:components="clr-namespace:Amazon.AWSToolkit.CommonUI.Components"
    xmlns:toolkitThemes="clr-namespace:Amazon.AWSToolkit.Themes">

    <Style x:Key="awsButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="2"
                        SnapsToDevicePixels="true"
                        Stroke="{DynamicResource awsDefaultControlForegroundBrushKey}"
                        StrokeDashArray="1 2"
                        StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  set a base global style for all buttons; we can rely on system colors for most of it  -->
    <Style x:Key="{x:Type ButtonBase}" TargetType="{x:Type ButtonBase}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource awsButtonFocusVisual}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border
                        Name="Border"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <ContentPresenter
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource awsButtonIsDefaultBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource awsButtonPressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  set an additional named style so that views that want to further customize can easily reference our base style  -->
    <Style x:Key="awsButtonBaseStyle" TargetType="{x:Type ButtonBase}" />

    <Style
        x:Key="{x:Type Button}"
        BasedOn="{StaticResource awsButtonBaseStyle}"
        TargetType="{x:Type Button}" />
    <Style
        x:Key="{x:Type ToggleButton}"
        BasedOn="{StaticResource awsButtonBaseStyle}"
        TargetType="{x:Type ToggleButton}" />
    <Style
        x:Key="{x:Type RepeatButton}"
        BasedOn="{StaticResource awsButtonBaseStyle}"
        TargetType="{x:Type RepeatButton}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
    </Style>

    <Style x:Key="CheckboxOrRadioMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="14,0,0,0"
                        SnapsToDevicePixels="true"
                        Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        StrokeDashArray="1 2"
                        StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  use the same color assignments as checkboxes, so we retain dark-on-light even in dark theme  -->
    <Style
        x:Key="awsRadioButtonBaseStyle"
        BasedOn="{StaticResource {x:Type RadioButton}}"
        TargetType="{x:Type RadioButton}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource awsDefaultControlForegroundBrushKey}" />
        <Setter Property="Background" Value="{DynamicResource awsCheckboxOrRadioBackgroundBrushKey}" />
        <Setter Property="BorderBrush" Value="{DynamicResource awsCheckboxOrRadioBorderBrushKey}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static toolkitThemes:ShellProviderThemeResources.EnvironmentFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static toolkitThemes:ShellProviderThemeResources.EnvironmentFontSizeKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid
                        x:Name="templateRoot"
                        Background="Transparent"
                        SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border
                            x:Name="radioButtonBorder"
                            Margin="1,1,2,1"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="100">
                            <Grid x:Name="markGrid" Margin="2">
                                <Ellipse
                                    x:Name="optionMark"
                                    MinWidth="6"
                                    MinHeight="6"
                                    Fill="{DynamicResource awsCheckboxOrRadioForegroundBrushKey}"
                                    Opacity="0" />
                            </Grid>
                        </Border>
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Grid.Column="1"
                            Margin="4,0,2,0"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource CheckboxOrRadioMarkFocusVisual}" />
                            <Setter Property="Padding" Value="4,-1,0,0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="radioButtonBorder" Property="Background" Value="{DynamicResource awsCheckboxOrRadioBackgroundBrushKey}" />
                            <Setter TargetName="radioButtonBorder" Property="BorderBrush" Value="{DynamicResource awsButtonMouseOverBorderBrush}" />
                            <Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource awsCheckboxOrRadioForegroundBrushKey}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="radioButtonBorder" Property="Background" Value="{DynamicResource awsCheckboxOrRadioBackgroundBrushKey}" />
                            <Setter TargetName="radioButtonBorder" Property="BorderBrush" Value="{DynamicResource awsDisabledControlForegroundBrushKey}" />
                            <Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource awsDisabledControlForegroundBrushKey}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="radioButtonBorder" Property="Background" Value="{DynamicResource awsCheckboxOrRadioBackgroundBrushKey}" />
                            <Setter TargetName="radioButtonBorder" Property="BorderBrush" Value="{DynamicResource awsButtonPressedBorderBrush}" />
                            <Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource awsCheckboxOrRadioForegroundBrushKey}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="optionMark" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="optionMark" Property="Opacity" Value="0.56" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="awsCheckboxButtonBaseStyle"
        BasedOn="{StaticResource {x:Type CheckBox}}"
        TargetType="{x:Type CheckBox}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource awsDefaultControlForegroundBrushKey}" />
        <Setter Property="Background" Value="{DynamicResource awsCheckboxOrRadioBackgroundBrushKey}" />
        <Setter Property="BorderBrush" Value="{DynamicResource awsCheckboxOrRadioBorderBrushKey}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static toolkitThemes:ShellProviderThemeResources.EnvironmentFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static toolkitThemes:ShellProviderThemeResources.EnvironmentFontSizeKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid
                        x:Name="templateRoot"
                        Background="Transparent"
                        SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border
                            x:Name="checkBoxBorder"
                            Margin="1"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid x:Name="markGrid">
                                <Path
                                    x:Name="optionMark"
                                    Margin="1"
                                    Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z "
                                    Fill="{DynamicResource awsCheckboxOrRadioForegroundBrushKey}"
                                    Opacity="0"
                                    Stretch="None" />
                                <Rectangle
                                    x:Name="indeterminateMark"
                                    Margin="2"
                                    Fill="{DynamicResource awsCheckboxOrRadioForegroundBrushKey}"
                                    Opacity="0" />
                            </Grid>
                        </Border>
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Grid.Column="1"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource CheckboxOrRadioMarkFocusVisual}" />
                            <Setter Property="Padding" Value="4,-1,0,0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource awsCheckboxOrRadioBackgroundBrushKey}" />
                            <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{DynamicResource awsButtonMouseOverBorderBrush}" />
                            <Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource awsCheckboxOrRadioForegroundBrushKey}" />
                            <Setter TargetName="indeterminateMark" Property="Fill" Value="{DynamicResource awsCheckboxOrRadioForegroundBrushKey}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource awsCheckboxOrRadioBackgroundBrushKey}" />
                            <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{DynamicResource awsDisabledControlForegroundBrushKey}" />
                            <Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource awsDisabledControlForegroundBrushKey}" />
                            <Setter TargetName="indeterminateMark" Property="Fill" Value="{DynamicResource awsDisabledControlForegroundBrushKey}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource awsCheckboxOrRadioBackgroundBrushKey}" />
                            <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{DynamicResource awsButtonPressedBorderBrush}" />
                            <Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource awsCheckboxOrRadioForegroundBrushKey}" />
                            <Setter TargetName="indeterminateMark" Property="Fill" Value="{DynamicResource awsCheckboxOrRadioForegroundBrushKey}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="optionMark" Property="Opacity" Value="1" />
                            <Setter TargetName="indeterminateMark" Property="Opacity" Value="0" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="optionMark" Property="Opacity" Value="0" />
                            <Setter TargetName="indeterminateMark" Property="Opacity" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- style presents a button as a clickable 'link' -->
    <Style x:Key="ActionLinkButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="Foreground" Value="{DynamicResource awsActionLinkForegroundBrushKey}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock>
                        <Hyperlink Command="{TemplateBinding Command}"
                                   CommandParameter="{TemplateBinding CommandParameter}">
                            <Hyperlink.Resources>
                                <Style TargetType="{x:Type Hyperlink}">
                                    <Style.Triggers>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="UIElement.IsMouseOver" Value="false" />
                                                <Condition Property="IsEnabled" Value="true" />
                                            </MultiTrigger.Conditions>
                                            <MultiTrigger.Setters>
                                                <Setter Property="TextDecorations" Value="None" />
                                                <Setter Property="FrameworkElement.Cursor" Value="None" />
                                            </MultiTrigger.Setters>
                                        </MultiTrigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsMouseOver" Value="true" />
                                                <Condition Property="IsEnabled" Value="true" />
                                            </MultiTrigger.Conditions>
                                            <MultiTrigger.Setters>
                                                <Setter Property="TextDecorations" Value="Underline" />
                                                <Setter Property="FrameworkElement.Cursor" Value="Hand" />
                                            </MultiTrigger.Setters>
                                        </MultiTrigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsEnabled" Value="false" />
                                            </MultiTrigger.Conditions>
                                            <MultiTrigger.Setters>
                                                <Setter Property="TextDecorations" Value="None" />
                                            </MultiTrigger.Setters>
                                        </MultiTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Hyperlink.Resources>
                            <Run Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" />
                        </Hyperlink>
                    </TextBlock>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
        ********************************************************************************
        * Templates for a custom control based on a ToggleButton that presents a drop-
        * down popup (like a combobox) that can contain a custom user control. The user
        * control is placed between header and footer panels.
        ********************************************************************************
    -->

    <Style x:Key="HeaderedDropPanelFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="4"
                        SnapsToDevicePixels="true"
                        Stroke="{DynamicResource awsComboBoxPressedBorderBrushKey}"
                        StrokeDashArray="1 2"
                        StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  button styling set to match a combobox/togglebutton on a toolbar rather than standard button  -->
    <Style
        x:Key="{x:Type components:HeaderedDropPanel}"
        BasedOn="{StaticResource {x:Type ToggleButton}}"
        TargetType="{x:Type components:HeaderedDropPanel}">
        <Setter Property="Foreground" Value="{DynamicResource awsCommandBarTextKey}" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type components:HeaderedDropPanel}">
                    <Border
                        Name="Bd"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="true">
                        <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Popup
                                x:Name="PART_Popup"
                                Margin="1"
                                AllowsTransparency="False"
                                Placement="Bottom"
                                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                                StaysOpen="False">
                                <Border
                                    x:Name="DropDownBorder"
                                    Background="{DynamicResource awsComboBoxDropPanelBackgroundBrushKey}"
                                    BorderBrush="{DynamicResource awsHeaderedDropPanelPopupBorderBrushKey}"
                                    BorderThickness="1">
                                    <Grid x:Name="PART_PopupInner">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>

                                        <!--  Cross-control header  -->
                                        <Grid x:Name="PART_HeaderPanel" Background="{DynamicResource awsHeaderedDropPanelHeaderBackgroundBrushKey}">

                                            <StackPanel Margin="4,0">
                                                <TextBlock
                                                    Margin="4,8"
                                                    HorizontalAlignment="Left"
                                                    VerticalAlignment="Center"
                                                    FontWeight="Bold"
                                                    Foreground="{DynamicResource awsHeaderedDropPanelHeaderTextBrushKey}"
                                                    Text="{TemplateBinding PanelHeaderLabel}" />
                                            </StackPanel>
                                            <Border BorderBrush="{DynamicResource awsDividerRuleBrushKey}" BorderThickness="1" />
                                        </Grid>

                                        <!--  inner row holds the bound child panel  -->
                                        <ContentPresenter
                                            x:Name="PART_ContentPanel"
                                            Grid.Row="1"
                                            Margin="4"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                            IsHitTestVisible="true"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                                        <!--  Base row holds cancel/apply  -->
                                        <Grid
                                            x:Name="PART_ControlButtonsPanel"
                                            Grid.Row="2"
                                            Margin="0,0,0,4">
                                            <StackPanel>
                                                <Border
                                                    Background="{DynamicResource awsHeaderedDropPanelFooterBackgroundBrushKey}"
                                                    BorderBrush="{DynamicResource awsDividerRuleBrushKey}"
                                                    BorderThickness="1" />
                                                <StackPanel
                                                    Margin="0,4,0,0"
                                                    HorizontalAlignment="Right"
                                                    Orientation="Horizontal">
                                                    <Button
                                                        x:Name="PART_ApplyButton"
                                                        Padding="4,2"
                                                        Style="{StaticResource awsButtonBaseStyle}">
                                                        Apply
                                                    </Button>
                                                    <Button
                                                        x:Name="PART_CancelButton"
                                                        Margin="4,0"
                                                        Padding="4,2"
                                                        Style="{StaticResource awsButtonBaseStyle}">
                                                        Cancel
                                                    </Button>
                                                </StackPanel>
                                            </StackPanel>
                                        </Grid>
                                    </Grid>
                                </Border>
                            </Popup>

                            <WrapPanel Background="{TemplateBinding Background}">
                                <Image
                                    Width="16"
                                    Height="16"
                                    Source="{TemplateBinding DropDownImage}" />
                                <TextBlock
                                    Name="buttonLabel"
                                    VerticalAlignment="Center"
                                    Text="{TemplateBinding DropDownLabel}" />
                                <Path
                                    x:Name="Arrow"
                                    Margin="3,1,4,0"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Data="{DynamicResource awsDownArrowGeometry}"
                                    Fill="{DynamicResource awsComboBoxArrowBrushKey}" />
                            </WrapPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource awsToolBarButtonPressedBorderBrushKey}" />
                            <Setter Property="Background" Value="{DynamicResource awsToolBarButtonPressedBrushKey}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource awsToolBarButtonHoverBorderBrushKey}" />
                            <Setter Property="Background" Value="{DynamicResource awsToolBarButtonHoverBrushKey}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" />
                                <Condition Property="IsChecked" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource awsToolBarButtonPressedBorderBrushKey}" />
                            <Setter Property="Background" Value="{DynamicResource awsToolBarButtonPressedBrushKey}" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource awsComboBoxArrowMouseOverBrushKey}" />
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource awsToolBarButtonPressedBorderBrushKey}" />
                            <Setter Property="Background" Value="{DynamicResource awsToolBarButtonPressedBrushKey}" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource awsComboBoxArrowPressedBrushKey}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="buttonLabel" Property="Foreground" Value="{DynamicResource awsCommandBarTextDisabledKey}" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource awsComboBoxArrowDisabledBrushKey}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>