<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:components="clr-namespace:Amazon.AWSToolkit.CommonUI.Components"
    xmlns:mwt="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
    xmlns:toolkitThemes="clr-namespace:Amazon.AWSToolkit.Themes">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/AWSToolkit;component/Themes/DefaultTheme.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!--
        ********************************************************************************
        * Templates for a control that presents a standard read-only ComboBox control
        * and places a gid view of customizable columns into the dropdown.
        ********************************************************************************
    -->
    <ControlTemplate x:Key="awsListViewComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="Placement" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <Popup
                Name="PART_Popup"
                Grid.ColumnSpan="2"
                AllowsTransparency="true"
                IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                Placement="Bottom"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <Border
                    x:Name="DropDownBorder"
                    Background="{DynamicResource awsComboBoxDropPanelBackgroundBrushKey}"
                    BorderBrush="{DynamicResource awsComboBoxBorderBrushKey}"
                    BorderThickness="1">
                    <ListView
                        x:Name="PART_PopupListView"
                        MinWidth="{Binding ActualWidth, ElementName=MainGrid}"
                        AlternationCount="{TemplateBinding AlternationCount}"
                        ItemContainerStyle="{DynamicResource awsListViewItemContainerStyle}"
                        ItemsSource="{TemplateBinding ItemsSource}"
                        KeyboardNavigation.DirectionalNavigation="Contained"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                        Style="{DynamicResource awsListViewStyle}">
                        <ListView.View>
                            <GridView ColumnHeaderContainerStyle="{DynamicResource awsListViewGridHeaderStyle}" />
                        </ListView.View>

                        <ListView.GroupStyle>
                            <GroupStyle>
                                <GroupStyle.HeaderTemplate>
                                    <DataTemplate>
                                        <TextBlock
                                            FontSize="{DynamicResource {x:Static toolkitThemes:ShellProviderThemeResources.Environment122PercentFontSizeKey}}"
                                            FontWeight="{DynamicResource {x:Static toolkitThemes:ShellProviderThemeResources.Environment122PercentFontWeightKey}}"
                                            Text="{Binding Name}" />
                                    </DataTemplate>
                                </GroupStyle.HeaderTemplate>
                            </GroupStyle>
                        </ListView.GroupStyle>

                    </ListView>
                </Border>
            </Popup>

            <mwt:ListBoxChrome
                x:Name="Border"
                Grid.ColumnSpan="2"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                RenderFocused="{TemplateBinding IsKeyboardFocusWithin}"
                RenderMouseOver="{TemplateBinding IsMouseOver}" />
            <TextBox
                Name="PART_EditableTextBox"
                Margin="{TemplateBinding Padding}"
                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                IsReadOnly="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{DynamicResource awsComboBoxEditableTextBox}" />
            <ToggleButton
                Grid.Column="1"
                IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{DynamicResource awsComboBoxToggleButton}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="Foreground" Value="{DynamicResource awsWindowTextBrushKey}" />
            </Trigger>
            <Trigger Property="IsDropDownOpen" Value="true">
                <Setter TargetName="Border" Property="RenderFocused" Value="true" />
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="DropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                <Setter Property="Panel.Background" Value="{DynamicResource awsComboBoxEditableDisabledBackgroundBrushKey}" />
                <Setter TargetName="PART_EditableTextBox" Property="Background" Value="{DynamicResource awsComboBoxEditableDisabledBackgroundBrushKey}" />
                <Setter TargetName="Border" Property="Border.BorderBrush" Value="{DynamicResource awsComboBoxEditableDisabledBorderBrushKey}" />
            </Trigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="true" />
                    <Condition Binding="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource Mode=Self}}" Value="false" />
                    <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="true" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Border" Property="Border.BorderBrush" Value="{DynamicResource awsComboBoxEditableMouseOverBorderBrushKey}" />
                <Setter TargetName="Border" Property="Panel.Background" Value="{DynamicResource awsComboBoxEditableMouseOverBackgroundBrushKey}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource Mode=Self}}" Value="true" />
                    <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="true" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Border" Property="Border.BorderBrush" Value="{DynamicResource awsComboBoxEditablePressedBorderBrushKey}" />
                <Setter TargetName="Border" Property="Panel.Background" Value="{DynamicResource awsComboBoxEditablePressedBackgroundBrushKey}" />
            </MultiDataTrigger>

            <Trigger Property="IsGrouping" Value="true">
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Type components:ListViewComboBox}" TargetType="{x:Type components:ListViewComboBox}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource awsComboBoxFocusVisual}" />
        <Setter Property="Foreground" Value="{DynamicResource awsWindowTextBrushKey}" />
        <Setter Property="Background" Value="{DynamicResource awsComboBoxBackgroundBrushKey}" />
        <Setter Property="Panel.Background" Value="{DynamicResource awsComboBoxBackgroundBrushKey}" />
        <Setter Property="BorderBrush" Value="{DynamicResource awsComboBoxBorderBrushKey}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static toolkitThemes:ShellProviderThemeResources.EnvironmentFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static toolkitThemes:ShellProviderThemeResources.EnvironmentFontSizeKey}}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
                        </Grid.ColumnDefinitions>
                        <Popup
                            x:Name="PART_Popup"
                            Grid.ColumnSpan="2"
                            AllowsTransparency="true"
                            IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                            Placement="Bottom"
                            PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                            <Border
                                x:Name="DropDownBorder"
                                Background="{DynamicResource awsComboBoxDropPanelBackgroundBrushKey}"
                                BorderBrush="{TemplateBinding Border.BorderBrush}"
                                BorderThickness="1">
                                <ListView
                                    x:Name="PART_PopupListView"
                                    MinWidth="{Binding ActualWidth, ElementName=MainGrid}"
                                    AlternationCount="{TemplateBinding AlternationCount}"
                                    ItemContainerStyle="{DynamicResource awsListViewItemContainerStyle}"
                                    ItemsSource="{TemplateBinding ItemsSource}"
                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    Style="{DynamicResource awsListViewStyle}">
                                    <ListView.View>
                                        <GridView ColumnHeaderContainerStyle="{DynamicResource awsListViewGridHeaderStyle}" />
                                    </ListView.View>

                                    <ListView.GroupStyle>
                                        <GroupStyle>
                                            <GroupStyle.HeaderTemplate>
                                                <DataTemplate>
                                                    <TextBlock
                                                        FontSize="{DynamicResource {x:Static toolkitThemes:ShellProviderThemeResources.Environment122PercentFontSizeKey}}"
                                                        FontWeight="{DynamicResource {x:Static toolkitThemes:ShellProviderThemeResources.Environment122PercentFontWeightKey}}"
                                                        Text="{Binding Name}" />
                                                </DataTemplate>
                                            </GroupStyle.HeaderTemplate>
                                        </GroupStyle>
                                    </ListView.GroupStyle>

                                </ListView>
                            </Border>
                        </Popup>
                        <ToggleButton
                            Grid.ColumnSpan="2"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding Border.BorderThickness}"
                            IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Style="{StaticResource awsComboBoxToggleButton}" />
                        <ContentPresenter
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding SelectionBoxItem}"
                            ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            IsHitTestVisible="false"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="Height" Value="95" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="Border.BorderBrush" Value="{DynamicResource awsComboBoxEditableBorderBrushKey}" />
                <Setter Property="Panel.Background" Value="{DynamicResource awsComboBoxEditableBackgroundBrushKey}" />
                <Setter Property="IsTabStop" Value="false" />
                <Setter Property="Padding" Value="2" />
                <Setter Property="Template" Value="{StaticResource awsListViewComboBoxEditableTemplate}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--
        ********************************************************************************
        * Templates for a custom control based on a ToggleButton that presents a drop-
        * down popup (like a combobox) that can contain a custom user control. The user
        * control is placed between header and footer panels.
        ********************************************************************************
    -->

    <Style x:Key="HeaderedDropPanelFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="4"
                        SnapsToDevicePixels="true"
                        Stroke="{DynamicResource awsComboBoxPressedBorderBrushKey}"
                        StrokeDashArray="1 2"
                        StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  button styling set to match a combobox/togglebutton on a toolbar rather than standard button  -->
    <Style
        x:Key="{x:Type components:HeaderedDropPanel}"
        BasedOn="{StaticResource {x:Type ToggleButton}}"
        TargetType="{x:Type components:HeaderedDropPanel}">
        <Setter Property="Foreground" Value="{DynamicResource awsCommandBarTextKey}" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type components:HeaderedDropPanel}">
                    <Border
                        Name="Bd"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="true">
                        <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Popup
                                x:Name="PART_Popup"
                                Margin="1"
                                AllowsTransparency="False"
                                Placement="Bottom"
                                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                                StaysOpen="False">
                                <Border
                                    x:Name="DropDownBorder"
                                    Background="{DynamicResource awsComboBoxDropPanelBackgroundBrushKey}"
                                    BorderBrush="{DynamicResource awsHeaderedDropPanelPopupBorderBrushKey}"
                                    BorderThickness="1">
                                    <Grid x:Name="PART_PopupInner">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>

                                        <!--  Cross-control header  -->
                                        <Grid x:Name="PART_HeaderPanel" Background="{DynamicResource awsHeaderedDropPanelHeaderBackgroundBrushKey}">

                                            <StackPanel Margin="4,0">
                                                <TextBlock
                                                    Margin="4,8"
                                                    HorizontalAlignment="Left"
                                                    VerticalAlignment="Center"
                                                    FontWeight="Bold"
                                                    Foreground="{DynamicResource awsHeaderedDropPanelHeaderTextBrushKey}"
                                                    Text="{TemplateBinding PanelHeaderLabel}" />
                                            </StackPanel>
                                            <Border BorderBrush="{DynamicResource awsDividerRuleBrushKey}" BorderThickness="1" />
                                        </Grid>

                                        <!--  inner row holds the bound child panel  -->
                                        <ContentPresenter
                                            x:Name="PART_ContentPanel"
                                            Grid.Row="1"
                                            Margin="4"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                            IsHitTestVisible="true"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                                        <!--  Base row holds cancel/apply  -->
                                        <Grid
                                            x:Name="PART_ControlButtonsPanel"
                                            Grid.Row="2"
                                            Margin="0,0,0,4">
                                            <StackPanel>
                                                <Border
                                                    Background="{DynamicResource awsHeaderedDropPanelFooterBackgroundBrushKey}"
                                                    BorderBrush="{DynamicResource awsDividerRuleBrushKey}"
                                                    BorderThickness="1" />
                                                <StackPanel
                                                    Margin="0,4,0,0"
                                                    HorizontalAlignment="Right"
                                                    Orientation="Horizontal">
                                                    <Button
                                                        x:Name="PART_ApplyButton"
                                                        Padding="4,2"
                                                        Style="{StaticResource awsButtonBaseStyle}">
                                                        Apply
                                                    </Button>
                                                    <Button
                                                        x:Name="PART_CancelButton"
                                                        Margin="4,0"
                                                        Padding="4,2"
                                                        Style="{StaticResource awsButtonBaseStyle}">
                                                        Cancel
                                                    </Button>
                                                </StackPanel>
                                            </StackPanel>
                                        </Grid>
                                    </Grid>
                                </Border>
                            </Popup>

                            <WrapPanel Background="{TemplateBinding Background}">
                                <Image
                                    Width="16"
                                    Height="16"
                                    Source="{TemplateBinding DropDownImage}" />
                                <TextBlock
                                    Name="buttonLabel"
                                    VerticalAlignment="Center"
                                    Text="{TemplateBinding DropDownLabel}" />
                                <Path
                                    x:Name="Arrow"
                                    Margin="3,1,4,0"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Data="{DynamicResource awsDownArrowGeometry}"
                                    Fill="{DynamicResource awsComboBoxArrowBrushKey}" />
                            </WrapPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource awsToolBarButtonPressedBorderBrushKey}" />
                            <Setter Property="Background" Value="{DynamicResource awsToolBarButtonPressedBrushKey}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource awsToolBarButtonHoverBorderBrushKey}" />
                            <Setter Property="Background" Value="{DynamicResource awsToolBarButtonHoverBrushKey}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" />
                                <Condition Property="IsChecked" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource awsToolBarButtonPressedBorderBrushKey}" />
                            <Setter Property="Background" Value="{DynamicResource awsToolBarButtonPressedBrushKey}" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource awsComboBoxArrowMouseOverBrushKey}" />
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource awsToolBarButtonPressedBorderBrushKey}" />
                            <Setter Property="Background" Value="{DynamicResource awsToolBarButtonPressedBrushKey}" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource awsComboBoxArrowPressedBrushKey}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="buttonLabel" Property="Foreground" Value="{DynamicResource awsCommandBarTextDisabledKey}" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource awsComboBoxArrowDisabledBrushKey}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
