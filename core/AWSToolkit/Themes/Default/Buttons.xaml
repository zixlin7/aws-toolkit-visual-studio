<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mwt="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero">

    <Style x:Key="awsButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2"
                               StrokeThickness="1"
                               Stroke="{DynamicResource awsDefaultControlForegroundBrushKey}"
                               StrokeDashArray="1 2"
                               SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- set a base global style for all buttons; we can rely on system colors for most of it -->
    <Style x:Key="{x:Type ButtonBase}" TargetType="{x:Type ButtonBase}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource awsButtonFocusVisual}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border Name="Border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource awsButtonIsDefaultBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource awsButtonPressedBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- set an additional named style so that views that want to further customize can easily reference our base style -->
    <Style x:Key="awsButtonBaseStyle" TargetType="{x:Type ButtonBase}"/>

    <Style x:Key="{x:Type Button}" BasedOn="{StaticResource awsButtonBaseStyle}" TargetType="{x:Type Button}"/>
    <Style x:Key="{x:Type ToggleButton}" BasedOn="{StaticResource awsButtonBaseStyle}" TargetType="{x:Type ToggleButton}"/>
    <Style x:Key="{x:Type RepeatButton}" BasedOn="{StaticResource awsButtonBaseStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
    </Style>

    <Style x:Key="CheckboxOrRadioMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" 
                               SnapsToDevicePixels="true" 
                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" 
                               StrokeThickness="1" 
                               StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- use the same color assignments as checkboxes, so we retain dark-on-light even in dark theme -->
    <Style x:Key="awsRadioButtonBaseStyle" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Type RadioButton}}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{DynamicResource awsDefaultControlForegroundBrushKey}"/>
        <Setter Property="Background" Value="{DynamicResource awsCheckboxOrRadioBackgroundBrushKey}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource awsCheckboxOrRadioBorderBrushKey}"/>
        <Setter Property="FontFamily" Value="Segou UI" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="radioButtonBorder" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                CornerRadius="100" 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                Margin="1,1,2,1" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid" Margin="2">
                                <Ellipse x:Name="optionMark" 
                                         Fill="{DynamicResource awsCheckboxOrRadioForegroundBrushKey}" 
                                         MinWidth="6" 
                                         MinHeight="6" 
                                         Opacity="0"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" 
                                          Grid.Column="1" 
                                          Focusable="False" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" 
                                          RecognizesAccessKey="True" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource CheckboxOrRadioMarkFocusVisual}"/>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{DynamicResource awsCheckboxOrRadioBackgroundBrushKey}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{DynamicResource awsButtonMouseOverBorderBrush}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource awsCheckboxOrRadioForegroundBrushKey}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{DynamicResource awsCheckboxOrRadioBackgroundBrushKey}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{DynamicResource awsDisabledControlForegroundBrushKey}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource awsDisabledControlForegroundBrushKey}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{DynamicResource awsCheckboxOrRadioBackgroundBrushKey}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{DynamicResource awsButtonPressedBorderBrush}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource awsCheckboxOrRadioForegroundBrushKey}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="awsCheckboxButtonBaseStyle" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{DynamicResource awsDefaultControlForegroundBrushKey}"/>
        <Setter Property="Background" Value="{DynamicResource awsCheckboxOrRadioBackgroundBrushKey}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource awsCheckboxOrRadioBorderBrushKey}"/>
        <Setter Property="FontFamily" Value="Segou UI" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                Margin="1" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid">
                                <Path x:Name="optionMark" 
                                      Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " 
                                      Fill="{DynamicResource awsCheckboxOrRadioForegroundBrushKey}" 
                                      Margin="1" 
                                      Opacity="0" 
                                      Stretch="None"/>
                                <Rectangle x:Name="indeterminateMark" 
                                           Fill="{DynamicResource awsCheckboxOrRadioForegroundBrushKey}" 
                                           Margin="2" 
                                           Opacity="0"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" 
                                          Grid.Column="1" 
                                          Focusable="False" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" 
                                          RecognizesAccessKey="True" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource CheckboxOrRadioMarkFocusVisual}"/>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource awsCheckboxOrRadioBackgroundBrushKey}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource awsButtonMouseOverBorderBrush}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource awsCheckboxOrRadioForegroundBrushKey}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource awsCheckboxOrRadioForegroundBrushKey}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource awsCheckboxOrRadioBackgroundBrushKey}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource awsDisabledControlForegroundBrushKey}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource awsDisabledControlForegroundBrushKey}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource awsDisabledControlForegroundBrushKey}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource awsCheckboxOrRadioBackgroundBrushKey}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource awsButtonPressedBorderBrush}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource awsCheckboxOrRadioForegroundBrushKey}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource awsCheckboxOrRadioForegroundBrushKey}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>