<Project ToolsVersion="14.0"
  xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="$(MSBuildThisFileDirectory)\Common.Build.targets" />

  <PropertyGroup>
    <!-- set an unlikely-to-be-reached version for debug so the vssdk registration targets don't
         don't complain about same-or-lower-version installed (for vs2015). VS2017 doesn't seem
         to care.
    -->
    <Build_Version Condition=" '$(Build_Version)' == '' And '$(Configuration)' == 'Debug'">9.9.9.9</Build_Version>
    <Build_Version Condition=" '$(Build_Version)' == '' And '$(Configuration)' == 'Release'">0.6.0.0</Build_Version>
  </PropertyGroup>

  <PropertyGroup>
    <!-- 
      Package Guids; These need to be the same as the GUIDs in Guids.cs and AWSVisualStudioToolkit.*.vsct
    
      If this repo needs to produce different Toolkit products in the future, conditionals could be used
      example: <VsixGuid Condition="'$(VisualStudioVersion)' == 'SOME_VERSION' ">TOOLKIT_GUID</VsixGuid>

      VS Toolkit GUIDs:
      - VS 2013: 9510184f-8135-4f8a-ab8a-23be77c345e2
      - VS 2015: f2884b07-5122-4e23-acd7-4d93df18709e
      - VS 2017 (current Toolkit): 12ed248b-6d4a-47eb-be9e-8eabea0ff119
      - VS 2022: 0B82CB16-0E52-4363-9BC0-61E758689176
    -->
    <VsixGuid>12ed248b-6d4a-47eb-be9e-8eabea0ff119</VsixGuid>
    <VsixGuid2022>0B82CB16-0E52-4363-9BC0-61E758689176</VsixGuid2022>
  </PropertyGroup>

  <PropertyGroup>
    <!-- 
      Past/Present Toolkit VSIX Names:
      - 12.0 / VS 2013: AWS Toolkit for Visual Studio 2013
      - 14.0 / VS 2015: AWS Toolkit for Visual Studio 2015
      - VS 2017 (current Toolkit): AWS Toolkit for Visual Studio 2017 and 2019
    -->
    <VsixDisplayName Condition="'$(Configuration)' == 'Release'">AWS Toolkit for Visual Studio 2017 and 2019</VsixDisplayName>
    <VsixDisplayName Condition="'$(Configuration)' == 'Debug'">AWSToolkitDev</VsixDisplayName>
    <VsixDisplayName2022 Condition="'$(Configuration)' == 'Release'">AWS Toolkit for Visual Studio 2022</VsixDisplayName2022>
    <VsixDisplayName2022 Condition="'$(Configuration)' == 'Debug'">AWSToolkitDev 2022</VsixDisplayName2022>
  </PropertyGroup>

  <PropertyGroup>
    <!-- 
      Past/Present Supported VS version ranges [Inclusive] (Exclusive)

      If this repo needs to produce different Toolkit products in the future, conditionals could
      be used in buildtools\Common.Build.settings to set a build variable and reference it here.

      - 12.0 / VS 2013: [12.0]
      - 14.0 / VS 2015: [14.0,)   (I think this was inadvertently open-ended)
      - VS 2017 (current Toolkit): [15.0, 17.0)
    -->
    <VsixVsTarget>[15.0,17.0)</VsixVsTarget>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
    <ExperimentalBuild>true</ExperimentalBuild>
    <!-- Prior to VS2017, the Toolkit was installed via MSI -->
    <InstalledByMsi>false</InstalledByMsi>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)' == 'Release'">
    <ExperimentalBuild>false</ExperimentalBuild>
    <!-- Prior to VS2017, the Toolkit was installed via MSI -->
    <InstalledByMsi>false</InstalledByMsi>
  </PropertyGroup>

  <!-- Returns the current build version metadata. Used in .vsixmanifests to substitute our build version
      and other version or configuration specific settings.
  -->
  <Target Name="GetVsixVersion" Outputs="$(Build_Version)" />
  <Target Name="GetVsixVSTarget" Outputs="$(VsixVsTarget)" />
  <Target Name="GetVsixGuid" Outputs="$(VsixGuid)" />
  <Target Name="GetVsixGuid2022" Outputs="$(VsixGuid2022)" />
  <Target Name="GetVsixDisplayName" Outputs="$(VsixDisplayName)" />
  <Target Name="GetVsixDisplayName2022" Outputs="$(VsixDisplayName2022)" />
  <Target Name="GetVsixExperimentalBuildFlag" Outputs="$(ExperimentalBuild)" />
  <Target Name="GetVsixInstalledByMsiFlag" Outputs="$(InstalledByMsi)" />
</Project>
