<Project ToolsVersion="14.0" DefaultTargets="full-build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <PropertyGroup>
        <InternalBuildTools Condition="'$(InternalBuildTools)'==''">$(MSBuildProjectDirectory)\..\buildtasks</InternalBuildTools>
    </PropertyGroup>

	<Import Project="$(InternalBuildTools)\references.targets" Condition="Exists('$(InternalBuildTools)\references.targets')" />
	<Import Project="$(InternalBuildTools)\common.targets" Condition="Exists('$(InternalBuildTools)\common.targets')" />

    <PropertyGroup>
        <!-- perform a release build by default -->
        <Configuration Condition="'$(Configuration)'==''">Debug</Configuration>

        <!-- path to the root of the repo artifacts; locations for output content will be inferred from this -->
		<BuildRoot Condition="'$(BuildRoot)' == ''">$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), root))</BuildRoot>

        <!-- default location for artifacts consolidation -->
        <Deployment Condition="'$(Deployment)'==''">$(BuildRoot)\Deployment</Deployment>
        <TestResults Condition="'$(TestResults)'==''">$(BuildRoot)\TestResults</TestResults>

        <RunKeyScan Condition="'$(RunKeyScan)'==''">false</RunKeyScan>

        <UpdateVersions Condition="'$(UpdateVersions)'==''">false</UpdateVersions>
        <AWSToolkitVersionNumber Condition="'$(AWSToolkitVersion)'==''"></AWSToolkitVersionNumber>
        <AWSDeployVersionNumber Condition="'$(AWSDeployVersion)'==''"></AWSDeployVersionNumber>

    	<AWSToolkitPackageOutput>$(Deployment)\AWSToolkitPackage</AWSToolkitPackageOutput>

		<PushHostedFiles Condition="'$(PushHostedFiles)'==''">true</PushHostedFiles>
        <HostedFilesBucket Condition="'$(HostedFilesBucket)'==''">aws-vs-toolkit</HostedFilesBucket>
        <HostedFilesBucketRegion Condition="'$(HostedFilesBucketRegion)'==''">us-east-1</HostedFilesBucketRegion>
        <HostedFilesFolder Condition="'$(HostedFilesFolder)'==''">$(BuildRoot)\hostedfiles</HostedFilesFolder>

		<!-- cn-north-1 artifact properties -->
        <BJSHostedFilesBucket Condition="'$(BJSHostedFilesBucket)'==''">aws-vs-toolkit-cn-north-1</BJSHostedFilesBucket>
        <BJSCredentials Condition="'$(BJSCredentials)'==''">BJS.SDKUpload</BJSCredentials>
         
        <VSToolkitDistribution>E38QEBQWXHC945</VSToolkitDistribution>
         
		<SignVsixPackages Condition="'$(SignVsixPackages)'==''">false</SignVsixPackages>
        <BuildVSToolkit2017>true</BuildVSToolkit2017>
    </PropertyGroup>

    <!-- 
        AWS VISUAL STUDIO TOOLKIT GENERAL TARGETS 

        Common commands used during development: clean, restore, compile, test
    -->

    <!-- restore - Restore nuget packages for the Visual Studio Toolkit solution and fetches remote assets -->
    <Target Name="restore">
        <Message Text="Restoring nuget packages"/>
        <Exec IgnoreExitCode="true" Command="$(BuildRoot)\solutions\.nuget\NuGet.exe restore $(BuildRoot)\solutions\AWSVisualStudioToolkit.sln" />

        <!-- We want builds that are published to always work with the latest endpoints, so we ensure this through the restore target -->
        <Message Text="Fetching endpoints manifest"/>
        <CallTarget Targets="get-latest-endpoint-data"/>
    </Target>

    <!-- compile - compiles the Visual Studio Toolkit solution; does not restore, does not run tests -->
    <Target Name="compile">
        <MSBuild Projects="..\solutions\AWSVisualStudioToolkit.sln" Properties="Configuration=$(Configuration)" />
	</Target>

    <!-- test - runs the Visual Studio Toolkit solution tests; does not compile first -->
    <Target Name="test">
        <CallTarget Targets="run-tests"/>
	</Target>

    <!-- test-integ - runs the integration tests; does not compile first -->
    <Target Name="test-integ">
        <CallTarget Targets="run-integration-tests"/>
    </Target>

    <!-- AWS VISUAL STUDIO TOOLKIT UTILITY TARGETS -->

    <Target Name="update-awssdk" DependsOnTargets="build-tools">
        <UpdateAwsSdkVersionsTask RootLocation="$(BuildRoot)" WaitForDebugger="$(WaitForDebugger)"/>
    </Target>
  
	<Target Name="full-build" DependsOnTargets="build-tools;clean;get-latest-endpoint-data;restore;update-version;build-vstoolkit;run-tests;keyscan;copy-artifacts;sign-packages;save-build">
		<Message Text="Builds all components of the AWS Toolkit for Visual Studio"/>
	</Target>

    <Target Name="build-awsstudio">
		<Message Text="------------------------------------------------------------------------------" />
        <Message Text="| AWS Studio - $(Configuration)" />
		<Message Text="------------------------------------------------------------------------------" />

        <Message Text="Restoring nuget packages"/>
        <Exec IgnoreExitCode="true" Command="$(BuildRoot)\solutions\.nuget\NuGet.exe restore $(BuildRoot)\solutions\AWSStudioToolkit.sln" />

        <Message Text="Compiling Solution"/>
        <MSBuild Projects="..\solutions\AWSStudioToolkit.sln" Properties="Configuration=$(Configuration)" />
    </Target>

    <Target Name="build-vstoolkit" DependsOnTargets="restore;patch-vsixmanifest" Condition="'$(BuildVSToolkit2017)'=='true'">
        <Message Text="Building AWS Toolkit for Visual Studio"/>

        <CallTarget Targets="compile"/>
        <CallTarget Targets="test"/>
	</Target>
	
    <!-- ======================================== Test Related ======================================== -->

    <!-- Use NuGet to grab the xunit runner -->
    <Target Name="restore-test-runner">
        <Message Text="Restoring nuget packages for the test runner"/>
        <Exec IgnoreExitCode="true" Command="$(BuildRoot)\solutions\.nuget\NuGet.exe install xunit.runner.msbuild -Version 2.4.1 -OutputDirectory $(BuildRoot)\solutions\packages" />
	</Target>

    <!-- Required for the "xunit" element within the run-tests task. -->
    <UsingTask 
        AssemblyFile="$(BuildRoot)\solutions\packages\xunit.runner.msbuild.2.4.1\build\net452\xunit.runner.msbuild.net452.dll"
        TaskName="Xunit.Runner.MSBuild.xunit"
        />

    <!-- Run tests with the current compiled code -->
    <Target Name="run-tests" DependsOnTargets="restore-test-runner">
        <Message Text="$(Configuration) - running unit tests."/>

        <ItemGroup>
            <!-- Add projects to be tested with xunit here -->
            <TestAssemblies Include="..\tests\AmazonCLIExtensions.Tests\bin\$(Configuration)\AmazonCLIExtensions.Tests.dll" />
            <TestAssemblies Include="..\tests\AWSToolkit.Tests\bin\$(Configuration)\AWSToolkit.Tests.dll" />
            <TestAssemblies Include="..\tests\AWSToolkit.Util.Tests\bin\$(Configuration)\AWSToolkit.Util.Tests.dll" />
            <TestAssemblies Include="..\tests\AWSToolkitPackage.Tests\bin\$(Configuration)\AWSToolkitPackage.Tests.dll" />
            <TestAssemblies Include="..\tests\AWSToolkit.VisualStudio.Shared.Tests\bin\$(Configuration)\AWSToolkit.VisualStudio.Shared.Tests.dll" />
        </ItemGroup>        

        <MakeDir Directories="$(TestResults)" />
        <xunit Assemblies="@(TestAssemblies)" Html="$(TestResults)\toolkit-test-results.html" Xml="$(TestResults)\toolkit-test-results.xml" Reporter="verbose" />
    </Target>

    <!-- Run integration tests with the current compiled code -->
    <Target Name="run-integration-tests" DependsOnTargets="restore-test-runner">
        <Message Text="$(Configuration) - running integration tests."/>

        <ItemGroup>
            <!-- Add projects to be tested with xunit here -->
            <TestAssemblies Include="..\tests\Integration\AwsToolkit.Tests.Integration\bin\$(Configuration)\AwsToolkit.Tests.Integration.dll" />
        </ItemGroup>        

        <MakeDir Directories="$(TestResults)" />
        <xunit Assemblies="@(TestAssemblies)" Html="$(TestResults)\toolkit-test-integ-results.html" Xml="$(TestResults)\toolkit-test-integ-results.xml" Reporter="verbose" />
    </Target>

    <!-- ======================================== END Test Related ======================================== -->

	<Target Name="patch-vsixmanifest" Condition="$(UpdateVersions)">
		<!-- patch vsixmanifest with release package id if running on Jenkins (likely indicated by update version flag set) -->
        <!-- DISABLE while setting up new project layouts
		<PatchVsixManifestPackageIdTask
			PackageRootFolder="..\shells\AWSToolkitPackage"
			PackageIdPrefix="AWSToolkitPackage"
			GuidSourceFile="Guids.cs"
			GuidMemberName="guid_VSPackageString" />
        -->
	</Target>

    <Target Name="copy-artifacts" DependsOnTargets="build-vstoolkit;copy-awsdeploy;copy-icons;copy-awsdeploy;copy-cf-msbuild-targets;copy-templates;copy-hostedfiles" />

    <Target Name="copy-icons" DependsOnTargets="build-vstoolkit">
		<Message Text="Consolidating icons to deployment folder"/>

        <PropertyGroup>
            <IconsDest>$(Deployment)\Icons</IconsDest>
        </PropertyGroup>

		<MakeDir Directories="$(IconsDest)" />

		<Copy
			SourceFiles="..\vspackages\AWSToolkitPackage\Resources\AWSCloudFormationProject.ico"
			DestinationFiles="$(IconsDest)\AWSCloudFormationProject.ico" />
		<Copy
			SourceFiles="..\vspackages\AWSToolkitPackage\Resources\AWSCloudFormationTemplate.ico"
			DestinationFiles="$(IconsDest)\AWSCloudFormationTemplate.ico" />
    </Target>

    <Target Name="copy-templates" DependsOnTargets="build-vstoolkit">
		<Message Text="Copying IDE project templates to deployment folder"/>
        
        <PropertyGroup>
            <ProjectTemplatesDest>$(Deployment)\ProjectTemplates</ProjectTemplatesDest>
        </PropertyGroup>
        
        <ItemGroup>
            <SampleProjectTemplates Include="$(BuildRoot)\vspackages\templates\AWSProjectTemplates\AWS Samples\**\*" />
            <ConsoleProjectTemplates Include="$(BuildRoot)\vspackages\templates\AWSProjectTemplates\AWS_Console\**\*" />
            <EmptyProjectTemplates Include="$(BuildRoot)\vspackages\templates\AWSProjectTemplates\AWS_Empty\**\*" />
            <WebProjectTemplates Include="$(BuildRoot)\vspackages\templates\AWSProjectTemplates\AWS_Web\**\*" />
        </ItemGroup>
        
        <Copy
            SourceFiles="@(SampleProjectTemplates)"
            DestinationFolder="$(ProjectTemplatesDest)\AWS Samples\%(RecursiveDir)" />
        
        <Copy
            SourceFiles="@(ConsoleProjectTemplates)"
            DestinationFolder="$(ProjectTemplatesDest)\AWS_Console\%(RecursiveDir)" />
        <Copy
            SourceFiles="@(EmptyProjectTemplates)"
            DestinationFolder="$(ProjectTemplatesDest)\AWS_Empty\%(RecursiveDir)" />
        <Copy
            SourceFiles="@(WebProjectTemplates)"
            DestinationFolder="$(ProjectTemplatesDest)\AWS_Web\%(RecursiveDir)" />
            
    </Target>

    <Target Name="copy-hostedfiles" DependsOnTargets="get-latest-endpoint-data">
		<Message Text="Copying hosted files to deployment folder"/>

        <PropertyGroup>
            <HostedFilesDest>$(Deployment)\hostedfiles</HostedFilesDest>
        </PropertyGroup>

		<MakeDir Directories="$(HostedFilesDest)" />

        <ItemGroup>
            <HostedFiles Include="$(HostedFilesFolder)\**\*" />
        </ItemGroup>
        
		<Copy
			SourceFiles="@(HostedFiles)"
			DestinationFolder="$(HostedFilesDest)\%(RecursiveDir)" />
    </Target>

	<Target Name="copy-awsdeploy" DependsOnTargets="build-vstoolkit">
        <PropertyGroup>
            <AwsDeployDest>$(Deployment)\awsdeploy</AwsDeployDest>
        </PropertyGroup>	
		
        <MakeDir Directories="$(AwsDeployDest)" />
        <ItemGroup>
			<AWSDeployBinaries Include="$(BuildRoot)\awsdeploy\client\AWSDeploymentLib\bin\$(Configuration)\AWSDeploymentLib.dll" />
			
			<AWSDeployBinaries Include="$(BuildRoot)\solutions\packages\log4net*\lib\net45-full\log4net.dll"/>
			<AWSDeployBinaries Include="$(BuildRoot)\thirdparty\System.Windows.Controls.DataVisualization.Toolkit.dll"/>
			<AWSDeployBinaries Include="$(BuildRoot)\thirdparty\YamlDotNet.dll"/>
			
        </ItemGroup>
        <Copy
            SourceFiles="@(AWSDeployBinaries)"
            DestinationFolder="$(AwsDeployDest)" />
			
	</Target>

	<Target Name="copy-cf-msbuild-targets" DependsOnTargets="build-vstoolkit">
        <PropertyGroup>
            <CfMsbuildTargetsDest>$(Deployment)\cf-msbuild-targets</CfMsbuildTargetsDest>
        </PropertyGroup>	
		<MakeDir Directories="$(CfMsbuildTargetsDest)" />
		
        <ItemGroup>
            <CfMsBuildTargetBinaries Include="$(BuildRoot)\vspackages\cloudformation\AWSToolkit.CloudFormation.MSBuildTasks\cloudformation.targets" />
			<CfMsBuildTargetBinaries Include="$(BuildRoot)\Deployment\14.0\$(Configuration)\AWSToolkit.CloudFormation.MSBuildTasks.dll" />
			<CfMsBuildTargetBinaries Include="$(BuildRoot)\Deployment\14.0\$(Configuration)\AWSToolkit.CloudFormation.Parser.dll"/>
			<CfMsBuildTargetBinaries Include="$(BuildRoot)\Deployment\14.0\$(Configuration)\AWSToolkit.Util.dll"/>
			<CfMsBuildTargetBinaries Include="$(BuildRoot)\solutions\packages\log4net*\lib\net45-full\log4net.dll"/>
			<CfMsBuildTargetBinaries Include="$(BuildRoot)\Deployment\14.0\$(Configuration)\AWSSDK.Core.dll"/>
        </ItemGroup>
        <Copy
            SourceFiles="@(CfMsBuildTargetBinaries)"
            DestinationFolder="$(CfMsbuildTargetsDest)" />		
		
	</Target>
	
	<Target Name="update-version" DependsOnTargets="build-tools" Condition="$(UpdateVersions)">
		<UpdateVSToolkitVersionTask
			RepositoryRoot="$(MSBuildProjectDirectory)\.."
			ExcludePaths="buildtasks;tests;toolkitcore\AWSToolkit.Studio;vspackages\templates\AWSProjectTemplates;vspackages\cloudformation\CloudFormationProjectTemplate;vspackages\cloudformation\CloudFormationTemplate;vspackages\lambda\LambdaFunctionProjectTemplate;vspackages\lambda\LambdaNETCoreFlourishProjectTemplate;vspackages\lambda\LambdaNETCoreFlourishProjectWithTestTemplate;vspackages\lambda\LambdaNETCoreFunctionProjectTemplate;vspackages\lambda\LambdaNETCoreFunctionProjectWithTestTemplate"
			VersionNumber="$(AWSToolkitVersionNumber)"
			WaitForDebugger="false"
			/>
	</Target>

    <Target Name="keyscan" Condition="$(RunKeyScan)" DependsOnTargets="build-tools">

        <ItemGroup>
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\obj\Debug\View\Components\GetPasswordAskPrivateKey.baml" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\obj\Debug\View\OpenRemoteDesktopControl.baml" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\obj\Debug\View\OpenSCPSessionControl.baml" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\obj\Debug\View\OpenSSHSessionControl.baml" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\obj\12.0\Debug\AWSToolkit.EC2.g.resources" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\obj\14.0\Debug\AWSToolkit.EC2.g.resources" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\obj\Release\View\Components\GetPasswordAskPrivateKey.baml" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\obj\Release\View\OpenRemoteDesktopControl.baml" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\obj\Release\View\OpenSCPSessionControl.baml" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\obj\Release\View\OpenSSHSessionControl.baml" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\obj\Release\AWSToolkit.EC2.g.resources" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\View\Components\GetPasswordAskPrivateKey.xaml" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\View\GetPasswordControl.xaml.cs" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\View\OpenRemoteDesktopControl.xaml" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\View\OpenSCPSessionControl.xaml" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\View\OpenSSHSessionControl.xaml" />			
            <PrivateKeyException Include="tests\AWSToolkit.Tests\CryptoTests.cs" />
            <PrivateKeyException Include="thirdparty\PemToPPKConverter\openssh.c" />
            <PrivateKeyException Include="thirdparty\PemToPPKConverter\Release\openssh.obj" />
			
		    <PrivateKeyException Include="Include\sdk\Models\acm\acm-2015-12-08.normal.json" />
            <PrivateKeyException Include="Include\sdk\Models\ec2\ec2-2014-02-01.normal.json" />
            <PrivateKeyException Include="Include\sdk\Models\iam\iam-2010-05-08.normal.json" />
			
        </ItemGroup>

        <ItemGroup>
            <FileException Include="buildtasks\BuildTasks\KeyScannerTask.cs" />

			<FileException Include="vspackages\templates\TemplateWizard\UserInputForm.resx" />
            <FileException Include="awsdeploy\tests\AWSDeploymentUnitTest\Resources\sample-configfile.txt" />
			
			<FileException Include="Include\sdk\Models\elasticbeanstalk.examples.json" />
			<FileException Include="Include\sdk\Models\elasticbeanstalk.customizations.json" />
			
        </ItemGroup>
		
		<ItemGroup>
			<FolderException Include="solutions\packages"/>
		</ItemGroup>

        <KeyScannerTask
            Folder="$(MSBuildProjectDirectory)\.."
            FilePattern="**"
            PrivateKeyExceptions="@(PrivateKeyException)"
            FileExceptions="@(FileException)"
			FolderExceptions="@(FolderException)"
            ParallelScan="true"
            />

    </Target>

    <Target Name="sign-packages" DependsOnTargets="copy-artifacts" Condition="'$(SignVsixPackages)'">
    
		<PropertyGroup>
            <SigningScriptArgs>-ExecutionPolicy Unrestricted -NoProfile -Command "$(MSBuildProjectDirectory)\SignVsixPackage.ps1" -VsixPackage "$(Deployment)\15.0\$(Configuration)\AWSToolkitPackage.vsix"</SigningScriptArgs>
		</PropertyGroup>
        
        <Message Text="Signing VS2017 vsix package deployed to $(Deployment)\15.0\$(Configuration) folder" />
        
		<Exec LogStandardErrorAsError="true"
              Command="$(powershell) $(SigningScriptArgs)" />
        
    </Target>
    
	<Target Name="save-build"  DependsOnTargets="build-tools">
		<SaveBuildArtifactTask
			RepositoryRoot="$(MSBuildProjectDirectory)\.."
			BuildArtifactType="toolkit"
			GitBranch="$(SaveReferenceGitBranch)"
			LocalArchiveRootFolder="$(LocalArchiveRootFolder)"
			/>
	</Target>

    <!-- only care about packaging updated endpoints and flags for release builds -->
    <Target Name="get-latest-endpoint-data">
        <Message Text="Fetching latest endpoints manifest files..." />
        <Exec Command="powershell.exe $(MSBuildThisFileDirectory)updateEndpoints.ps1 -configuration $(Configuration) -s3BucketName $(HostedFilesBucket) -s3BucketRegion $(HostedFilesBucketRegion) -hostedfilesFolder $(HostedFilesFolder)" />
    </Target>
    
    <!-- Output the current VSIX file's contents to a text file -->
    <Target Name="list-vsix-contents">
        <Message Text="$(Configuration) - Listing VSIX Contents"/>

        <PropertyGroup>
            <VsixFileName>$(Deployment)\$(VisualStudioVersion)\$(Configuration)\AWSToolkitPackage.vsix</VsixFileName>
            <OutputFileName>$(Deployment)\$(VisualStudioVersion)\$(Configuration)\_vsixContents.txt</OutputFileName>
        </PropertyGroup>
        <Message Text="Listing VSIX Contents..." />
        <Exec Command="powershell.exe $(MSBuildThisFileDirectory)listZipContents.ps1 -vsixFileName $(VsixFileName) -outputFileName $(OutputFileName)" />
    </Target>
    
	<Target Name="compare-hostedfiles-all" DependsOnTargets="compare-hostedfiles;compare-hostedfiles-bjs" />

	<Target Name="compare-hostedfiles" DependsOnTargets="build-tools">
        
        <ItemGroup>
            <FileException Include="$(HostedFilesFolder)\ServiceEndPoints.xml" />
            <FileException Include="$(HostedFilesFolder)\ServiceEndPoints.json" />
            <FileException Include="$(HostedFilesFolder)\endpoints.json" />
            <FileException Include="$(HostedFilesFolder)\.editorconfig" />
            <FileException Include="$(HostedFilesFolder)\flags\**\*.png" />
        </ItemGroup>
        
        <CompareToS3Task
			RegionValue="$(HostedFilesBucketRegion)"
            Bucket="$(HostedFilesBucket)"
            S3Path=""
            LocalPath="$(HostedFilesFolder)"
            FileExceptions="@(FileException)"
            KeyExceptions="@(FileException)"
        />
	</Target>

	<Target Name="compare-hostedfiles-bjs" DependsOnTargets="build-tools">
        <CompareToS3Task
            Bucket="$(BJSHostedFilesBucket)"
            S3Path=""
            LocalPath="$(HostedFilesFolder)"
            CredentialSet="$(BJSCredentials)"
            RegionValue="cn-north-1"
            FileExceptions="@(FileException)"
            KeyExceptions="@(FileException)"
        />
	</Target>

    <Target Name="upload-hostedfile-ec2-quicklaunch-all" DependsOnTargets="upload-hostedfile-ec2-quicklaunch;upload-hostedfile-ec2-quicklaunch-bjs" />

    <Target Name="upload-hostedfile-ec2-quicklaunch" DependsOnTargets="build-tools" Condition="$(PushHostedFiles)">

        <UploadHostedFileTask
				RegionValue="$(HostedFilesBucketRegion)"
				Bucket="$(HostedFilesBucket)"
				S3Key="EC2QuickLaunch.json"
				LocalFilename="$(HostedFilesFolder)/EC2QuickLaunch.json">
			<Output TaskParameter="KeysToInvalidate" PropertyName="HostedFilesInvalidationKeys" />
		</UploadHostedFileTask>

		<CFInvalidateTask
			RegionValue="$(HostedFilesBucketRegion)"
			Condition="!('$(HostedFilesInvalidationKeys)'=='')"
			Distribution="$(VSToolkitDistribution)"
			Keys="$(HostedFilesInvalidationKeys)"
		/>
    </Target>

    <Target Name="upload-hostedfile-ec2-quicklaunch-bjs" DependsOnTargets="build-tools" Condition="$(PushHostedFiles)">

		<!-- we don't seem to do invalidation on bjs, but gather the keys anyway -->
        <UploadHostedFileTask
				Bucket="$(BJSHostedFilesBucket)"
				S3Key="EC2QuickLaunch.json"
				LocalFilename="$(HostedFilesFolder)/EC2QuickLaunch.json"
				CredentialSet="$(BJSCredentials)"
				RegionValue="cn-north-1">
			<Output TaskParameter="KeysToInvalidate" PropertyName="HostedFilesInvalidationKeysBJS" />
		</UploadHostedFileTask>
    </Target>

    <Target Name="upload-hostedfiles" DependsOnTargets="build-tools" Condition="$(PushHostedFiles)">

        <UploadHostedFilesTask
				RegionValue="$(HostedFilesBucketRegion)"
				Bucket="$(HostedFilesBucket)"
				S3Path=""
				KeyExceptions="ServiceEndPoints.xml;ServiceEndPoints.json;endpoints.json;.editorconfig"
				LocalPath="$(HostedFilesFolder)">
			<Output TaskParameter="KeysToInvalidate" PropertyName="HostedFilesInvalidationKeys" />
		</UploadHostedFilesTask>

		<CFInvalidateTask
			RegionValue="$(HostedFilesBucketRegion)"
			Condition="!('$(HostedFilesInvalidationKeys)'=='')"
			Distribution="$(VSToolkitDistribution)"
			Keys="$(HostedFilesInvalidationKeys)"
		/>
    </Target>

    <Target Name="upload-hostedfiles-bjs" DependsOnTargets="build-tools;get-latest-endpoint-data" Condition="$(PushHostedFiles)">

		<!-- we don't seem to do invalidation on bjs, but gather the keys anyway -->
        <UploadHostedFilesTask
				Bucket="$(BJSHostedFilesBucket)"
				S3Path=""
				LocalPath="$(HostedFilesFolder)"
				CredentialSet="$(BJSCredentials)"
				RegionValue="cn-north-1">
			<Output TaskParameter="KeysToInvalidate" PropertyName="HostedFilesInvalidationKeysBJS" />
		</UploadHostedFilesTask>
    </Target>

	<Target Name="validate-ec2-quicklaunch" DependsOnTargets="build-tools">
		<EC2QuickLaunchGeneratorTask />
	</Target>

	<!-- Runs a guided script to generate a release candidate -->
	<!-- Requires Python 3.9+ -->
	<Target Name="queueRelease">
		<PropertyGroup>
			<ReleaseScriptDirectory>$(MSBuildProjectDirectory)\release</ReleaseScriptDirectory>
			<RepositoryDirectory>$([System.IO.Path]::GetDirectoryName($(MSBuildProjectDirectory)))</RepositoryDirectory>
		</PropertyGroup>

		<Exec Command="pip install -r $(ReleaseScriptDirectory)\requirements.txt" />
		
		<!-- Script is ran in a new shell to prevent stdio from being mangled by msbuild -->
		<Exec Command="start powershell.exe -NoExit iex \&quot; $(ReleaseScriptDirectory)\release.ps1 -repoRoot '$(RepositoryDirectory)' \&quot;" />
	</Target>

</Project>
