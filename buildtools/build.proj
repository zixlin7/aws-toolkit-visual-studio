<Project ToolsVersion="14.0" DefaultTargets="full-build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <PropertyGroup>
        <InternalBuildTools Condition="'$(InternalBuildTools)'==''">..\..\AWSDotNetBuildTools</InternalBuildTools>
    </PropertyGroup>

	<Import Project="$(InternalBuildTools)\references.targets" Condition="Exists('$(InternalBuildTools)\references.targets')" />
	<Import Project="$(InternalBuildTools)\common.targets" Condition="Exists('$(InternalBuildTools)\common.targets')" />

    <PropertyGroup>
		<EnableGetReferences>true</EnableGetReferences>
		
        <!-- perform a release build by default -->
        <Configuration Condition="'$(Configuration)'==''">Debug</Configuration>

        <!-- path to the root of the repo artifacts; locations for output content will be inferred from this -->
        <RootPath Condition="'$(RootPath)'==''">$(MSBuildProjectDirectory)\..</RootPath>

        <!-- default location for artifacts consolidation -->
        <Deployment Condition="'$(Deployment)'==''">$(RootPath)\Deployment</Deployment>

        <RunKeyScan Condition="'$(RunKeyScan)'==''">false</RunKeyScan>

        <UpdateVersions Condition="'$(UpdateVersions)'==''">false</UpdateVersions>
        <AWSToolkitVersionNumber Condition="'$(AWSToolkitVersion)'==''"></AWSToolkitVersionNumber>
        <AWSDeployVersionNumber Condition="'$(AWSDeployVersion)'==''"></AWSDeployVersionNumber>

    	<AWSToolkitPackageOutput>$(Deployment)\AWSToolkitPackage</AWSToolkitPackageOutput>

        <Build2017Package Condition="'$(Build2017Package)' == '' And '$(Configuration)' == 'Debug'">true</Build2017Package>
        <Build2017Package Condition="'$(Build2017Package)' == '' And '$(Configuration)' == 'Release'">false</Build2017Package>
        
		<PushHostedFiles Condition="'$(PushHostedFiles)'==''">true</PushHostedFiles>
        <HostedFilesBucket Condition="'$(HostedFilesBucket)'==''">aws-vs-toolkit</HostedFilesBucket>
        <HostedFilesFolder Condition="'$(HostedFilesFolder)'==''">$(RootPath)\hostedfiles</HostedFilesFolder>

		<!-- cn-north-1 artifact properties -->
        <BJSHostedFilesBucket Condition="'$(BJSHostedFilesBucket)'==''">aws-vs-toolkit-cn-north-1</BJSHostedFilesBucket>
        <BJSCredentials Condition="'$(BJSCredentials)'==''">BJS.SDKUpload</BJSCredentials>
         
        <VSToolkitDistribution>E38QEBQWXHC945</VSToolkitDistribution>
         
		<SignVsixPackages Condition="'$(SignVsixPackages)'==''">false</SignVsixPackages>
        
    </PropertyGroup>

	<Target Name="full-build" DependsOnTargets="build-tools;clean;get-references;get-latest-endpoint-data;restore-nuget;update-version;build-awsdeploy;build-vstoolkit;run-tests;keyscan;copy-artifacts;sign-packages;save-build">
		<Message Text="Builds all components of the AWS Toolkit for Visual Studio"/>
	</Target>

    <Target Name="restore-nuget">
        <Message Text="Restoring nuget packages"/>
        <Exec Command="$(RootPath)\solutions\.nuget\NuGet.exe restore $(RootPath)\solutions\AWSVisualStudioToolkit.sln" />
    </Target>
    
    <Target Name="build-awsdeploy">
		<Message Text="$(Configuration) - building host components for AWSDeploy."/>
		
        <MSBuild Projects="..\solutions\AWSDeploymentHostManager.sln" Properties="Configuration=$(Configuration)" />
    </Target>

    <Target Name="build-vstoolkit" DependsOnTargets="patch-vsixmanifest">
        <Message Text="$(Configuration) - building core toolkit, service plugin modules and Visual Studio packages."/>
		
        <MSBuild Projects="..\solutions\AWSVisualStudioToolkit.sln" Properties="VisualStudioVersion=12.0;Configuration=$(Configuration)" />
		
        <MSBuild Projects="..\solutions\AWSVisualStudioToolkit.sln" Properties="VisualStudioVersion=14.0;Configuration=$(Configuration)" />
    </Target>

    <Target Name="build-vs2017-toolkit" DependsOnTargets="copy-cf-msbuild-targets" Condition="'$(Build2017Package)'">
        <Message Text="$(Configuration) - launching shell to build 2017 vsix package."/>

        <Exec Command="cmd.exe /k $(MSBuildProjectDirectory)\vs2017buildshell.bat $(RootPath) $(Configuration)" 
              WorkingDirectory="$(RootPath)"
              />
    </Target>
    
    <Target Name="run-tests" DependsOnTargets="build-vstoolkit">
        <Message Text="$(Configuration) - running unit tests."/>
        
        <ItemGroup>
            <TestAssemblies Include="..\tests\AWSToolkit.Util.Tests\bin\$(Configuration)\AWSToolkit.Util.Tests.dll" />
        </ItemGroup>        
        
        <!-- need to find how to reference this after we've done a nuget restore, at project level, 
             then we can enable unit tests
        <UsingTask AssemblyFile="path\to\xunit.runner.msbuild.net452.dll"
                   TaskName="Xunit.Runner.MSBuild.xunit"/>
                   
        <xunit Assemblies="@(TestAssemblies)" /> 
        -->
    </Target>
    
	<Target Name="patch-vsixmanifest" Condition="$(UpdateVersions)">
		<!-- patch vsixmanifest with release package id if running on Jenkins (likely indicated by update version flag set) -->
        <!-- DISABLE while setting up new project layouts
		<PatchVsixManifestPackageIdTask
			PackageRootFolder="..\shells\AWSToolkitPackage"
			PackageIdPrefix="AWSToolkitPackage"
			GuidSourceFile="Guids.cs"
			GuidMemberName="guid_VSPackageString" />
        -->
	</Target>

    <Target Name="copy-artifacts" DependsOnTargets="build-vstoolkit;copy-awsdeploy;copy-icons;copy-awsdeploy;copy-cf-msbuild-targets;copy-templates;copy-hostedfiles;build-vs2017-toolkit" />

    <Target Name="copy-icons" DependsOnTargets="build-vstoolkit">
		<Message Text="Consolidating icons to deployment folder"/>

        <PropertyGroup>
            <IconsDest>$(Deployment)\Icons</IconsDest>
        </PropertyGroup>

		<MakeDir Directories="$(IconsDest)" />

		<Copy
			SourceFiles="..\vspackages\AWSToolkitPackage\Resources\AWSCloudFormationProject.ico"
			DestinationFiles="$(IconsDest)\AWSCloudFormationProject.ico" />
		<Copy
			SourceFiles="..\vspackages\AWSToolkitPackage\Resources\AWSCloudFormationTemplate.ico"
			DestinationFiles="$(IconsDest)\AWSCloudFormationTemplate.ico" />
    </Target>

    <Target Name="copy-templates" DependsOnTargets="build-vstoolkit">
		<Message Text="Copying IDE project templates to deployment folder"/>
        
        <PropertyGroup>
            <ProjectTemplatesDest>$(Deployment)\ProjectTemplates</ProjectTemplatesDest>
        </PropertyGroup>
        
        <ItemGroup>
            <SampleProjectTemplates Include="$(RootPath)\vspackages\templates\AWSProjectTemplates\AWS Samples\**\*" />
            <ConsoleProjectTemplates Include="$(RootPath)\vspackages\templates\AWSProjectTemplates\AWS_Console\**\*" />
            <EmptyProjectTemplates Include="$(RootPath)\vspackages\templates\AWSProjectTemplates\AWS_Empty\**\*" />
            <WebProjectTemplates Include="$(RootPath)\vspackages\templates\AWSProjectTemplates\AWS_Web\**\*" />
        </ItemGroup>
        
        <Copy
            SourceFiles="@(SampleProjectTemplates)"
            DestinationFolder="$(ProjectTemplatesDest)\AWS Samples\%(RecursiveDir)" />
        
        <Copy
            SourceFiles="@(ConsoleProjectTemplates)"
            DestinationFolder="$(ProjectTemplatesDest)\AWS_Console\%(RecursiveDir)" />
        <Copy
            SourceFiles="@(EmptyProjectTemplates)"
            DestinationFolder="$(ProjectTemplatesDest)\AWS_Empty\%(RecursiveDir)" />
        <Copy
            SourceFiles="@(WebProjectTemplates)"
            DestinationFolder="$(ProjectTemplatesDest)\AWS_Web\%(RecursiveDir)" />
            
    </Target>

    <Target Name="copy-hostedfiles" DependsOnTargets="get-latest-endpoint-data">
		<Message Text="Copying hosted files to deployment folder"/>

        <PropertyGroup>
            <HostedFilesDest>$(Deployment)\hostedfiles</HostedFilesDest>
        </PropertyGroup>

		<MakeDir Directories="$(HostedFilesDest)" />

        <ItemGroup>
            <HostedFiles Include="$(HostedFilesFolder)\**\*" />
        </ItemGroup>
        
		<Copy
			SourceFiles="@(HostedFiles)"
			DestinationFolder="$(HostedFilesDest)\%(RecursiveDir)" />
    </Target>

	<Target Name="copy-awsdeploy" DependsOnTargets="build-vstoolkit">
        <PropertyGroup>
            <AwsDeployDest>$(Deployment)\awsdeploy</AwsDeployDest>
        </PropertyGroup>	
		
        <MakeDir Directories="$(AwsDeployDest)" />
        <ItemGroup>
            <AWSDeployBinaries Include="..\awsdeploy\client\AWSDeploymentTool\bin\$(Configuration)\awsdeploy.exe" />
			<AWSDeployBinaries Include="..\awsdeploy\client\AWSDeploymentLib\bin\$(Configuration)\AWSDeploymentLib.dll" />
			<AWSDeployBinaries Include="..\Deployment\14.0\$(Configuration)\AWSDeploymentCryptoUtility.dll"/>
			<AWSDeployBinaries Include="..\Deployment\14.0\$(Configuration)\AWSDeploymentHostManagerClientLib.dll"/>
			<AWSDeployBinaries Include="..\Include\sdk\assemblies\net45\AWSSDK.Core.dll"/>
			<AWSDeployBinaries Include="..\Include\sdk\assemblies\net45\AWSSDK.AutoScaling.dll"/>
			<AWSDeployBinaries Include="..\Include\sdk\assemblies\net45\AWSSDK.CloudFormation.dll"/>
			<AWSDeployBinaries Include="..\Include\sdk\assemblies\net45\AWSSDK.CloudWatch.dll"/>
			<AWSDeployBinaries Include="..\Include\sdk\assemblies\net45\AWSSDK.EC2.dll"/>
			<AWSDeployBinaries Include="..\Include\sdk\assemblies\net45\AWSSDK.ElasticBeanstalk.dll"/>
			<AWSDeployBinaries Include="..\Include\sdk\assemblies\net45\AWSSDK.ElasticLoadBalancing.dll"/>
			<AWSDeployBinaries Include="..\Include\sdk\assemblies\net45\AWSSDK.IdentityManagement.dll"/>
			<AWSDeployBinaries Include="..\Include\sdk\assemblies\net45\AWSSDK.Lambda.dll"/>
			<AWSDeployBinaries Include="..\Include\sdk\assemblies\net45\AWSSDK.RDS.dll"/>
			<AWSDeployBinaries Include="..\Include\sdk\assemblies\net45\AWSSDK.S3.dll"/>
			<AWSDeployBinaries Include="..\Include\sdk\assemblies\net45\AWSSDK.SimpleNotificationService.dll"/>
			<AWSDeployBinaries Include="..\Include\sdk\assemblies\net45\AWSSDK.SQS.dll"/>
			<AWSDeployBinaries Include="..\Deployment\14.0\$(Configuration)\AWSSDK.Extensions.dll"/>
			<AWSDeployBinaries Include="..\Deployment\14.0\$(Configuration)\AWSToolkit.Util.dll"/>
			<AWSDeployBinaries Include="..\Deployment\14.0\$(Configuration)\AWSToolkit.dll"/>
			
			<AWSDeployBinaries Include="..\thirdparty\ICSharpCode.SharpZipLib.dll"/>
			<AWSDeployBinaries Include="..\thirdparty\log4net.dll"/>
			<AWSDeployBinaries Include="..\thirdparty\NGit.dll"/>
			<AWSDeployBinaries Include="..\thirdparty\NSch.dll"/>
			<AWSDeployBinaries Include="..\thirdparty\Mono.Security.dll"/>
			<AWSDeployBinaries Include="..\thirdparty\Sharpen.dll"/>
			<AWSDeployBinaries Include="..\thirdparty\System.Windows.Controls.DataVisualization.Toolkit.dll"/>
			
        </ItemGroup>
        <Copy
            SourceFiles="@(AWSDeployBinaries)"
            DestinationFolder="$(AwsDeployDest)" />
			
	</Target>

	<Target Name="copy-cf-msbuild-targets" DependsOnTargets="build-vstoolkit">
        <PropertyGroup>
            <CfMsbuildTargetsDest>$(Deployment)\cf-msbuild-targets</CfMsbuildTargetsDest>
        </PropertyGroup>	
		<MakeDir Directories="$(CfMsbuildTargetsDest)" />
		
        <ItemGroup>
            <CfMsBuildTargetBinaries Include="..\vspackages\cloudformation\AWSToolkit.CloudFormation.MSBuildTasks\cloudformation.targets" />
			<CfMsBuildTargetBinaries Include="..\Deployment\14.0\$(Configuration)\AWSToolkit.CloudFormation.MSBuildTasks.dll" />
			<CfMsBuildTargetBinaries Include="..\Deployment\14.0\$(Configuration)\AWSToolkit.CloudFormation.Parser.dll"/>
			<CfMsBuildTargetBinaries Include="..\Deployment\14.0\$(Configuration)\AWSToolkit.Util.dll"/>
			<CfMsBuildTargetBinaries Include="..\thirdparty\log4net.dll"/>
			<CfMsBuildTargetBinaries Include="..\Include\sdk\assemblies\net45\AWSSDK.Core.dll"/>
			<CfMsBuildTargetBinaries Include="..\Deployment\14.0\$(Configuration)\AWSDeploymentCryptoUtility.dll"/>
			<CfMsBuildTargetBinaries Include="..\Deployment\14.0\$(Configuration)\AWSDeploymentHostManagerClientLib.dll"/>
        </ItemGroup>
        <Copy
            SourceFiles="@(CfMsBuildTargetBinaries)"
            DestinationFolder="$(CfMsbuildTargetsDest)" />		
		
	</Target>
	
	<Target Name="update-version" DependsOnTargets="build-tools" Condition="$(UpdateVersions)">
		<UpdateAssemblyInfoVersionTask
			RepositoryRoot="$(MSBuildProjectDirectory)\.."
            AssemblyInfoPaths="awsdeploy\host"
			VersionNumber="$(AWSDeployVersionNumber)"
			WaitForDebugger="false"
			/>

		<UpdateVSToolkitVersionTask
			RepositoryRoot="$(MSBuildProjectDirectory)\.."
			ExcludePaths="vspackages\templates\AWSProjectTemplates;vspackages\cloudformation\CloudFormationProjectTemplate;vspackages\cloudformation\CloudFormationTemplate;vspackages\lambda\LambdaFunctionProjectTemplate;vspackages\lambda\LambdaNETCoreFlourishProjectTemplate;vspackages\lambda\LambdaNETCoreFlourishProjectWithTestTemplate;vspackages\lambda\LambdaNETCoreFunctionProjectTemplate;vspackages\lambda\LambdaNETCoreFunctionProjectWithTestTemplate"
			VersionNumber="$(AWSToolkitVersionNumber)"
			WaitForDebugger="false"
			/>
	</Target>

    <Target Name="keyscan" Condition="$(RunKeyScan)" DependsOnTargets="build-tools">

        <ItemGroup>
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\obj\Debug\View\Components\GetPasswordAskPrivateKey.baml" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\obj\Debug\View\OpenRemoteDesktopControl.baml" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\obj\Debug\View\OpenSCPSessionControl.baml" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\obj\Debug\View\OpenSSHSessionControl.baml" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\obj\12.0\Debug\AWSToolkit.EC2.g.resources" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\obj\14.0\Debug\AWSToolkit.EC2.g.resources" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\obj\Release\View\Components\GetPasswordAskPrivateKey.baml" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\obj\Release\View\OpenRemoteDesktopControl.baml" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\obj\Release\View\OpenSCPSessionControl.baml" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\obj\Release\View\OpenSSHSessionControl.baml" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\obj\Release\AWSToolkit.EC2.g.resources" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\View\Components\GetPasswordAskPrivateKey.xaml" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\View\GetPasswordControl.xaml.cs" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\View\OpenRemoteDesktopControl.xaml" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\View\OpenSCPSessionControl.xaml" />
            <PrivateKeyException Include="toolkitcore\plugins\AWSToolkit.EC2\View\OpenSSHSessionControl.xaml" />			
            <PrivateKeyException Include="tests\AWSToolkit.Tests\CryptoTests.cs" />
            <PrivateKeyException Include="thirdparty\PemToPPKConverter\openssh.c" />
            <PrivateKeyException Include="thirdparty\PemToPPKConverter\Release\openssh.obj" />
			
		    <PrivateKeyException Include="Include\sdk\Models\acm\acm-2015-12-08.normal.json" />
            <PrivateKeyException Include="Include\sdk\Models\ec2\ec2-2014-02-01.normal.json" />
            <PrivateKeyException Include="Include\sdk\Models\iam\iam-2010-05-08.normal.json" />
			
        </ItemGroup>

        <ItemGroup>
			<FileException Include="vspackages\templates\TemplateWizard\UserInputForm.resx" />
            <FileException Include="awsdeploy\tests\AWSDeploymentUnitTest\Resources\sample-configfile.txt" />
			
			<FileException Include="Include\sdk\Models\elasticbeanstalk.examples.json" />
			<FileException Include="Include\sdk\Models\elasticbeanstalk.customizations.json" />
			
        </ItemGroup>

        <KeyScannerTask
            Folder="$(MSBuildProjectDirectory)\.."
            FilePattern="**"
            PrivateKeyExceptions="@(PrivateKeyException)"
            FileExceptions="@(FileException)"
            ParallelScan="true"
            />

    </Target>

    <Target Name="sign-packages" DependsOnTargets="copy-artifacts" Condition="'$(SignVsixPackages)'">
    
		<PropertyGroup>
            <SigningScriptArgs>-ExecutionPolicy Unrestricted -NoProfile -Command "$(MSBuildProjectDirectory)\SignVsixPackage.ps1" -VsixPackage "$(Deployment)\15.0\$(Configuration)\AWSToolkitPackage.vsix"</SigningScriptArgs>
		</PropertyGroup>
        
        <Message Text="Signing VS2017 vsix package deployed to $(Deployment)\15.0\$(Configuration) folder" />
        
		<Exec LogStandardErrorAsError="true"
              Command="$(powershell) $(SigningScriptArgs)" />
        
    </Target>
    
	<Target Name="save-build"  DependsOnTargets="build-tools">
		<SaveBuildArtifactTask
			RepositoryRoot="$(MSBuildProjectDirectory)\.."
			BuildArtifactType="toolkit"
			GitBranch="$(SaveReferenceGitBranch)"
			LocalArchiveRootFolder="$(LocalArchiveRootFolder)"
			/>
	</Target>

    <!-- only care about packaging updated endpoints and flags for release builds -->
    <Target Name="get-latest-endpoint-data" DependsOnTargets="build-tools" Condition="'$(Configuration)' == 'Release' ">
        
        <Message Text="Fetching latest endpoints and flags from S3" />
        
        <DownloadFromS3Task
            S3ObjectKey="ServiceEndPoints.xml"
            LocalPath="$(HostedFilesFolder)"
            Bucket="$(HostedFilesBucket)"
            />
            
        <DownloadFromS3Task
            S3Path="flags"
            LocalPath="$(HostedFilesFolder)"
            Bucket="$(HostedFilesBucket)"
            />
        
    </Target>
    
	<Target Name="compare-hostedfiles-all" DependsOnTargets="compare-hostedfiles;compare-hostedfiles-bjs" />

	<Target Name="compare-hostedfiles" DependsOnTargets="build-tools">
        
        <ItemGroup>
            <!-- <FileException Include="$(HostedFilesFolder)\ServiceEndPoints.xml" /> -->
            <FileException Include="$(HostedFilesFolder)\flags\**\*.png" />
        </ItemGroup>
        
        <CompareToS3Task
            Bucket="$(HostedFilesBucket)"
            S3Path=""
            LocalPath="$(HostedFilesFolder)"
            FileExceptions="@(FileException)"
            KeyExceptions="@(FileException)"
        />
	</Target>

	<Target Name="compare-hostedfiles-bjs" DependsOnTargets="build-tools">
        <CompareToS3Task
            Bucket="$(BJSHostedFilesBucket)"
            S3Path=""
            LocalPath="$(HostedFilesFolder)"
            CredentialSet="$(BJSCredentials)"
            RegionValue="cn-north-1"
            FileExceptions="@(FileException)"
            KeyExceptions="@(FileException)"
        />
	</Target>

    <Target Name="upload-hostedfile-ec2-quicklaunch-all" DependsOnTargets="upload-hostedfile-ec2-quicklaunch;upload-hostedfile-ec2-quicklaunch-bjs" />

    <Target Name="upload-hostedfile-ec2-quicklaunch" DependsOnTargets="build-tools" Condition="$(PushHostedFiles)">

        <UploadHostedFileTask
				Bucket="$(HostedFilesBucket)"
				S3Key="EC2QuickLaunch.json"
				LocalFilename="$(HostedFilesFolder)/EC2QuickLaunch.json">
			<Output TaskParameter="KeysToInvalidate" PropertyName="HostedFilesInvalidationKeys" />
		</UploadHostedFileTask>

		<CFInvalidateTask
			Condition="!('$(HostedFilesInvalidationKeys)'=='')"
			Distribution="$(VSToolkitDistribution)"
			Keys="$(HostedFilesInvalidationKeys)"
		/>
    </Target>

    <Target Name="upload-hostedfile-ec2-quicklaunch-bjs" DependsOnTargets="build-tools" Condition="$(PushHostedFiles)">

		<!-- we don't seem to do invalidation on bjs, but gather the keys anyway -->
        <UploadHostedFileTask
				Bucket="$(BJSHostedFilesBucket)"
				S3Key="EC2QuickLaunch.json"
				LocalFilename="$(HostedFilesFolder)/EC2QuickLaunch.json"
				CredentialSet="$(BJSCredentials)"
				RegionValue="cn-north-1">
			<Output TaskParameter="KeysToInvalidate" PropertyName="HostedFilesInvalidationKeysBJS" />
		</UploadHostedFileTask>
    </Target>

    <Target Name="upload-hostedfiles-all" DependsOnTargets="upload-hostedfiles;upload-hostedfiles-bjs" />

    <Target Name="upload-hostedfiles" DependsOnTargets="build-tools" Condition="$(PushHostedFiles)">

        <UploadHostedFilesTask
				Bucket="$(HostedFilesBucket)"
				S3Path=""
				LocalPath="$(HostedFilesFolder)">
			<Output TaskParameter="KeysToInvalidate" PropertyName="HostedFilesInvalidationKeys" />
		</UploadHostedFilesTask>

		<CFInvalidateTask
			Condition="!('$(HostedFilesInvalidationKeys)'=='')"
			Distribution="$(VSToolkitDistribution)"
			Keys="$(HostedFilesInvalidationKeys)"
		/>
    </Target>

    <Target Name="upload-hostedfiles-bjs" DependsOnTargets="build-tools" Condition="$(PushHostedFiles)">

		<!-- we don't seem to do invalidation on bjs, but gather the keys anyway -->
        <UploadHostedFilesTask
				Bucket="$(BJSHostedFilesBucket)"
				S3Path=""
				LocalPath="$(HostedFilesFolder)"
				CredentialSet="$(BJSCredentials)"
				RegionValue="cn-north-1">
			<Output TaskParameter="KeysToInvalidate" PropertyName="HostedFilesInvalidationKeysBJS" />
		</UploadHostedFilesTask>
    </Target>

	<Target Name="validate-ec2-quicklaunch" DependsOnTargets="build-tools">
		<EC2QuickLaunchGeneratorTask />
	</Target>

	<Target Name="get-references"  DependsOnTargets="build-tools"  Condition="$(EnableGetReferences)">
		<MSBuild Projects ="$(MSBuildProjectFullPath)" Targets="get-reference-sdk" Properties="TargetRepository=$(MSBuildProjectDirectory)\.."/>
	</Target>
    
</Project>
